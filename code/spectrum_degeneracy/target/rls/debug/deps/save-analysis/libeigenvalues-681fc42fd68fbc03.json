{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1","program":"/home/strelda/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","eigenvalues","--edition=2018","/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=681fc42fd68fbc03","-C","extra-filename=-681fc42fd68fbc03","--out-dir","/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps","-L","dependency=/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps","--extern","approx=/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps/libapprox-8166b3ebffa2b785.rmeta","--extern","nalgebra=/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps/libnalgebra-b5192a64d2a4e31b.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/strelda/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps/libeigenvalues-681fc42fd68fbc03.rmeta"},"prelude":{"crate_id":{"name":"eigenvalues","disambiguator":[5676280270992739272,12129466316649070761]},"crate_root":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src","external_crates":[{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15256637969148649584,12170509131058075833]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2572959971889902175,17506693968225989007]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7380289047210505863,13821127130725723065]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15494144285296940423,1517275930380298805]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16074686111301742862,11174094882134223101]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9848143689052418189,5596786287495938678]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4765876764407181064,11122159180720543906]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3249135693812064660,5763443684941168569]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17048817722375060837,16920886256309599893]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13552797903376776722,10482089333731059857]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5989449439605467183,7256304997069434828]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13279369789493161905,12463804053127379464]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[295047501211602818,3843164955111373824]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[14781020588812023641,7393321088923443539]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[1927264790928947756,6617054577979570835]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[7597657085106642381,11470551509849691989]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[2355022556203982070,155364045674250901]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[3046834347757213021,4625500188193743608]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":19,"id":{"name":"nalgebra","disambiguator":[351945538298687026,7972293810524133613]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/utils.rs","num":20,"id":{"name":"approx","disambiguator":[5818759019776068413,2572251874152357256]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":21,"id":{"name":"num_traits","disambiguator":[468258127332996008,10301193667755463888]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":22,"id":{"name":"generic_array","disambiguator":[12079527779217415778,13083402877010744411]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":23,"id":{"name":"typenum","disambiguator":[6578675967236591406,12581686752636525447]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":24,"id":{"name":"matrixmultiply","disambiguator":[15045354039041294955,10350935483844554325]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":25,"id":{"name":"rawpointer","disambiguator":[12497493122326690977,13825836558626677164]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":26,"id":{"name":"num_complex","disambiguator":[17872560142149014032,10156406315603362374]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":27,"id":{"name":"num_rational","disambiguator":[8892350839030283478,5594005860922181052]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":28,"id":{"name":"num_integer","disambiguator":[2148939669658638950,11721986914887954930]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":29,"id":{"name":"rand","disambiguator":[17561839813816711879,16031214908450619867]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":30,"id":{"name":"rand_core","disambiguator":[8770168004857400430,14733887116596971414]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":31,"id":{"name":"getrandom","disambiguator":[7228635107424616051,4912745335246501796]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":32,"id":{"name":"cfg_if","disambiguator":[663853888918535240,12010312547204163862]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":33,"id":{"name":"libc","disambiguator":[6239922692478618424,13891686025122525393]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":34,"id":{"name":"rand_chacha","disambiguator":[14943605398771928436,8087151095102497018]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":35,"id":{"name":"ppv_lite86","disambiguator":[16342140534606003648,15606045994417953711]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":36,"id":{"name":"rand_distr","disambiguator":[3825571668849149885,11332838202296284782]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","num":37,"id":{"name":"alga","disambiguator":[3324915885725225395,1611465457281717452]}}],"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","byte_start":0,"byte_end":1980,"line_start":1,"line_end":61,"column_start":1,"column_end":36}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":4},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","byte_start":1909,"byte_end":1917,"line_start":60,"line_end":60,"column_start":22,"column_end":30},"alias_span":null,"name":"davidson","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":75},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","byte_start":1919,"byte_end":1926,"line_start":60,"line_end":60,"column_start":32,"column_end":39},"alias_span":null,"name":"lanczos","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":199},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","byte_start":1928,"byte_end":1942,"line_start":60,"line_end":60,"column_start":41,"column_end":55},"alias_span":null,"name":"SpectrumTarget","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":148},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","byte_start":1976,"byte_end":1979,"line_start":61,"line_end":61,"column_start":32,"column_end":35},"alias_span":null,"name":"MGS","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","byte_start":0,"byte_end":1980,"line_start":1,"line_end":61,"column_start":1,"column_end":36},"name":"","qualname":"::","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":104},{"krate":0,"index":136},{"krate":0,"index":153},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":190},{"krate":0,"index":193},{"krate":0,"index":196}],"decl_id":null,"docs":"# Eigenvalues decomposition","sig":null,"attributes":[{"value":"*\n\n# Eigenvalues decomposition\n\nThis crate contains implementations of several algorithm to\ndiagonalize symmetric matrices.\n\n## Davidson Usage Example\n```\nextern crate eigenvalues;\nextern crate nalgebra as na;\n\n// Use the Davidson method\nuse eigenvalues::davidson::Davidson;\nuse eigenvalues::SpectrumTarget;\nuse na::{DMatrix, DVector};\n\n// Generate random symmetric matrix\nlet matrix = eigenvalues::utils::generate_diagonal_dominant(20, 0.005);\nlet tolerance = 1e-4;\n\n// Compute the first 2 lowest eigenvalues/eigenvectors using the DPR method\nlet eig = Davidson::new (matrix.clone(), 2, \"DPR\", SpectrumTarget::Lowest, tolerance).unwrap();\nprintln!(\"eigenvalues:{}\", eig.eigenvalues);\nprintln!(\"eigenvectors:{}\", eig.eigenvectors);\n\n// Compute the first 2 highest eigenvalues/eigenvectors using the GJD method\nlet eig = Davidson::new (matrix, 2, \"GJD\", SpectrumTarget::Highest, tolerance).unwrap();\nprintln!(\"eigenvalues:{}\", eig.eigenvalues);\nprintln!(\"eigenvectors:{}\", eig.eigenvectors);\n```\n\n## Lanczos Usage Example\n```\nextern crate eigenvalues;\nextern crate nalgebra as na;\n\nuse eigenvalues::algorithms::lanczos::HermitianLanczos;\nuse eigenvalues::utils::{generate_random_sparse_symmetric, sort_eigenpairs};\nuse eigenvalues::SpectrumTarget;\n\n// Generate sparse matrix\nlet matrix = generate_random_sparse_symmetric(100, 5, 0.5);\n\n// Use 20 iterations to approximate the highest part of the spectrum\nlet spectrum_target = SpectrumTarget::Highest;\nlet lanczos = HermitianLanczos::new(matrix.clone(), 20, spectrum_target).unwrap();\nlet eig = sort_eigenpairs(na::linalg::SymmetricEigen::new(matrix.clone()), false);\n// Compare against reference\nprintln!(\"Computed eigenvalues:\\n{}\", lanczos.eigenvalues.rows(0, 3));\nprintln!(\"Expected eigenvalues:\\n{}\", eig.eigenvalues.rows(0, 3));\n```\n\n*/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","byte_start":0,"byte_end":1793,"line_start":1,"line_end":54,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"algorithms","qualname":"::algorithms","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/mod.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":75},{"krate":0,"index":199},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":210}],"decl_id":null,"docs":"## Algorithms to compute (some) eigenvalues/eigenvectors for symmetric matrices.\n","sig":null,"attributes":[{"value":"*\n\n## Algorithms to compute (some) eigenvalues/eigenvectors for symmetric matrices.\n\n*/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/mod.rs","byte_start":1982,"byte_end":2071,"line_start":1,"line_end":5,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"davidson","qualname":"::algorithms::davidson","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":60},{"krate":0,"index":65},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74}],"decl_id":null,"docs":"# Davidson Diagonalization","sig":null,"attributes":[{"value":"*\n\n# Davidson Diagonalization\n\nThe Davidson method is suitable for diagonal-dominant symmetric matrices,\nthat are quite common in certain scientific problems like [electronic\nstructure](https://en.wikipedia.org/wiki/Electronic_structure). The Davidson\nmethod could be not practical for other kind of symmetric matrices.\n\nThe current implementation uses a general davidson algorithm, meaning\nthat it compute all the requested eigenvalues simultaneusly using a variable\nsize block approach. The family of Davidson algorithm only differ in the way\nthat the correction vector is computed.\n\nAvailable correction methods are:\n * **DPR**: Diagonal-Preconditioned-Residue\n * **GJD**: Generalized Jacobi Davidson\n\n*/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":2300,"byte_end":3009,"line_start":1,"line_end":19,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":48},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":4906,"byte_end":4914,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"Davidson","qualname":"::algorithms::davidson::Davidson","value":"Davidson { eigenvalues, eigenvectors }","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50}],"decl_id":null,"docs":" Structure with the configuration data\n","sig":null,"attributes":[{"value":"/ Structure with the configuration data","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":4853,"byte_end":4894,"line_start":81,"line_end":81,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":49},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":4925,"byte_end":4936,"line_start":83,"line_end":83,"column_start":9,"column_end":20},"name":"eigenvalues","qualname":"::algorithms::davidson::Davidson::eigenvalues","value":"matrix_operations::na::Matrix<f64, matrix_operations::na::Dynamic, matrix_operations::na::U1, matrix_operations::na::VecStorage<f64, matrix_operations::na::Dynamic, matrix_operations::na::U1>>","parent":{"krate":0,"index":48},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":50},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":4960,"byte_end":4972,"line_start":84,"line_end":84,"column_start":9,"column_end":21},"name":"eigenvectors","qualname":"::algorithms::davidson::Davidson::eigenvectors","value":"matrix_operations::na::Matrix<f64, matrix_operations::na::Dynamic, matrix_operations::na::Dynamic, <matrix_operations::na::DefaultAllocator as matrix_operations::na::allocator::Allocator<f64, matrix_operations::na::Dynamic, matrix_operations::na::Dynamic>>::Buffer>","parent":{"krate":0,"index":48},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":5354,"byte_end":5357,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"new","qualname":"<Davidson>::new","value":"pub fn new<M: MatrixOperations>(M, usize, &str, SpectrumTarget, f64)\n-> Result<Self, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" The new static method takes the following arguments:\n * `h` - A highly diagonal symmetric matrix\n * `nvalues` - the number of eigenvalues/eigenvectors pair to compute\n * `method` Either DPR or GJD\n * `spectrum_target` Lowest or Highest part of the spectrum\n * `tolerance` numerical tolerance.\n","sig":null,"attributes":[{"value":"/ The new static method takes the following arguments:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":5011,"byte_end":5067,"line_start":88,"line_end":88,"column_start":5,"column_end":61}},{"value":"/ * `h` - A highly diagonal symmetric matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":5072,"byte_end":5118,"line_start":89,"line_end":89,"column_start":5,"column_end":51}},{"value":"/ * `nvalues` - the number of eigenvalues/eigenvectors pair to compute","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":5123,"byte_end":5195,"line_start":90,"line_end":90,"column_start":5,"column_end":77}},{"value":"/ * `method` Either DPR or GJD","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":5200,"byte_end":5232,"line_start":91,"line_end":91,"column_start":5,"column_end":37}},{"value":"/ * `spectrum_target` Lowest or Highest part of the spectrum","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":5237,"byte_end":5299,"line_start":92,"line_end":92,"column_start":5,"column_end":67}},{"value":"/ * `tolerance` numerical tolerance.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":5304,"byte_end":5342,"line_start":93,"line_end":93,"column_start":5,"column_end":43}}]},{"kind":"Mod","id":{"krate":0,"index":75},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/lanczos.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"lanczos","qualname":"::algorithms::lanczos","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/lanczos.rs","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":99}],"decl_id":null,"docs":"# Hermitian Lanczos algorithm","sig":null,"attributes":[{"value":"*\n\n# Hermitian Lanczos algorithm\n\nThe [Hermitian Lanczos](https://en.wikipedia.org/wiki/Lanczos_algorithm) is an algorithm to compute the lowest/highest\neigenvalues of an hermitian matrix using a [Krylov subspace](https://en.wikipedia.org/wiki/Krylov_subspace)\n\n*/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/lanczos.rs","byte_start":16117,"byte_end":16383,"line_start":1,"line_end":8,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":96},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/lanczos.rs","byte_start":16578,"byte_end":16594,"line_start":16,"line_end":16,"column_start":12,"column_end":28},"name":"HermitianLanczos","qualname":"::algorithms::lanczos::HermitianLanczos","value":"HermitianLanczos { eigenvalues, eigenvectors }","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":97},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/lanczos.rs","byte_start":16605,"byte_end":16616,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"name":"eigenvalues","qualname":"::algorithms::lanczos::HermitianLanczos::eigenvalues","value":"matrix_operations::na::Matrix<f64, matrix_operations::na::Dynamic, matrix_operations::na::U1, matrix_operations::na::VecStorage<f64, matrix_operations::na::Dynamic, matrix_operations::na::U1>>","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":98},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/lanczos.rs","byte_start":16640,"byte_end":16652,"line_start":18,"line_end":18,"column_start":9,"column_end":21},"name":"eigenvectors","qualname":"::algorithms::lanczos::HermitianLanczos::eigenvectors","value":"matrix_operations::na::Matrix<f64, matrix_operations::na::Dynamic, matrix_operations::na::Dynamic, <matrix_operations::na::DefaultAllocator as matrix_operations::na::allocator::Allocator<f64, matrix_operations::na::Dynamic, matrix_operations::na::Dynamic>>::Buffer>","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/lanczos.rs","byte_start":16940,"byte_end":16943,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<HermitianLanczos>::new","value":"pub fn new<M: MatrixOperations>(M, usize, SpectrumTarget)\n-> Result<Self, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" The new static method takes the following arguments:\n * `h` - A highly diagonal symmetric matrix\n * `maximum_iterations` - Krylov subspace size\n * `spectrum_target` Lowest or Highest part of the spectrum\n","sig":null,"attributes":[{"value":"/ The new static method takes the following arguments:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/lanczos.rs","byte_start":16699,"byte_end":16755,"line_start":22,"line_end":22,"column_start":5,"column_end":61}},{"value":"/ * `h` - A highly diagonal symmetric matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/lanczos.rs","byte_start":16760,"byte_end":16806,"line_start":23,"line_end":23,"column_start":5,"column_end":51}},{"value":"/ * `maximum_iterations` - Krylov subspace size","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/lanczos.rs","byte_start":16811,"byte_end":16860,"line_start":24,"line_end":24,"column_start":5,"column_end":54}},{"value":"/ * `spectrum_target` Lowest or Highest part of the spectrum","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/lanczos.rs","byte_start":16865,"byte_end":16927,"line_start":25,"line_end":25,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":200},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/mod.rs","byte_start":2259,"byte_end":2265,"line_start":13,"line_end":13,"column_start":5,"column_end":11},"name":"Lowest","qualname":"::algorithms::SpectrumTarget::Lowest","value":"SpectrumTarget::Lowest","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":202},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/mod.rs","byte_start":2271,"byte_end":2278,"line_start":14,"line_end":14,"column_start":5,"column_end":12},"name":"Highest","qualname":"::algorithms::SpectrumTarget::Highest","value":"SpectrumTarget::Highest","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":204},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/mod.rs","byte_start":2284,"byte_end":2290,"line_start":15,"line_end":15,"column_start":5,"column_end":11},"name":"Target","qualname":"::algorithms::SpectrumTarget::Target","value":"SpectrumTarget::Target(f64)","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":199},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/mod.rs","byte_start":2238,"byte_end":2252,"line_start":12,"line_end":12,"column_start":10,"column_end":24},"name":"SpectrumTarget","qualname":"::algorithms::SpectrumTarget","value":"pub enum SpectrumTarget { Lowest, Highest, Target(f64), }","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204}],"decl_id":null,"docs":" Option to compute the lowest, highest or somewhere in the middle part of the\n spectrum\n","sig":null,"attributes":[{"value":"/ Option to compute the lowest, highest or somewhere in the middle part of the","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/mod.rs","byte_start":2108,"byte_end":2188,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ spectrum","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/mod.rs","byte_start":2189,"byte_end":2201,"line_start":10,"line_end":10,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":104},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"matrix_operations","qualname":"::matrix_operations","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":129}],"decl_id":null,"docs":"## Common matrix operations for all the matrix representations.","sig":null,"attributes":[{"value":"*\n\n## Common matrix operations for all the matrix representations.\n\n### Other matrix representations\nCurrently the algorithms are implemented for the `nalgebra` **DMatrix** type.\nYou can use the algorithms for other matrix representations (e.g. matrix-free)\nby providing your own implementation of the **Matrixoperations** trait.\n\n*/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":19575,"byte_end":19910,"line_start":1,"line_end":10,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":122},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":20078,"byte_end":20094,"line_start":16,"line_end":16,"column_start":11,"column_end":27},"name":"MatrixOperations","qualname":"::matrix_operations::MatrixOperations","value":"MatrixOperations: Clone","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128}],"decl_id":null,"docs":" Trait containing the matrix free operations\n","sig":null,"attributes":[{"value":"/ Trait containing the matrix free operations","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":20020,"byte_end":20067,"line_start":15,"line_end":15,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":20149,"byte_end":20167,"line_start":18,"line_end":18,"column_start":8,"column_end":26},"name":"matrix_vector_prod","qualname":"::matrix_operations::MatrixOperations::matrix_vector_prod","value":"pub fn matrix_vector_prod(&Self, DVectorSlice<, f64>) -> DVector<f64>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Matrix vector multiplication\n","sig":null,"attributes":[{"value":"/ Matrix vector multiplication","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":20109,"byte_end":20141,"line_start":17,"line_end":17,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":20259,"byte_end":20277,"line_start":20,"line_end":20,"column_start":8,"column_end":26},"name":"matrix_matrix_prod","qualname":"::matrix_operations::MatrixOperations::matrix_matrix_prod","value":"pub fn matrix_matrix_prod(&Self, DMatrixSlice<, f64>) -> DMatrix<f64>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Matrix matrix multiplication\n","sig":null,"attributes":[{"value":"/ Matrix matrix multiplication","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":20219,"byte_end":20251,"line_start":19,"line_end":19,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":20365,"byte_end":20373,"line_start":22,"line_end":22,"column_start":8,"column_end":16},"name":"diagonal","qualname":"::matrix_operations::MatrixOperations::diagonal","value":"pub fn diagonal(&Self) -> DVector<f64>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Get the matrix diagonal\n","sig":null,"attributes":[{"value":"/ Get the matrix diagonal","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":20330,"byte_end":20357,"line_start":21,"line_end":21,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":20437,"byte_end":20449,"line_start":24,"line_end":24,"column_start":8,"column_end":20},"name":"set_diagonal","qualname":"::matrix_operations::MatrixOperations::set_diagonal","value":"pub fn set_diagonal(&mut Self, &DVector<f64>)","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Set the matrix diagonal\n","sig":null,"attributes":[{"value":"/ Set the matrix diagonal","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":20402,"byte_end":20429,"line_start":23,"line_end":23,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":20524,"byte_end":20529,"line_start":26,"line_end":26,"column_start":8,"column_end":13},"name":"ncols","qualname":"::matrix_operations::MatrixOperations::ncols","value":"pub fn ncols(&Self) -> usize","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Get the number of columns\n","sig":null,"attributes":[{"value":"/ Get the number of columns","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":20487,"byte_end":20516,"line_start":25,"line_end":25,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":20585,"byte_end":20590,"line_start":28,"line_end":28,"column_start":8,"column_end":13},"name":"nrows","qualname":"::matrix_operations::MatrixOperations::nrows","value":"pub fn nrows(&Self) -> usize","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Get the number of rows\n","sig":null,"attributes":[{"value":"/ Get the number of rows","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":20551,"byte_end":20577,"line_start":27,"line_end":27,"column_start":5,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":136},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/modified_gram_schmidt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"modified_gram_schmidt","qualname":"::modified_gram_schmidt","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/modified_gram_schmidt.rs","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":150}],"decl_id":null,"docs":"# Modified Gram-Schmidt (MGS)","sig":null,"attributes":[{"value":"*\n\n# Modified Gram-Schmidt (MGS)\n\nThe Gram-Schmidt method is a method for orthonormalising a set of vectors. see:\n[Gram-Schmidt process](https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process)\nThe MGS method improves the orthogonality loss due to the finite numerical precision\non computers.\n */","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/modified_gram_schmidt.rs","byte_start":21136,"byte_end":21437,"line_start":1,"line_end":9,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":148},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/modified_gram_schmidt.rs","byte_start":21522,"byte_end":21525,"line_start":14,"line_end":14,"column_start":12,"column_end":15},"name":"MGS","qualname":"::modified_gram_schmidt::MGS","value":"MGS { basis }","parent":null,"children":[{"krate":0,"index":149}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":149},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/modified_gram_schmidt.rs","byte_start":21536,"byte_end":21541,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"name":"basis","qualname":"::modified_gram_schmidt::MGS::basis","value":"matrix_operations::na::Matrix<f64, matrix_operations::na::Dynamic, matrix_operations::na::Dynamic, <matrix_operations::na::DefaultAllocator as matrix_operations::na::allocator::Allocator<f64, matrix_operations::na::Dynamic, matrix_operations::na::Dynamic>>::Buffer>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/modified_gram_schmidt.rs","byte_start":21840,"byte_end":21854,"line_start":23,"line_end":23,"column_start":12,"column_end":26},"name":"orthonormalize","qualname":"<MGS>::orthonormalize","value":"pub fn orthonormalize(&mut DMatrix<f64>, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" The orthonormalize static method takes three argument:\n * `vectors` to diagonalize as columns of the matrix\n * `start` index of the column to start orthogonalizing\n * `end` last index of the column to diagonalize (non-inclusive)\n","sig":null,"attributes":[{"value":"/ The orthonormalize static method takes three argument:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/modified_gram_schmidt.rs","byte_start":21575,"byte_end":21633,"line_start":19,"line_end":19,"column_start":5,"column_end":63}},{"value":"/ * `vectors` to diagonalize as columns of the matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/modified_gram_schmidt.rs","byte_start":21638,"byte_end":21693,"line_start":20,"line_end":20,"column_start":5,"column_end":60}},{"value":"/ * `start` index of the column to start orthogonalizing","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/modified_gram_schmidt.rs","byte_start":21698,"byte_end":21756,"line_start":21,"line_end":21,"column_start":5,"column_end":63}},{"value":"/ * `end` last index of the column to diagonalize (non-inclusive)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/modified_gram_schmidt.rs","byte_start":21761,"byte_end":21828,"line_start":22,"line_end":22,"column_start":5,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":153},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::utils","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/utils.rs","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":159},{"krate":0,"index":162},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":169},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":181},{"krate":0,"index":185}],"decl_id":null,"docs":"## Auxiliar functions to manipulate arrays\n","sig":null,"attributes":[{"value":"*\n\n## Auxiliar functions to manipulate arrays\n\n */","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/utils.rs","byte_start":23068,"byte_end":23120,"line_start":1,"line_end":5,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":172},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/utils.rs","byte_start":23338,"byte_end":23364,"line_start":16,"line_end":16,"column_start":8,"column_end":34},"name":"generate_diagonal_dominant","qualname":"::utils::generate_diagonal_dominant","value":"pub fn generate_diagonal_dominant(usize, f64) -> DMatrix<f64>","parent":null,"children":[],"decl_id":null,"docs":" Generate a random highly diagonal symmetric matrix\n","sig":null,"attributes":[{"value":"/ Generate a random highly diagonal symmetric matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/utils.rs","byte_start":23276,"byte_end":23330,"line_start":15,"line_end":15,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":174},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/utils.rs","byte_start":23706,"byte_end":23731,"line_start":28,"line_end":28,"column_start":8,"column_end":33},"name":"generate_random_symmetric","qualname":"::utils::generate_random_symmetric","value":"pub fn generate_random_symmetric(usize, f64) -> DMatrix<f64>","parent":null,"children":[],"decl_id":null,"docs":" Random symmetric matrix\n","sig":null,"attributes":[{"value":"/ Random symmetric matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/utils.rs","byte_start":23671,"byte_end":23698,"line_start":27,"line_end":27,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":175},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/utils.rs","byte_start":23904,"byte_end":23936,"line_start":34,"line_end":34,"column_start":8,"column_end":40},"name":"generate_random_sparse_symmetric","qualname":"::utils::generate_random_sparse_symmetric","value":"pub fn generate_random_sparse_symmetric(usize, usize, f64) -> DMatrix<f64>","parent":null,"children":[],"decl_id":null,"docs":" Random Sparse matrix\n","sig":null,"attributes":[{"value":"/ Random Sparse matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/utils.rs","byte_start":23872,"byte_end":23896,"line_start":33,"line_end":33,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":177},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/utils.rs","byte_start":24328,"byte_end":24343,"line_start":47,"line_end":47,"column_start":8,"column_end":23},"name":"sort_eigenpairs","qualname":"::utils::sort_eigenpairs","value":"pub fn sort_eigenpairs(SymmetricEigen<f64, Dynamic>, bool)\n-> SymmetricEigen<f64, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Sort the eigenvalues and their corresponding eigenvectors in ascending order\n","sig":null,"attributes":[{"value":"/ Sort the eigenvalues and their corresponding eigenvectors in ascending order","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/utils.rs","byte_start":24240,"byte_end":24320,"line_start":46,"line_end":46,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":181},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/utils.rs","byte_start":25270,"byte_end":25281,"line_start":80,"line_end":80,"column_start":8,"column_end":19},"name":"sort_vector","qualname":"::utils::sort_vector","value":"pub fn sort_vector<T: PartialOrd>(&mut Vec<T>, bool)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":185},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/utils.rs","byte_start":25507,"byte_end":25522,"line_start":88,"line_end":88,"column_start":8,"column_end":23},"name":"test_eigenpairs","qualname":"::utils::test_eigenpairs","value":"pub fn test_eigenpairs(&na::linalg::SymmetricEigen<f64, na::Dynamic>,\n                       (na::DVector<f64>, na::DMatrix<f64>), usize)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":3588,"byte_end":3594,"line_start":41,"line_end":41,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":4996,"byte_end":5004,"line_start":87,"line_end":87,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":12420,"byte_end":12436,"line_start":275,"line_end":275,"column_start":13,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/lanczos.rs","byte_start":16676,"byte_end":16692,"line_start":21,"line_end":21,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":20637,"byte_end":20644,"line_start":31,"line_end":31,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/modified_gram_schmidt.rs","byte_start":21565,"byte_end":21568,"line_start":18,"line_end":18,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","byte_start":1803,"byte_end":1813,"line_start":56,"line_end":56,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/mod.rs","byte_start":2080,"byte_end":2088,"line_start":6,"line_end":6,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/mod.rs","byte_start":2098,"byte_end":2105,"line_start":7,"line_end":7,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":75}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","byte_start":1823,"byte_end":1840,"line_start":57,"line_end":57,"column_start":9,"column_end":26},"ref_id":{"krate":0,"index":104}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","byte_start":1850,"byte_end":1871,"line_start":58,"line_end":58,"column_start":9,"column_end":30},"ref_id":{"krate":0,"index":136}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/lib.rs","byte_start":1881,"byte_end":1886,"line_start":59,"line_end":59,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":153}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":3588,"byte_end":3594,"line_start":41,"line_end":41,"column_start":6,"column_end":12},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":37},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":4996,"byte_end":5004,"line_start":87,"line_end":87,"column_start":6,"column_end":14},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":48},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/davidson.rs","byte_start":12420,"byte_end":12436,"line_start":275,"line_end":275,"column_start":13,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":60},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/algorithms/lanczos.rs","byte_start":16676,"byte_end":16692,"line_start":21,"line_end":21,"column_start":6,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":96},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":20096,"byte_end":20101,"line_start":16,"line_end":16,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2474},"to":{"krate":0,"index":122}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/matrix_operations.rs","byte_start":20637,"byte_end":20644,"line_start":31,"line_end":31,"column_start":27,"column_end":34},"kind":{"Impl":{"id":4}},"from":{"krate":19,"index":1428},"to":{"krate":0,"index":122}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/eigenvalues-0.3.1/src/modified_gram_schmidt.rs","byte_start":21565,"byte_end":21568,"line_start":18,"line_end":18,"column_start":6,"column_end":9},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":148},"to":{"krate":4294967295,"index":4294967295}}]}