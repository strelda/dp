{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3","program":"/home/strelda/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","alga","--edition=2018","/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=a403c91386e16493","-C","extra-filename=-a403c91386e16493","--out-dir","/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps","-L","dependency=/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps","--extern","approx=/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps/libapprox-8166b3ebffa2b785.rmeta","--extern","num_complex=/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps/libnum_complex-b6580dc0ac868a73.rmeta","--extern","num_traits=/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps/libnum_traits-36945435b346d9c6.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/strelda/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps/libalga-a403c91386e16493.rmeta"},"prelude":{"crate_id":{"name":"alga","disambiguator":[3324915885725225395,1611465457281717452]},"crate_root":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src","external_crates":[{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15256637969148649584,12170509131058075833]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2572959971889902175,17506693968225989007]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7380289047210505863,13821127130725723065]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15494144285296940423,1517275930380298805]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16074686111301742862,11174094882134223101]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9848143689052418189,5596786287495938678]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4765876764407181064,11122159180720543906]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3249135693812064660,5763443684941168569]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17048817722375060837,16920886256309599893]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13552797903376776722,10482089333731059857]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5989449439605467183,7256304997069434828]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13279369789493161905,12463804053127379464]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[295047501211602818,3843164955111373824]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[14781020588812023641,7393321088923443539]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[1927264790928947756,6617054577979570835]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[7597657085106642381,11470551509849691989]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[2355022556203982070,155364045674250901]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[3046834347757213021,4625500188193743608]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":19,"id":{"name":"approx","disambiguator":[5818759019776068413,2572251874152357256]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","num":20,"id":{"name":"num_traits","disambiguator":[468258127332996008,10301193667755463888]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","num":21,"id":{"name":"num_complex","disambiguator":[17872560142149014032,10156406315603362374]}}],"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","byte_start":606,"byte_end":1054,"line_start":15,"line_end":37,"column_start":1,"column_end":16}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1830},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11158,"byte_end":11160,"line_start":159,"line_end":159,"column_start":26,"column_end":28},"alias_span":null,"name":"Id","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":503},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11162,"byte_end":11170,"line_start":159,"line_end":159,"column_start":30,"column_end":38},"alias_span":null,"name":"Identity","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":1941},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11203,"byte_end":11211,"line_start":161,"line_end":161,"column_start":5,"column_end":13},"alias_span":null,"name":"Additive","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":1942},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11203,"byte_end":11211,"line_start":161,"line_end":161,"column_start":5,"column_end":13},"alias_span":null,"name":"Additive","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":719},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11213,"byte_end":11222,"line_start":161,"line_end":161,"column_start":15,"column_end":24},"alias_span":null,"name":"ClosedAdd","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":725},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11224,"byte_end":11233,"line_start":161,"line_end":161,"column_start":26,"column_end":35},"alias_span":null,"name":"ClosedDiv","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":723},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11235,"byte_end":11244,"line_start":161,"line_end":161,"column_start":37,"column_end":46},"alias_span":null,"name":"ClosedMul","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":727},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11246,"byte_end":11255,"line_start":161,"line_end":161,"column_start":48,"column_end":57},"alias_span":null,"name":"ClosedNeg","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":721},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11257,"byte_end":11266,"line_start":161,"line_end":161,"column_start":59,"column_end":68},"alias_span":null,"name":"ClosedSub","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":1946},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11268,"byte_end":11282,"line_start":161,"line_end":161,"column_start":70,"column_end":84},"alias_span":null,"name":"Multiplicative","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":1947},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11268,"byte_end":11282,"line_start":161,"line_end":161,"column_start":70,"column_end":84},"alias_span":null,"name":"Multiplicative","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":696},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11284,"byte_end":11292,"line_start":161,"line_end":161,"column_start":86,"column_end":94},"alias_span":null,"name":"Operator","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":698},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11298,"byte_end":11313,"line_start":162,"line_end":162,"column_start":5,"column_end":20},"alias_span":null,"name":"TwoSidedInverse","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":870},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11341,"byte_end":11349,"line_start":164,"line_end":164,"column_start":24,"column_end":32},"alias_span":null,"name":"SubsetOf","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":876},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11351,"byte_end":11361,"line_start":164,"line_end":164,"column_start":34,"column_end":44},"alias_span":null,"name":"SupersetOf","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":290},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11388,"byte_end":11400,"line_start":166,"line_end":166,"column_start":24,"column_end":36},"alias_span":null,"name":"ComplexField","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":611},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11426,"byte_end":11441,"line_start":167,"line_end":167,"column_start":25,"column_end":40},"alias_span":null,"name":"JoinSemilattice","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":613},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11443,"byte_end":11450,"line_start":167,"line_end":167,"column_start":42,"column_end":49},"alias_span":null,"name":"Lattice","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":609},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11452,"byte_end":11467,"line_start":167,"line_end":167,"column_start":51,"column_end":66},"alias_span":null,"name":"MeetSemilattice","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":647},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11492,"byte_end":11506,"line_start":168,"line_end":168,"column_start":23,"column_end":37},"alias_span":null,"name":"AbstractModule","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":216},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11542,"byte_end":11555,"line_start":170,"line_end":170,"column_start":5,"column_end":18},"alias_span":null,"name":"AbstractGroup","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":219},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11557,"byte_end":11577,"line_start":170,"line_end":170,"column_start":20,"column_end":40},"alias_span":null,"name":"AbstractGroupAbelian","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":208},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11579,"byte_end":11591,"line_start":170,"line_end":170,"column_start":42,"column_end":54},"alias_span":null,"name":"AbstractLoop","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":194},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11593,"byte_end":11606,"line_start":170,"line_end":170,"column_start":56,"column_end":69},"alias_span":null,"name":"AbstractMagma","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":211},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11608,"byte_end":11622,"line_start":170,"line_end":170,"column_start":71,"column_end":85},"alias_span":null,"name":"AbstractMonoid","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":198},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11628,"byte_end":11646,"line_start":171,"line_end":171,"column_start":5,"column_end":23},"alias_span":null,"name":"AbstractQuasigroup","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":203},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11648,"byte_end":11665,"line_start":171,"line_end":171,"column_start":25,"column_end":42},"alias_span":null,"name":"AbstractSemigroup","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":771},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11690,"byte_end":11699,"line_start":173,"line_end":173,"column_start":21,"column_end":30},"alias_span":null,"name":"RealField","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2029},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11734,"byte_end":11747,"line_start":175,"line_end":175,"column_start":5,"column_end":18},"alias_span":null,"name":"AdditiveGroup","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2032},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11749,"byte_end":11769,"line_start":175,"line_end":175,"column_start":20,"column_end":40},"alias_span":null,"name":"AdditiveGroupAbelian","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2020},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11771,"byte_end":11783,"line_start":175,"line_end":175,"column_start":42,"column_end":54},"alias_span":null,"name":"AdditiveLoop","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2014},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11785,"byte_end":11798,"line_start":175,"line_end":175,"column_start":56,"column_end":69},"alias_span":null,"name":"AdditiveMagma","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2026},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11800,"byte_end":11814,"line_start":175,"line_end":175,"column_start":71,"column_end":85},"alias_span":null,"name":"AdditiveMonoid","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2017},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11820,"byte_end":11838,"line_start":176,"line_end":176,"column_start":5,"column_end":23},"alias_span":null,"name":"AdditiveQuasigroup","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2023},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11840,"byte_end":11857,"line_start":176,"line_end":176,"column_start":25,"column_end":42},"alias_span":null,"name":"AdditiveSemigroup","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2062},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11859,"byte_end":11864,"line_start":176,"line_end":176,"column_start":44,"column_end":49},"alias_span":null,"name":"Field","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":857},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11866,"byte_end":11872,"line_start":176,"line_end":176,"column_start":51,"column_end":57},"alias_span":null,"name":"Module","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2050},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11874,"byte_end":11893,"line_start":176,"line_end":176,"column_start":59,"column_end":78},"alias_span":null,"name":"MultiplicativeGroup","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2053},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11899,"byte_end":11925,"line_start":177,"line_end":177,"column_start":5,"column_end":31},"alias_span":null,"name":"MultiplicativeGroupAbelian","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2041},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11927,"byte_end":11945,"line_start":177,"line_end":177,"column_start":33,"column_end":51},"alias_span":null,"name":"MultiplicativeLoop","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2035},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11947,"byte_end":11966,"line_start":177,"line_end":177,"column_start":53,"column_end":72},"alias_span":null,"name":"MultiplicativeMagma","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2047},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11968,"byte_end":11988,"line_start":177,"line_end":177,"column_start":74,"column_end":94},"alias_span":null,"name":"MultiplicativeMonoid","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2038},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11994,"byte_end":12018,"line_start":178,"line_end":178,"column_start":5,"column_end":29},"alias_span":null,"name":"MultiplicativeQuasigroup","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2044},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":12020,"byte_end":12043,"line_start":178,"line_end":178,"column_start":31,"column_end":54},"alias_span":null,"name":"MultiplicativeSemigroup","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2056},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":12045,"byte_end":12049,"line_start":178,"line_end":178,"column_start":56,"column_end":60},"alias_span":null,"name":"Ring","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2059},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":12051,"byte_end":12066,"line_start":178,"line_end":178,"column_start":62,"column_end":77},"alias_span":null,"name":"RingCommutative","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":951},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":12101,"byte_end":12114,"line_start":180,"line_end":180,"column_start":31,"column_end":44},"alias_span":null,"name":"AbstractField","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":929},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":12116,"byte_end":12128,"line_start":180,"line_end":180,"column_start":46,"column_end":58},"alias_span":null,"name":"AbstractRing","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":941},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":12130,"byte_end":12153,"line_start":180,"line_end":180,"column_start":60,"column_end":83},"alias_span":null,"name":"AbstractRingCommutative","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":1315},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96013,"byte_end":96035,"line_start":3,"line_end":3,"column_start":24,"column_end":46},"alias_span":null,"name":"InversibleSquareMatrix","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1285},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96037,"byte_end":96043,"line_start":3,"line_end":3,"column_start":48,"column_end":54},"alias_span":null,"name":"Matrix","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1297},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96045,"byte_end":96054,"line_start":3,"line_end":3,"column_start":56,"column_end":65},"alias_span":null,"name":"MatrixMut","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1304},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96056,"byte_end":96068,"line_start":3,"line_end":3,"column_start":67,"column_end":79},"alias_span":null,"name":"SquareMatrix","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1311},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96070,"byte_end":96085,"line_start":3,"line_end":3,"column_start":81,"column_end":96},"alias_span":null,"name":"SquareMatrixMut","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1363},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96124,"byte_end":96144,"line_start":5,"line_end":5,"column_start":5,"column_end":25},"alias_span":null,"name":"AffineTransformation","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1394},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96146,"byte_end":96160,"line_start":5,"line_end":5,"column_start":27,"column_end":41},"alias_span":null,"name":"DirectIsometry","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1392},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96162,"byte_end":96170,"line_start":5,"line_end":5,"column_start":43,"column_end":51},"alias_span":null,"name":"Isometry","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1396},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96172,"byte_end":96196,"line_start":5,"line_end":5,"column_start":53,"column_end":77},"alias_span":null,"name":"OrthogonalTransformation","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1359},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96202,"byte_end":96226,"line_start":6,"line_end":6,"column_start":5,"column_end":29},"alias_span":null,"name":"ProjectiveTransformation","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1410},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96228,"byte_end":96236,"line_start":6,"line_end":6,"column_start":31,"column_end":39},"alias_span":null,"name":"Rotation","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1398},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96238,"byte_end":96245,"line_start":6,"line_end":6,"column_start":41,"column_end":48},"alias_span":null,"name":"Scaling","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1376},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96247,"byte_end":96257,"line_start":6,"line_end":6,"column_start":50,"column_end":60},"alias_span":null,"name":"Similarity","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1355},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96259,"byte_end":96273,"line_start":6,"line_end":6,"column_start":62,"column_end":76},"alias_span":null,"name":"Transformation","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1404},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96275,"byte_end":96286,"line_start":6,"line_end":6,"column_start":78,"column_end":89},"alias_span":null,"name":"Translation","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1541},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96319,"byte_end":96330,"line_start":9,"line_end":9,"column_start":5,"column_end":16},"alias_span":null,"name":"AffineSpace","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1545},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96332,"byte_end":96346,"line_start":9,"line_end":9,"column_start":18,"column_end":32},"alias_span":null,"name":"EuclideanSpace","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1537},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96348,"byte_end":96367,"line_start":9,"line_end":9,"column_start":34,"column_end":53},"alias_span":null,"name":"FiniteDimInnerSpace","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1529},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96369,"byte_end":96389,"line_start":9,"line_end":9,"column_start":55,"column_end":75},"alias_span":null,"name":"FiniteDimVectorSpace","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1526},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96391,"byte_end":96401,"line_start":9,"line_end":9,"column_start":77,"column_end":87},"alias_span":null,"name":"InnerSpace","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1517},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96407,"byte_end":96418,"line_start":10,"line_end":10,"column_start":5,"column_end":16},"alias_span":null,"name":"NormedSpace","value":"","parent":{"krate":0,"index":1107}},{"kind":"Use","ref_id":{"krate":0,"index":1515},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":96420,"byte_end":96431,"line_start":10,"line_end":10,"column_start":18,"column_end":29},"alias_span":null,"name":"VectorSpace","value":"","parent":{"krate":0,"index":1107}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","byte_start":606,"byte_end":1054,"line_start":15,"line_end":37,"column_start":1,"column_end":16},"name":"","qualname":"::","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":9},{"krate":0,"index":1107}],"decl_id":null,"docs":" Traits for algebra.\n","sig":null,"attributes":[{"value":"/ Traits for algebra.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","byte_start":606,"byte_end":629,"line_start":15,"line_end":15,"column_start":1,"column_end":24}},{"value":"deny(non_camel_case_types)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","byte_start":631,"byte_end":661,"line_start":17,"line_end":17,"column_start":1,"column_end":31}},{"value":"deny(unused_parens)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","byte_start":662,"byte_end":685,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"deny(non_upper_case_globals)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","byte_start":686,"byte_end":718,"line_start":19,"line_end":19,"column_start":1,"column_end":33}},{"value":"deny(unused_results)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","byte_start":719,"byte_end":743,"line_start":20,"line_end":20,"column_start":1,"column_end":25}},{"value":"deny(missing_docs)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","byte_start":744,"byte_end":766,"line_start":21,"line_end":21,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":9},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"general","qualname":"::general","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":231},{"krate":0,"index":401},{"krate":0,"index":601},{"krate":0,"index":630},{"krate":0,"index":658},{"krate":0,"index":742},{"krate":0,"index":793},{"krate":0,"index":863},{"krate":0,"index":897},{"krate":0,"index":961},{"krate":0,"index":1104},{"krate":0,"index":1105}],"decl_id":null,"docs":" Fundamental algebraic structures.","sig":null,"attributes":[{"value":"/ Fundamental algebraic structures.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":6327,"byte_end":6364,"line_start":15,"line_end":15,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":6365,"byte_end":6368,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ For most applications requiring an abstraction over the reals, `RealField`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":6369,"byte_end":6447,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ should be sufficient.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":6448,"byte_end":6473,"line_start":18,"line_end":18,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":6474,"byte_end":6477,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ## Algebraic properties","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":6478,"byte_end":6505,"line_start":20,"line_end":20,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":6506,"byte_end":6509,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The goal of algebraic structures is to allow elements of sets to be combined together using one","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":6510,"byte_end":6609,"line_start":22,"line_end":22,"column_start":1,"column_end":100}},{"value":"/ or several operators. The number and properties of those operators characterize the algebraic","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":6610,"byte_end":6707,"line_start":23,"line_end":23,"column_start":1,"column_end":98}},{"value":"/ structure. Abstract operators are usually noted `∘`, `+`, or `×`. The last two are preferred","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":6708,"byte_end":6807,"line_start":24,"line_end":24,"column_start":1,"column_end":97}},{"value":"/ when their behavior conform with the usual meaning of addition and multiplication of reals.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":6808,"byte_end":6903,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"/ Let `Self` be a set. Here is a list of the most common properties those operator may fulfill:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":6904,"byte_end":7001,"line_start":26,"line_end":26,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7002,"byte_end":7005,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ ~~~notrust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7006,"byte_end":7020,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/ (Closure)       a, b ∈ Self ⇒ a ∘ b ∈ Self,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7021,"byte_end":7076,"line_start":29,"line_end":29,"column_start":1,"column_end":48}},{"value":"/ (Divisibility)  ∀ a, b ∈ Self, ∃! r, l ∈ Self such that l ∘ a = b and a ∘ r = b","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7077,"byte_end":7172,"line_start":30,"line_end":30,"column_start":1,"column_end":84}},{"value":"/ (Invertibility) ∃ e ∈ Self, ∀ a ∈ Self, ∃ r, l ∈ Self such that l ∘ a = a ∘ r = e","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7173,"byte_end":7274,"line_start":31,"line_end":31,"column_start":1,"column_end":86}},{"value":"/                 If the right and left inverse are equal they are usually noted r = l = a⁻¹.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7275,"byte_end":7373,"line_start":32,"line_end":32,"column_start":1,"column_end":96}},{"value":"/ (Associativity) ∀ a, b, c ∈ Self, (a ∘ b) ∘ c = a ∘ (b ∘ c)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7374,"byte_end":7449,"line_start":33,"line_end":33,"column_start":1,"column_end":64}},{"value":"/ (Neutral Elt.)  ∃ e ∈ Self, ∀ a ∈ Self, e ∘ a = a ∘ e = a","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7450,"byte_end":7523,"line_start":34,"line_end":34,"column_start":1,"column_end":62}},{"value":"/ (Commutativity) ∀ a, b ∈ Self, a ∘ b = b ∘ a","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7524,"byte_end":7580,"line_start":35,"line_end":35,"column_start":1,"column_end":49}},{"value":"/ ~~~","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7581,"byte_end":7588,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7589,"byte_end":7592,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ## Identity elements","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7593,"byte_end":7617,"line_start":38,"line_end":38,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7618,"byte_end":7621,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Two traits are provided that allow the definition of the additive and","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7622,"byte_end":7695,"line_start":40,"line_end":40,"column_start":1,"column_end":74}},{"value":"/ multiplicative identity elements:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7696,"byte_end":7733,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7734,"byte_end":7737,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ - `IdentityAdditive`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7738,"byte_end":7762,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/ - `IdentityMultiplicative`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7763,"byte_end":7793,"line_start":44,"line_end":44,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7794,"byte_end":7797,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ## AbstractGroup-like structures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7798,"byte_end":7834,"line_start":46,"line_end":46,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7835,"byte_end":7838,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ These structures are provided for both the addition and multiplication.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7839,"byte_end":7914,"line_start":48,"line_end":48,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7915,"byte_end":7918,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ These can be derived automatically by `alga_traits` attribute from `alga_derive` crate.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":7919,"byte_end":8010,"line_start":50,"line_end":50,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8011,"byte_end":8014,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ~~~notrust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8015,"byte_end":8029,"line_start":52,"line_end":52,"column_start":1,"column_end":15}},{"value":"/            AbstractMagma","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8030,"byte_end":8058,"line_start":53,"line_end":53,"column_start":1,"column_end":29}},{"value":"/                 |","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8059,"byte_end":8080,"line_start":54,"line_end":54,"column_start":1,"column_end":22}},{"value":"/         _______/ \\______","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8081,"byte_end":8109,"line_start":55,"line_end":55,"column_start":1,"column_end":29}},{"value":"/        /                \\","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8110,"byte_end":8139,"line_start":56,"line_end":56,"column_start":1,"column_end":30}},{"value":"/  divisibility       associativity","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8140,"byte_end":8177,"line_start":57,"line_end":57,"column_start":1,"column_end":38}},{"value":"/       |                  |","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8178,"byte_end":8208,"line_start":58,"line_end":58,"column_start":1,"column_end":31}},{"value":"/       V                  V","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8209,"byte_end":8239,"line_start":59,"line_end":59,"column_start":1,"column_end":31}},{"value":"/ AbstractQuasigroup AbstractSemigroup","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8240,"byte_end":8280,"line_start":60,"line_end":60,"column_start":1,"column_end":41}},{"value":"/       |                  |","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8281,"byte_end":8311,"line_start":61,"line_end":61,"column_start":1,"column_end":31}},{"value":"/   identity            identity","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8312,"byte_end":8346,"line_start":62,"line_end":62,"column_start":1,"column_end":35}},{"value":"/       |                  |","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8347,"byte_end":8377,"line_start":63,"line_end":63,"column_start":1,"column_end":31}},{"value":"/       V                  V","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8378,"byte_end":8408,"line_start":64,"line_end":64,"column_start":1,"column_end":31}},{"value":"/  AbstractLoop       AbstractMonoid","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8409,"byte_end":8447,"line_start":65,"line_end":65,"column_start":1,"column_end":39}},{"value":"/       |                  |","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8448,"byte_end":8478,"line_start":66,"line_end":66,"column_start":1,"column_end":31}},{"value":"/  associativity     invertibility","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8479,"byte_end":8515,"line_start":67,"line_end":67,"column_start":1,"column_end":37}},{"value":"/        \\______   _______/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8516,"byte_end":8545,"line_start":68,"line_end":68,"column_start":1,"column_end":30}},{"value":"/               \\ /","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8546,"byte_end":8567,"line_start":69,"line_end":69,"column_start":1,"column_end":22}},{"value":"/                |","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8568,"byte_end":8588,"line_start":70,"line_end":70,"column_start":1,"column_end":21}},{"value":"/                V","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8589,"byte_end":8609,"line_start":71,"line_end":71,"column_start":1,"column_end":21}},{"value":"/          AbstractGroup","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8610,"byte_end":8636,"line_start":72,"line_end":72,"column_start":1,"column_end":27}},{"value":"/                |","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8637,"byte_end":8657,"line_start":73,"line_end":73,"column_start":1,"column_end":21}},{"value":"/          commutativity","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8658,"byte_end":8684,"line_start":74,"line_end":74,"column_start":1,"column_end":27}},{"value":"/                |","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8685,"byte_end":8705,"line_start":75,"line_end":75,"column_start":1,"column_end":21}},{"value":"/                V","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8706,"byte_end":8726,"line_start":76,"line_end":76,"column_start":1,"column_end":21}},{"value":"/      AbstractGroupAbelian","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8727,"byte_end":8756,"line_start":77,"line_end":77,"column_start":1,"column_end":30}},{"value":"/ ~~~","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8757,"byte_end":8764,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8765,"byte_end":8768,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ The following traits are provided:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8769,"byte_end":8807,"line_start":80,"line_end":80,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8808,"byte_end":8811,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ - (`Abstract`|`Additive`|`Multiplicative`)`Magma`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8812,"byte_end":8865,"line_start":82,"line_end":82,"column_start":1,"column_end":54}},{"value":"/ - (`Abstract`|`Additive`|`Multiplicative`)`Quasigroup`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8866,"byte_end":8924,"line_start":83,"line_end":83,"column_start":1,"column_end":59}},{"value":"/ - (`Abstract`|`Additive`|`Multiplicative`)`Loop`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8925,"byte_end":8977,"line_start":84,"line_end":84,"column_start":1,"column_end":53}},{"value":"/ - (`Abstract`|`Additive`|`Multiplicative`)`Semigroup`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":8978,"byte_end":9035,"line_start":85,"line_end":85,"column_start":1,"column_end":58}},{"value":"/ - (`Abstract`|`Additive`|`Multiplicative`)`Monoid`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9036,"byte_end":9090,"line_start":86,"line_end":86,"column_start":1,"column_end":55}},{"value":"/ - (`Abstract`|`Additive`|`Multiplicative`)`Group`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9091,"byte_end":9144,"line_start":87,"line_end":87,"column_start":1,"column_end":54}},{"value":"/ - (`Abstract`|`Additive`|`Multiplicative`)`GroupAbelian`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9145,"byte_end":9205,"line_start":88,"line_end":88,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9206,"byte_end":9209,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ ## Ring-like structures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9210,"byte_end":9237,"line_start":90,"line_end":90,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9238,"byte_end":9241,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ These can be derived automatically by `alga_traits` attribute from `alga_derive` crate.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9242,"byte_end":9333,"line_start":92,"line_end":92,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9334,"byte_end":9337,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ ~~~notrust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9338,"byte_end":9352,"line_start":94,"line_end":94,"column_start":1,"column_end":15}},{"value":"/      GroupAbelian           Monoid","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9353,"byte_end":9391,"line_start":95,"line_end":95,"column_start":1,"column_end":39}},{"value":"/           \\________   ________/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9392,"byte_end":9427,"line_start":96,"line_end":96,"column_start":1,"column_end":36}},{"value":"/                    \\ /","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9428,"byte_end":9454,"line_start":97,"line_end":97,"column_start":1,"column_end":27}},{"value":"/                     |","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9455,"byte_end":9480,"line_start":98,"line_end":98,"column_start":1,"column_end":26}},{"value":"/                     V","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9481,"byte_end":9506,"line_start":99,"line_end":99,"column_start":1,"column_end":26}},{"value":"/                    Ring","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9507,"byte_end":9534,"line_start":100,"line_end":100,"column_start":1,"column_end":28}},{"value":"/                     |","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9535,"byte_end":9560,"line_start":101,"line_end":101,"column_start":1,"column_end":26}},{"value":"/            commutativity_of_mul","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9561,"byte_end":9596,"line_start":102,"line_end":102,"column_start":1,"column_end":36}},{"value":"/                     |","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9597,"byte_end":9622,"line_start":103,"line_end":103,"column_start":1,"column_end":26}},{"value":"/                     V","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9623,"byte_end":9648,"line_start":104,"line_end":104,"column_start":1,"column_end":26}},{"value":"/              RingCommutative           GroupAbelian","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9649,"byte_end":9704,"line_start":105,"line_end":105,"column_start":1,"column_end":56}},{"value":"/                      \\_______   ___________/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9705,"byte_end":9753,"line_start":106,"line_end":106,"column_start":1,"column_end":49}},{"value":"/                              \\ /","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9754,"byte_end":9790,"line_start":107,"line_end":107,"column_start":1,"column_end":37}},{"value":"/                               |","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9791,"byte_end":9826,"line_start":108,"line_end":108,"column_start":1,"column_end":36}},{"value":"/                               V","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9827,"byte_end":9862,"line_start":109,"line_end":109,"column_start":1,"column_end":36}},{"value":"/                             Field","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9863,"byte_end":9900,"line_start":110,"line_end":110,"column_start":1,"column_end":38}},{"value":"/ ~~~","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9901,"byte_end":9908,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9909,"byte_end":9912,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ The following traits are provided:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9913,"byte_end":9951,"line_start":113,"line_end":113,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9952,"byte_end":9955,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ - `Ring`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9956,"byte_end":9968,"line_start":115,"line_end":115,"column_start":1,"column_end":13}},{"value":"/ - `RingCommutative`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9969,"byte_end":9992,"line_start":116,"line_end":116,"column_start":1,"column_end":24}},{"value":"/ - `Field`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":9993,"byte_end":10006,"line_start":117,"line_end":117,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10007,"byte_end":10010,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ ## Module-like structures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10011,"byte_end":10040,"line_start":119,"line_end":119,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10041,"byte_end":10044,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ ~~~notrust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10045,"byte_end":10059,"line_start":121,"line_end":121,"column_start":1,"column_end":15}},{"value":"/     GroupAbelian         RingCommutative","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10060,"byte_end":10104,"line_start":122,"line_end":122,"column_start":1,"column_end":45}},{"value":"/           \\______         _____/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10105,"byte_end":10141,"line_start":123,"line_end":123,"column_start":1,"column_end":37}},{"value":"/                  \\       /","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10142,"byte_end":10172,"line_start":124,"line_end":124,"column_start":1,"column_end":31}},{"value":"/                   |     |","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10173,"byte_end":10202,"line_start":125,"line_end":125,"column_start":1,"column_end":30}},{"value":"/                   V     V","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10203,"byte_end":10232,"line_start":126,"line_end":126,"column_start":1,"column_end":30}},{"value":"/                Module<Scalar>          Field","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10233,"byte_end":10281,"line_start":127,"line_end":127,"column_start":1,"column_end":49}},{"value":"/                    \\______         _____/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10282,"byte_end":10327,"line_start":128,"line_end":128,"column_start":1,"column_end":46}},{"value":"/                           \\       /","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10328,"byte_end":10367,"line_start":129,"line_end":129,"column_start":1,"column_end":40}},{"value":"/                            |     |","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10368,"byte_end":10406,"line_start":130,"line_end":130,"column_start":1,"column_end":39}},{"value":"/                            V     V","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10407,"byte_end":10445,"line_start":131,"line_end":131,"column_start":1,"column_end":39}},{"value":"/                      VectorSpace<Scalar>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10446,"byte_end":10490,"line_start":132,"line_end":132,"column_start":1,"column_end":45}},{"value":"/ ~~~","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10491,"byte_end":10498,"line_start":133,"line_end":133,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10499,"byte_end":10502,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ The following traits are provided:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10503,"byte_end":10541,"line_start":135,"line_end":135,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10542,"byte_end":10545,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ - `Module`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10546,"byte_end":10560,"line_start":137,"line_end":137,"column_start":1,"column_end":15}},{"value":"/ - `VectorSpace`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10561,"byte_end":10580,"line_start":138,"line_end":138,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10581,"byte_end":10584,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ # Quickcheck properties","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10585,"byte_end":10612,"line_start":140,"line_end":140,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10613,"byte_end":10616,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ Functions are provided to test that algebraic properties like","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10617,"byte_end":10682,"line_start":142,"line_end":142,"column_start":1,"column_end":66}},{"value":"/ associativity and commutativity hold for a given set of arguments.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10683,"byte_end":10753,"line_start":143,"line_end":143,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10754,"byte_end":10757,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ These tests can be automatically derived by `alga_quickcheck` attribute from `alga_derive` crate.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10758,"byte_end":10859,"line_start":145,"line_end":145,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10860,"byte_end":10863,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ For example:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10864,"byte_end":10880,"line_start":147,"line_end":147,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10881,"byte_end":10884,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ ~~~.ignore","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10885,"byte_end":10899,"line_start":149,"line_end":149,"column_start":1,"column_end":15}},{"value":"/ use algebra::general::SemigroupMultiplicative;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10900,"byte_end":10950,"line_start":150,"line_end":150,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10951,"byte_end":10954,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ quickcheck! {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10955,"byte_end":10972,"line_start":152,"line_end":152,"column_start":1,"column_end":18}},{"value":"/     fn prop_mul_is_associative(args: (i32, i32, i32)) -> bool {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":10973,"byte_end":11040,"line_start":153,"line_end":153,"column_start":1,"column_end":68}},{"value":"/         SemigroupMultiplicative::prop_mul_is_associative(args)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11041,"byte_end":11107,"line_start":154,"line_end":154,"column_start":1,"column_end":67}},{"value":"/     }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11108,"byte_end":11117,"line_start":155,"line_end":155,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11118,"byte_end":11123,"line_start":156,"line_end":156,"column_start":1,"column_end":6}},{"value":"/ ~~~","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":11124,"byte_end":11131,"line_start":157,"line_end":157,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":194},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13003,"byte_end":13016,"line_start":19,"line_end":19,"column_start":11,"column_end":24},"name":"AbstractMagma","qualname":"::general::one_operator::AbstractMagma","value":"AbstractMagma<O: Operator>: Sized + Clone","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197}],"decl_id":null,"docs":" A magma is an algebraic structure which consists of a set equipped with a binary operation, ∘,\n which must be closed.","sig":null,"attributes":[{"value":"/ A magma is an algebraic structure which consists of a set equipped with a binary operation, ∘,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":12766,"byte_end":12866,"line_start":11,"line_end":11,"column_start":1,"column_end":99}},{"value":"/ which must be closed.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":12867,"byte_end":12892,"line_start":12,"line_end":12,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":12893,"byte_end":12896,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Closed binary operation","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":12897,"byte_end":12926,"line_start":14,"line_end":14,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":12927,"byte_end":12930,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ~~~notrust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":12931,"byte_end":12945,"line_start":16,"line_end":16,"column_start":1,"column_end":15}},{"value":"/ a, b ∈ Self ⇒ a ∘ b ∈ Self","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":12946,"byte_end":12984,"line_start":17,"line_end":17,"column_start":1,"column_end":31}},{"value":"/ ~~~","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":12985,"byte_end":12992,"line_start":18,"line_end":18,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13085,"byte_end":13092,"line_start":21,"line_end":21,"column_start":8,"column_end":15},"name":"operate","qualname":"::general::one_operator::AbstractMagma::operate","value":"pub fn operate(&Self, &Self) -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Performs an operation.\n","sig":null,"attributes":[{"value":"/ Performs an operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13051,"byte_end":13077,"line_start":20,"line_end":20,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13182,"byte_end":13184,"line_start":25,"line_end":25,"column_start":8,"column_end":10},"name":"op","qualname":"::general::one_operator::AbstractMagma::op","value":"pub fn op(&Self, O, &Self) -> Self","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Performs specific operation.\n","sig":null,"attributes":[{"value":"/ Performs specific operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13128,"byte_end":13160,"line_start":23,"line_end":23,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13165,"byte_end":13174,"line_start":24,"line_end":24,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":198},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13858,"byte_end":13876,"line_start":48,"line_end":48,"column_start":11,"column_end":29},"name":"AbstractQuasigroup","qualname":"::general::one_operator::AbstractQuasigroup","value":"AbstractQuasigroup<O: Operator>: PartialEq + AbstractMagma<O> + TwoSidedInverse<O>","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201}],"decl_id":null,"docs":" A quasigroup is a magma which that has the **divisibility property** (or Latin square property).\n *A set with a closed binary operation with the divisibility property.*","sig":null,"attributes":[{"value":"/ A quasigroup is a magma which that has the **divisibility property** (or Latin square property).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13255,"byte_end":13355,"line_start":30,"line_end":30,"column_start":1,"column_end":101}},{"value":"/ *A set with a closed binary operation with the divisibility property.*","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13356,"byte_end":13430,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13431,"byte_end":13434,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Divisibility is a weak form of right and left invertibility.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13435,"byte_end":13499,"line_start":33,"line_end":33,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13500,"byte_end":13503,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Divisibility or Latin square property","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13504,"byte_end":13547,"line_start":35,"line_end":35,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13548,"byte_end":13551,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ ```notrust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13552,"byte_end":13566,"line_start":37,"line_end":37,"column_start":1,"column_end":15}},{"value":"/ ∀ a, b ∈ Self, ∃! r, l ∈ Self such that l ∘ a = b and a ∘ r = b","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13567,"byte_end":13646,"line_start":38,"line_end":38,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13647,"byte_end":13654,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13655,"byte_end":13658,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ The solution to these equations can be written as","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13659,"byte_end":13712,"line_start":41,"line_end":41,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13713,"byte_end":13716,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```notrust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13717,"byte_end":13731,"line_start":43,"line_end":43,"column_start":1,"column_end":15}},{"value":"/ r = a \\ b and l = b / a","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13732,"byte_end":13759,"line_start":44,"line_end":44,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13760,"byte_end":13767,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13768,"byte_end":13771,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ where \"\\\" and \"/\" are respectively the **left** and **right** division.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13772,"byte_end":13847,"line_start":47,"line_end":47,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":14168,"byte_end":14199,"line_start":57,"line_end":57,"column_start":8,"column_end":39},"name":"prop_inv_is_latin_square_approx","qualname":"::general::one_operator::AbstractQuasigroup::prop_inv_is_latin_square_approx","value":"pub fn prop_inv_is_latin_square_approx((Self, Self)) -> bool where\nSelf: RelativeEq","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns `true` if latin squareness holds for the given arguments. Approximate\n equality is used for verifications.","sig":null,"attributes":[{"value":"/ Returns `true` if latin squareness holds for the given arguments. Approximate","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13951,"byte_end":14032,"line_start":51,"line_end":51,"column_start":5,"column_end":86}},{"value":"/ equality is used for verifications.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":14037,"byte_end":14076,"line_start":52,"line_end":52,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":14081,"byte_end":14084,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":14089,"byte_end":14103,"line_start":54,"line_end":54,"column_start":5,"column_end":19}},{"value":"/ a ~= a / b ∘ b && a ~= a ∘ b / b","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":14108,"byte_end":14148,"line_start":55,"line_end":55,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":14153,"byte_end":14160,"line_start":56,"line_end":56,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":14648,"byte_end":14672,"line_start":73,"line_end":73,"column_start":8,"column_end":32},"name":"prop_inv_is_latin_square","qualname":"::general::one_operator::AbstractQuasigroup::prop_inv_is_latin_square","value":"pub fn prop_inv_is_latin_square((Self, Self)) -> bool where Self: Eq","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns `true` if latin squareness holds for the given arguments.","sig":null,"attributes":[{"value":"/ Returns `true` if latin squareness holds for the given arguments.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":14491,"byte_end":14560,"line_start":68,"line_end":68,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":14565,"byte_end":14568,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":14573,"byte_end":14587,"line_start":70,"line_end":70,"column_start":5,"column_end":19}},{"value":"/ a == a / b * b && a == a * b / b","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":14592,"byte_end":14628,"line_start":71,"line_end":71,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":14633,"byte_end":14640,"line_start":72,"line_end":72,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":203},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":16157,"byte_end":16174,"line_start":125,"line_end":125,"column_start":11,"column_end":28},"name":"AbstractSemigroup","qualname":"::general::one_operator::AbstractSemigroup","value":"AbstractSemigroup<O: Operator>: PartialEq + AbstractMagma<O>","parent":null,"children":[{"krate":0,"index":205},{"krate":0,"index":206}],"decl_id":null,"docs":" A semigroup is a quasigroup that is **associative**.","sig":null,"attributes":[{"value":"/ A semigroup is a quasigroup that is **associative**.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":15856,"byte_end":15912,"line_start":116,"line_end":116,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":15913,"byte_end":15916,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ *A semigroup is a set equipped with a closed associative binary operation and that has the divisibility property.*","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":15917,"byte_end":16035,"line_start":118,"line_end":118,"column_start":1,"column_end":119}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":16036,"byte_end":16039,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ # Associativity","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":16040,"byte_end":16059,"line_start":120,"line_end":120,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":16060,"byte_end":16063,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ ~~~notrust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":16064,"byte_end":16078,"line_start":122,"line_end":122,"column_start":1,"column_end":15}},{"value":"/ ∀ a, b, c ∈ Self, (a ∘ b) ∘ c = a ∘ (b ∘ c)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":16079,"byte_end":16138,"line_start":123,"line_end":123,"column_start":1,"column_end":48}},{"value":"/ ~~~","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":16139,"byte_end":16146,"line_start":124,"line_end":124,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":16354,"byte_end":16380,"line_start":128,"line_end":128,"column_start":8,"column_end":34},"name":"prop_is_associative_approx","qualname":"::general::one_operator::AbstractSemigroup::prop_is_associative_approx","value":"pub fn prop_is_associative_approx((Self, Self, Self)) -> bool where\nSelf: RelativeEq","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" Returns `true` if associativity holds for the given arguments. Approximate equality is used\n for verifications.\n","sig":null,"attributes":[{"value":"/ Returns `true` if associativity holds for the given arguments. Approximate equality is used","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":16224,"byte_end":16319,"line_start":126,"line_end":126,"column_start":5,"column_end":100}},{"value":"/ for verifications.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":16324,"byte_end":16346,"line_start":127,"line_end":127,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":16647,"byte_end":16666,"line_start":137,"line_end":137,"column_start":8,"column_end":27},"name":"prop_is_associative","qualname":"::general::one_operator::AbstractSemigroup::prop_is_associative","value":"pub fn prop_is_associative((Self, Self, Self)) -> bool where Self: Eq","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" Returns `true` if associativity holds for the given arguments.\n","sig":null,"attributes":[{"value":"/ Returns `true` if associativity holds for the given arguments.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":16573,"byte_end":16639,"line_start":136,"line_end":136,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":208},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":18103,"byte_end":18115,"line_start":189,"line_end":189,"column_start":11,"column_end":23},"name":"AbstractLoop","qualname":"::general::one_operator::AbstractLoop","value":"AbstractLoop<O: Operator>: AbstractQuasigroup<O> + Identity<O>","parent":null,"children":[],"decl_id":null,"docs":" A loop is a quasigroup with an unique **identity element**, e.","sig":null,"attributes":[{"value":"/ A loop is a quasigroup with an unique **identity element**, e.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":17544,"byte_end":17610,"line_start":171,"line_end":171,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":17611,"byte_end":17614,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ *A set equipped with a closed binary operation possessing the divisibility property","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":17615,"byte_end":17702,"line_start":173,"line_end":173,"column_start":1,"column_end":88}},{"value":"/ and a unique identity element.*","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":17703,"byte_end":17738,"line_start":174,"line_end":174,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":17739,"byte_end":17742,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ # Identity element","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":17743,"byte_end":17765,"line_start":176,"line_end":176,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":17766,"byte_end":17769,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ ~~~notrust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":17770,"byte_end":17784,"line_start":178,"line_end":178,"column_start":1,"column_end":15}},{"value":"/ ∃! e ∈ Self, ∀ a ∈ Self, ∃ r, l ∈ Self such that l ∘ a = a ∘ r = e.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":17785,"byte_end":17872,"line_start":179,"line_end":179,"column_start":1,"column_end":72}},{"value":"/ ~~~","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":17873,"byte_end":17880,"line_start":180,"line_end":180,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":17881,"byte_end":17884,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ The left inverse `r` and right inverse `l` are not required to be equal.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":17885,"byte_end":17961,"line_start":182,"line_end":182,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":17962,"byte_end":17965,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ This property follows from","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":17966,"byte_end":17996,"line_start":184,"line_end":184,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":17997,"byte_end":18000,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ ~~~notrust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":18001,"byte_end":18015,"line_start":186,"line_end":186,"column_start":1,"column_end":15}},{"value":"/ ∀ a ∈ Self, ∃ e ∈ Self, such that e ∘ a = a ∘ e = a.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":18016,"byte_end":18084,"line_start":187,"line_end":187,"column_start":1,"column_end":57}},{"value":"/ ~~~","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":18085,"byte_end":18092,"line_start":188,"line_end":188,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":211},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":19584,"byte_end":19598,"line_start":239,"line_end":239,"column_start":11,"column_end":25},"name":"AbstractMonoid","qualname":"::general::one_operator::AbstractMonoid","value":"AbstractMonoid<O: Operator>: AbstractSemigroup<O> + Identity<O>","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214}],"decl_id":null,"docs":" A monoid is a semigroup equipped with an identity element, e.","sig":null,"attributes":[{"value":"/ A monoid is a semigroup equipped with an identity element, e.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":19268,"byte_end":19333,"line_start":229,"line_end":229,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":19334,"byte_end":19337,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ *A set equipped with a closed associative binary operation with the divisibility property and","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":19338,"byte_end":19435,"line_start":231,"line_end":231,"column_start":1,"column_end":98}},{"value":"/ an identity element.*","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":19436,"byte_end":19461,"line_start":232,"line_end":232,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":19462,"byte_end":19465,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ # Identity element","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":19466,"byte_end":19488,"line_start":234,"line_end":234,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":19489,"byte_end":19492,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ ~~~notrust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":19493,"byte_end":19507,"line_start":236,"line_end":236,"column_start":1,"column_end":15}},{"value":"/ ∃ e ∈ Self, ∀ a ∈ Self, e ∘ a = a ∘ e = a","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":19508,"byte_end":19565,"line_start":237,"line_end":237,"column_start":1,"column_end":46}},{"value":"/ ~~~","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":19566,"byte_end":19573,"line_start":238,"line_end":238,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":19807,"byte_end":19853,"line_start":242,"line_end":242,"column_start":8,"column_end":54},"name":"prop_operating_identity_element_is_noop_approx","qualname":"::general::one_operator::AbstractMonoid::prop_operating_identity_element_is_noop_approx","value":"pub fn prop_operating_identity_element_is_noop_approx((Self,)) -> bool where\nSelf: RelativeEq","parent":{"krate":0,"index":211},"children":[],"decl_id":null,"docs":" Checks whether operating with the identity element is a no-op for the given\n argument. Approximate equality is used for verifications.\n","sig":null,"attributes":[{"value":"/ Checks whether operating with the identity element is a no-op for the given","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":19654,"byte_end":19733,"line_start":240,"line_end":240,"column_start":5,"column_end":84}},{"value":"/ argument. Approximate equality is used for verifications.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":19738,"byte_end":19799,"line_start":241,"line_end":241,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":20175,"byte_end":20214,"line_start":253,"line_end":253,"column_start":8,"column_end":47},"name":"prop_operating_identity_element_is_noop","qualname":"::general::one_operator::AbstractMonoid::prop_operating_identity_element_is_noop","value":"pub fn prop_operating_identity_element_is_noop((Self,)) -> bool where Self: Eq","parent":{"krate":0,"index":211},"children":[],"decl_id":null,"docs":" Checks whether operating with the identity element is a no-op for the given\n argument.\n","sig":null,"attributes":[{"value":"/ Checks whether operating with the identity element is a no-op for the given","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":20070,"byte_end":20149,"line_start":251,"line_end":251,"column_start":5,"column_end":84}},{"value":"/ argument.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":20154,"byte_end":20167,"line_start":252,"line_end":252,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":216},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":21472,"byte_end":21485,"line_start":297,"line_end":297,"column_start":11,"column_end":24},"name":"AbstractGroup","qualname":"::general::one_operator::AbstractGroup","value":"AbstractGroup<O: Operator>: AbstractLoop<O> + AbstractMonoid<O>","parent":null,"children":[],"decl_id":null,"docs":" A group is a loop and a monoid  at the same time.","sig":null,"attributes":[{"value":"/ A group is a loop and a monoid  at the same time.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":21281,"byte_end":21334,"line_start":294,"line_end":294,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":21335,"byte_end":21338,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ *A groups is a set with a closed associative binary operation with the divisibility property and an identity element.*","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":21339,"byte_end":21461,"line_start":296,"line_end":296,"column_start":1,"column_end":123}}]},{"kind":"Trait","id":{"krate":0,"index":219},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":23082,"byte_end":23102,"line_start":348,"line_end":348,"column_start":11,"column_end":31},"name":"AbstractGroupAbelian","qualname":"::general::one_operator::AbstractGroupAbelian","value":"AbstractGroupAbelian<O: Operator>: AbstractGroup<O>","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":222}],"decl_id":null,"docs":" An Abelian group is a **commutative** group.","sig":null,"attributes":[{"value":"/ An Abelian group is a **commutative** group.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":22776,"byte_end":22824,"line_start":339,"line_end":339,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":22825,"byte_end":22828,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ *An commutative group is a set with a closed commutative and associative binary operation with the divisibility property and an identity element.*","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":22829,"byte_end":22979,"line_start":341,"line_end":341,"column_start":1,"column_end":151}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":22980,"byte_end":22983,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ # Commutativity","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":22984,"byte_end":23003,"line_start":343,"line_end":343,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":23004,"byte_end":23007,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ ```notrust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":23008,"byte_end":23022,"line_start":345,"line_end":345,"column_start":1,"column_end":15}},{"value":"/ ∀ a, b ∈ Self, a ∘ b = b ∘ a","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":23023,"byte_end":23063,"line_start":346,"line_end":346,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":23064,"byte_end":23071,"line_start":347,"line_end":347,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":23283,"byte_end":23309,"line_start":351,"line_end":351,"column_start":8,"column_end":34},"name":"prop_is_commutative_approx","qualname":"::general::one_operator::AbstractGroupAbelian::prop_is_commutative_approx","value":"pub fn prop_is_commutative_approx((Self, Self)) -> bool where Self: RelativeEq","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" Returns `true` if the operator is commutative for the given argument tuple. Approximate\n equality is used for verifications.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the operator is commutative for the given argument tuple. Approximate","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":23140,"byte_end":23231,"line_start":349,"line_end":349,"column_start":5,"column_end":96}},{"value":"/ equality is used for verifications.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":23236,"byte_end":23275,"line_start":350,"line_end":350,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":23556,"byte_end":23575,"line_start":360,"line_end":360,"column_start":8,"column_end":27},"name":"prop_is_commutative","qualname":"::general::one_operator::AbstractGroupAbelian::prop_is_commutative","value":"pub fn prop_is_commutative((Self, Self)) -> bool where Self: Eq","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" Returns `true` if the operator is commutative for the given argument tuple.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the operator is commutative for the given argument tuple.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":23469,"byte_end":23548,"line_start":359,"line_end":359,"column_start":5,"column_end":84}}]},{"kind":"Trait","id":{"krate":0,"index":290},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27120,"byte_end":27132,"line_start":23,"line_end":23,"column_start":11,"column_end":23},"name":"ComplexField","qualname":"::general::complex::ComplexField","value":"ComplexField: SubsetOf<Self> + SupersetOf<f64> + Field + Copy + Num + NumAssign +\nFromPrimitive + Neg<Output = Self> + MeetSemilattice + JoinSemilattice +\nSend + Sync + Any + 'static + Debug + Display","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346}],"decl_id":null,"docs":" Trait shared by all complex fields and its subfields (like real numbers).","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":26530,"byte_end":26552,"line_start":14,"line_end":14,"column_start":1,"column_end":23}},{"value":"/ Trait shared by all complex fields and its subfields (like real numbers).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":26554,"byte_end":26631,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":26632,"byte_end":26635,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Complex numbers are equipped with functions that are commonly used on complex numbers and reals.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":26636,"byte_end":26736,"line_start":18,"line_end":18,"column_start":1,"column_end":101}},{"value":"/ The results of those functions only have to be approximately equal to the actual theoretical values.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":26737,"byte_end":26841,"line_start":19,"line_end":19,"column_start":1,"column_end":105}}]},{"kind":"Type","id":{"krate":0,"index":291},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27516,"byte_end":27525,"line_start":44,"line_end":44,"column_start":10,"column_end":19},"name":"RealField","qualname":"::general::complex::ComplexField::RealField","value":"type RealField: RealField;","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Type of the coefficients of a complex number.\n","sig":null,"attributes":[{"value":"/ Type of the coefficients of a complex number.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27457,"byte_end":27506,"line_start":43,"line_end":43,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27610,"byte_end":27619,"line_start":47,"line_end":47,"column_start":8,"column_end":17},"name":"from_real","qualname":"::general::complex::ComplexField::from_real","value":"pub fn from_real(Self::RealField) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Builds a pure-real complex number from the given value.\n","sig":null,"attributes":[{"value":"/ Builds a pure-real complex number from the given value.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27543,"byte_end":27602,"line_start":46,"line_end":46,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27704,"byte_end":27708,"line_start":50,"line_end":50,"column_start":8,"column_end":12},"name":"real","qualname":"::general::complex::ComplexField::real","value":"pub fn real(Self) -> Self::RealField","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" The real part of this complex number.\n","sig":null,"attributes":[{"value":"/ The real part of this complex number.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27655,"byte_end":27696,"line_start":49,"line_end":49,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27794,"byte_end":27803,"line_start":53,"line_end":53,"column_start":8,"column_end":17},"name":"imaginary","qualname":"::general::complex::ComplexField::imaginary","value":"pub fn imaginary(Self) -> Self::RealField","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" The imaginary part of this complex number.\n","sig":null,"attributes":[{"value":"/ The imaginary part of this complex number.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27740,"byte_end":27786,"line_start":52,"line_end":52,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27882,"byte_end":27889,"line_start":56,"line_end":56,"column_start":8,"column_end":15},"name":"modulus","qualname":"::general::complex::ComplexField::modulus","value":"pub fn modulus(Self) -> Self::RealField","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" The modulus of this complex number.\n","sig":null,"attributes":[{"value":"/ The modulus of this complex number.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27835,"byte_end":27874,"line_start":55,"line_end":55,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27976,"byte_end":27991,"line_start":59,"line_end":59,"column_start":8,"column_end":23},"name":"modulus_squared","qualname":"::general::complex::ComplexField::modulus_squared","value":"pub fn modulus_squared(Self) -> Self::RealField","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" The squared modulus of this complex number.\n","sig":null,"attributes":[{"value":"/ The squared modulus of this complex number.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27921,"byte_end":27968,"line_start":58,"line_end":58,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":28071,"byte_end":28079,"line_start":62,"line_end":62,"column_start":8,"column_end":16},"name":"argument","qualname":"::general::complex::ComplexField::argument","value":"pub fn argument(Self) -> Self::RealField","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" The argument of this complex number.\n","sig":null,"attributes":[{"value":"/ The argument of this complex number.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":28023,"byte_end":28063,"line_start":61,"line_end":61,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":28202,"byte_end":28207,"line_start":65,"line_end":65,"column_start":8,"column_end":13},"name":"norm1","qualname":"::general::complex::ComplexField::norm1","value":"pub fn norm1(Self) -> Self::RealField","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" The sum of the absolute value of this complex number's real and imaginary part.\n","sig":null,"attributes":[{"value":"/ The sum of the absolute value of this complex number's real and imaginary part.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":28111,"byte_end":28194,"line_start":64,"line_end":64,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":28294,"byte_end":28299,"line_start":68,"line_end":68,"column_start":8,"column_end":13},"name":"scale","qualname":"::general::complex::ComplexField::scale","value":"pub fn scale(Self, Self::RealField) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Multiplies this complex number by `factor`.\n","sig":null,"attributes":[{"value":"/ Multiplies this complex number by `factor`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":28239,"byte_end":28286,"line_start":67,"line_end":67,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":28397,"byte_end":28404,"line_start":71,"line_end":71,"column_start":8,"column_end":15},"name":"unscale","qualname":"::general::complex::ComplexField::unscale","value":"pub fn unscale(Self, Self::RealField) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Divides this complex number by `factor`.\n","sig":null,"attributes":[{"value":"/ Divides this complex number by `factor`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":28345,"byte_end":28389,"line_start":70,"line_end":70,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":28515,"byte_end":28523,"line_start":74,"line_end":74,"column_start":8,"column_end":16},"name":"to_polar","qualname":"::general::complex::ComplexField::to_polar","value":"pub fn to_polar(Self) -> (Self::RealField, Self::RealField)","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" The polar form of this complex number: (modulus, arg)\n","sig":null,"attributes":[{"value":"/ The polar form of this complex number: (modulus, arg)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":28450,"byte_end":28507,"line_start":73,"line_end":73,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":28700,"byte_end":28706,"line_start":79,"line_end":79,"column_start":8,"column_end":14},"name":"to_exp","qualname":"::general::complex::ComplexField::to_exp","value":"pub fn to_exp(Self) -> (Self::RealField, Self)","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" The exponential form of this complex number: (modulus, e^{i arg})\n","sig":null,"attributes":[{"value":"/ The exponential form of this complex number: (modulus, e^{i arg})","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":28623,"byte_end":28692,"line_start":78,"line_end":78,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29003,"byte_end":29009,"line_start":90,"line_end":90,"column_start":8,"column_end":14},"name":"signum","qualname":"::general::complex::ComplexField::signum","value":"pub fn signum(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" The exponential part of this complex number: `self / self.modulus()`\n","sig":null,"attributes":[{"value":"/ The exponential part of this complex number: `self / self.modulus()`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":28923,"byte_end":28995,"line_start":89,"line_end":89,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29065,"byte_end":29070,"line_start":95,"line_end":95,"column_start":8,"column_end":13},"name":"floor","qualname":"::general::complex::ComplexField::floor","value":"pub fn floor(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29093,"byte_end":29097,"line_start":96,"line_end":96,"column_start":8,"column_end":12},"name":"ceil","qualname":"::general::complex::ComplexField::ceil","value":"pub fn ceil(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29120,"byte_end":29125,"line_start":97,"line_end":97,"column_start":8,"column_end":13},"name":"round","qualname":"::general::complex::ComplexField::round","value":"pub fn round(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29148,"byte_end":29153,"line_start":98,"line_end":98,"column_start":8,"column_end":13},"name":"trunc","qualname":"::general::complex::ComplexField::trunc","value":"pub fn trunc(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29176,"byte_end":29181,"line_start":99,"line_end":99,"column_start":8,"column_end":13},"name":"fract","qualname":"::general::complex::ComplexField::fract","value":"pub fn fract(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29204,"byte_end":29211,"line_start":100,"line_end":100,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::general::complex::ComplexField::mul_add","value":"pub fn mul_add(Self, Self, Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29384,"byte_end":29387,"line_start":105,"line_end":105,"column_start":8,"column_end":11},"name":"abs","qualname":"::general::complex::ComplexField::abs","value":"pub fn abs(Self) -> Self::RealField","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" The absolute value of this complex number: `self / self.signum()`.","sig":null,"attributes":[{"value":"/ The absolute value of this complex number: `self / self.signum()`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29250,"byte_end":29320,"line_start":102,"line_end":102,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29325,"byte_end":29328,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `self.modulus()`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29333,"byte_end":29376,"line_start":104,"line_end":104,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29500,"byte_end":29505,"line_start":108,"line_end":108,"column_start":8,"column_end":13},"name":"hypot","qualname":"::general::complex::ComplexField::hypot","value":"pub fn hypot(Self, Self) -> Self::RealField","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Computes (self.conjugate() * self + other.conjugate() * other).sqrt()\n","sig":null,"attributes":[{"value":"/ Computes (self.conjugate() * self + other.conjugate() * other).sqrt()","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29419,"byte_end":29492,"line_start":107,"line_end":107,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29553,"byte_end":29558,"line_start":110,"line_end":110,"column_start":8,"column_end":13},"name":"recip","qualname":"::general::complex::ComplexField::recip","value":"pub fn recip(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29581,"byte_end":29590,"line_start":111,"line_end":111,"column_start":8,"column_end":17},"name":"conjugate","qualname":"::general::complex::ComplexField::conjugate","value":"pub fn conjugate(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29613,"byte_end":29616,"line_start":112,"line_end":112,"column_start":8,"column_end":11},"name":"sin","qualname":"::general::complex::ComplexField::sin","value":"pub fn sin(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29639,"byte_end":29642,"line_start":113,"line_end":113,"column_start":8,"column_end":11},"name":"cos","qualname":"::general::complex::ComplexField::cos","value":"pub fn cos(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29665,"byte_end":29672,"line_start":114,"line_end":114,"column_start":8,"column_end":15},"name":"sin_cos","qualname":"::general::complex::ComplexField::sin_cos","value":"pub fn sin_cos(Self) -> (Self, Self)","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29717,"byte_end":29726,"line_start":116,"line_end":116,"column_start":8,"column_end":17},"name":"sinh_cosh","qualname":"::general::complex::ComplexField::sinh_cosh","value":"pub fn sinh_cosh(Self) -> (Self, Self)","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29700,"byte_end":29709,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29799,"byte_end":29802,"line_start":119,"line_end":119,"column_start":8,"column_end":11},"name":"tan","qualname":"::general::complex::ComplexField::tan","value":"pub fn tan(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29825,"byte_end":29829,"line_start":120,"line_end":120,"column_start":8,"column_end":12},"name":"asin","qualname":"::general::complex::ComplexField::asin","value":"pub fn asin(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29852,"byte_end":29856,"line_start":121,"line_end":121,"column_start":8,"column_end":12},"name":"acos","qualname":"::general::complex::ComplexField::acos","value":"pub fn acos(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29879,"byte_end":29883,"line_start":122,"line_end":122,"column_start":8,"column_end":12},"name":"atan","qualname":"::general::complex::ComplexField::atan","value":"pub fn atan(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29906,"byte_end":29910,"line_start":123,"line_end":123,"column_start":8,"column_end":12},"name":"sinh","qualname":"::general::complex::ComplexField::sinh","value":"pub fn sinh(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29933,"byte_end":29937,"line_start":124,"line_end":124,"column_start":8,"column_end":12},"name":"cosh","qualname":"::general::complex::ComplexField::cosh","value":"pub fn cosh(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29960,"byte_end":29964,"line_start":125,"line_end":125,"column_start":8,"column_end":12},"name":"tanh","qualname":"::general::complex::ComplexField::tanh","value":"pub fn tanh(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":29987,"byte_end":29992,"line_start":126,"line_end":126,"column_start":8,"column_end":13},"name":"asinh","qualname":"::general::complex::ComplexField::asinh","value":"pub fn asinh(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30015,"byte_end":30020,"line_start":127,"line_end":127,"column_start":8,"column_end":13},"name":"acosh","qualname":"::general::complex::ComplexField::acosh","value":"pub fn acosh(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30043,"byte_end":30048,"line_start":128,"line_end":128,"column_start":8,"column_end":13},"name":"atanh","qualname":"::general::complex::ComplexField::atanh","value":"pub fn atanh(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30072,"byte_end":30081,"line_start":130,"line_end":130,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::general::complex::ComplexField::is_finite","value":"pub fn is_finite(&Self) -> bool","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30142,"byte_end":30146,"line_start":134,"line_end":134,"column_start":8,"column_end":12},"name":"sinc","qualname":"::general::complex::ComplexField::sinc","value":"pub fn sinc(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Cardinal sine\n","sig":null,"attributes":[{"value":"/ Cardinal sine","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30103,"byte_end":30120,"line_start":132,"line_end":132,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30125,"byte_end":30134,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30300,"byte_end":30305,"line_start":143,"line_end":143,"column_start":8,"column_end":13},"name":"sinhc","qualname":"::general::complex::ComplexField::sinhc","value":"pub fn sinhc(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30283,"byte_end":30292,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30481,"byte_end":30485,"line_start":153,"line_end":153,"column_start":8,"column_end":12},"name":"cosc","qualname":"::general::complex::ComplexField::cosc","value":"pub fn cosc(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Cardinal cos\n","sig":null,"attributes":[{"value":"/ Cardinal cos","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30443,"byte_end":30459,"line_start":151,"line_end":151,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30464,"byte_end":30473,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30639,"byte_end":30644,"line_start":162,"line_end":162,"column_start":8,"column_end":13},"name":"coshc","qualname":"::general::complex::ComplexField::coshc","value":"pub fn coshc(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30622,"byte_end":30631,"line_start":161,"line_end":161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30785,"byte_end":30788,"line_start":170,"line_end":170,"column_start":8,"column_end":11},"name":"log","qualname":"::general::complex::ComplexField::log","value":"pub fn log(Self, Self::RealField) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30834,"byte_end":30838,"line_start":171,"line_end":171,"column_start":8,"column_end":12},"name":"log2","qualname":"::general::complex::ComplexField::log2","value":"pub fn log2(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30861,"byte_end":30866,"line_start":172,"line_end":172,"column_start":8,"column_end":13},"name":"log10","qualname":"::general::complex::ComplexField::log10","value":"pub fn log10(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30889,"byte_end":30891,"line_start":173,"line_end":173,"column_start":8,"column_end":10},"name":"ln","qualname":"::general::complex::ComplexField::ln","value":"pub fn ln(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30914,"byte_end":30919,"line_start":174,"line_end":174,"column_start":8,"column_end":13},"name":"ln_1p","qualname":"::general::complex::ComplexField::ln_1p","value":"pub fn ln_1p(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30942,"byte_end":30946,"line_start":175,"line_end":175,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::general::complex::ComplexField::sqrt","value":"pub fn sqrt(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":30969,"byte_end":30977,"line_start":176,"line_end":176,"column_start":8,"column_end":16},"name":"try_sqrt","qualname":"::general::complex::ComplexField::try_sqrt","value":"pub fn try_sqrt(Self) -> Option<Self>","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":31008,"byte_end":31011,"line_start":177,"line_end":177,"column_start":8,"column_end":11},"name":"exp","qualname":"::general::complex::ComplexField::exp","value":"pub fn exp(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":31034,"byte_end":31038,"line_start":178,"line_end":178,"column_start":8,"column_end":12},"name":"exp2","qualname":"::general::complex::ComplexField::exp2","value":"pub fn exp2(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":31061,"byte_end":31067,"line_start":179,"line_end":179,"column_start":8,"column_end":14},"name":"exp_m1","qualname":"::general::complex::ComplexField::exp_m1","value":"pub fn exp_m1(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":31090,"byte_end":31094,"line_start":180,"line_end":180,"column_start":8,"column_end":12},"name":"powi","qualname":"::general::complex::ComplexField::powi","value":"pub fn powi(Self, i32) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":31125,"byte_end":31129,"line_start":181,"line_end":181,"column_start":8,"column_end":12},"name":"powf","qualname":"::general::complex::ComplexField::powf","value":"pub fn powf(Self, Self::RealField) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":31172,"byte_end":31176,"line_start":182,"line_end":182,"column_start":8,"column_end":12},"name":"powc","qualname":"::general::complex::ComplexField::powc","value":"pub fn powc(Self, Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":31208,"byte_end":31212,"line_start":183,"line_end":183,"column_start":8,"column_end":12},"name":"cbrt","qualname":"::general::complex::ComplexField::cbrt","value":"pub fn cbrt(Self) -> Self","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":503},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":50838,"byte_end":50846,"line_start":21,"line_end":21,"column_start":11,"column_end":19},"name":"Identity","qualname":"::general::identity::Identity","value":"Identity<O: Operator>","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506}],"decl_id":null,"docs":" A type that is equipped with identity.\n","sig":null,"attributes":[{"value":"/ A type that is equipped with identity.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":50785,"byte_end":50827,"line_start":20,"line_end":20,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":50899,"byte_end":50907,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"identity","qualname":"::general::identity::Identity::identity","value":"pub fn identity() -> Self","parent":{"krate":0,"index":503},"children":[],"decl_id":null,"docs":" The identity element.\n","sig":null,"attributes":[{"value":"/ The identity element.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":50866,"byte_end":50891,"line_start":22,"line_end":22,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":50968,"byte_end":50970,"line_start":27,"line_end":27,"column_start":8,"column_end":10},"name":"id","qualname":"::general::identity::Identity::id","value":"pub fn id(O) -> Self where Self: Sized","parent":{"krate":0,"index":503},"children":[],"decl_id":null,"docs":" Specific identity.\n","sig":null,"attributes":[{"value":"/ Specific identity.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":50924,"byte_end":50946,"line_start":25,"line_end":25,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":50951,"byte_end":50960,"line_start":26,"line_end":26,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1830},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52227,"byte_end":52229,"line_start":69,"line_end":69,"column_start":12,"column_end":14},"name":"Id","qualname":"::general::identity::Id","value":"Id {  }","parent":null,"children":[{"krate":0,"index":1832}],"decl_id":null,"docs":" The universal identity element wrt. a given operator, usually noted `Id` with a\n context-dependent subscript.","sig":null,"attributes":[{"value":"/ The universal identity element wrt. a given operator, usually noted `Id` with a","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":51826,"byte_end":51909,"line_start":61,"line_end":61,"column_start":1,"column_end":84}},{"value":"/ context-dependent subscript.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":51910,"byte_end":51942,"line_start":62,"line_end":62,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":51943,"byte_end":51946,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ By default, it is the multiplicative identity element. It represents the degenerate set","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":51947,"byte_end":52038,"line_start":64,"line_end":64,"column_start":1,"column_end":92}},{"value":"/ containing only the identity element of any group-like structure.  It has no dimension known at","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52039,"byte_end":52138,"line_start":65,"line_end":65,"column_start":1,"column_end":100}},{"value":"/ compile-time. All its operations are no-ops.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52139,"byte_end":52187,"line_start":66,"line_end":66,"column_start":1,"column_end":49}},{"value":"repr(C)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52188,"byte_end":52198,"line_start":67,"line_end":67,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52381,"byte_end":52384,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<Id<O>>::new","value":"pub fn new() -> Id<O>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new identity element.\n","sig":null,"attributes":[{"value":"/ Creates a new identity element.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52320,"byte_end":52355,"line_start":74,"line_end":74,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52360,"byte_end":52369,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":609},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56263,"byte_end":56278,"line_start":6,"line_end":6,"column_start":11,"column_end":26},"name":"MeetSemilattice","qualname":"::general::lattice::MeetSemilattice","value":"MeetSemilattice: Sized","parent":null,"children":[{"krate":0,"index":610}],"decl_id":null,"docs":" A set where every two elements have an infimum (i.e. greatest lower bound).\n","sig":null,"attributes":[{"value":"/ A set where every two elements have an infimum (i.e. greatest lower bound).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56173,"byte_end":56252,"line_start":5,"line_end":5,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56350,"byte_end":56354,"line_start":8,"line_end":8,"column_start":8,"column_end":12},"name":"meet","qualname":"::general::lattice::MeetSemilattice::meet","value":"pub fn meet(&Self, &Self) -> Self","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" Returns the meet (aka. infimum) of two values.\n","sig":null,"attributes":[{"value":"/ Returns the meet (aka. infimum) of two values.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56292,"byte_end":56342,"line_start":7,"line_end":7,"column_start":5,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":611},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56478,"byte_end":56493,"line_start":12,"line_end":12,"column_start":11,"column_end":26},"name":"JoinSemilattice","qualname":"::general::lattice::JoinSemilattice","value":"JoinSemilattice: Sized","parent":null,"children":[{"krate":0,"index":612}],"decl_id":null,"docs":" A set where every two elements have a supremum (i.e. smallest upper bound).\n","sig":null,"attributes":[{"value":"/ A set where every two elements have a supremum (i.e. smallest upper bound).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56388,"byte_end":56467,"line_start":11,"line_end":11,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56566,"byte_end":56570,"line_start":14,"line_end":14,"column_start":8,"column_end":12},"name":"join","qualname":"::general::lattice::JoinSemilattice::join","value":"pub fn join(&Self, &Self) -> Self","parent":{"krate":0,"index":611},"children":[],"decl_id":null,"docs":" Returns the join (aka. supremum) of two values.\n","sig":null,"attributes":[{"value":"/ Returns the join (aka. supremum) of two values.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56507,"byte_end":56558,"line_start":13,"line_end":13,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":613},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56697,"byte_end":56704,"line_start":18,"line_end":18,"column_start":11,"column_end":18},"name":"Lattice","qualname":"::general::lattice::Lattice","value":"Lattice: MeetSemilattice + JoinSemilattice + PartialOrd","parent":null,"children":[{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":617},{"krate":0,"index":619},{"krate":0,"index":621}],"decl_id":null,"docs":" Partially orderable sets where every two elements have a supremum and infimum.\n","sig":null,"attributes":[{"value":"/ Partially orderable sets where every two elements have a supremum and infimum.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56604,"byte_end":56686,"line_start":17,"line_end":17,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56837,"byte_end":56846,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"meet_join","qualname":"::general::lattice::Lattice::meet_join","value":"pub fn meet_join(&Self, &Self) -> (Self, Self)","parent":{"krate":0,"index":613},"children":[],"decl_id":null,"docs":" Returns the infimum and the supremum simultaneously.\n","sig":null,"attributes":[{"value":"/ Returns the infimum and the supremum simultaneously.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56759,"byte_end":56815,"line_start":19,"line_end":19,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56820,"byte_end":56829,"line_start":20,"line_end":20,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":57032,"byte_end":57043,"line_start":27,"line_end":27,"column_start":8,"column_end":19},"name":"partial_min","qualname":"::general::lattice::Lattice::partial_min","value":"pub fn partial_min<'a>(&'a Self, &'a Self) -> Option<&'a Self>","parent":{"krate":0,"index":613},"children":[],"decl_id":null,"docs":" Return the minimum of `self` and `other` if they are comparable.\n","sig":null,"attributes":[{"value":"/ Return the minimum of `self` and `other` if they are comparable.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56942,"byte_end":57010,"line_start":25,"line_end":25,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":57015,"byte_end":57024,"line_start":26,"line_end":26,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":57416,"byte_end":57427,"line_start":40,"line_end":40,"column_start":8,"column_end":19},"name":"partial_max","qualname":"::general::lattice::Lattice::partial_max","value":"pub fn partial_max<'a>(&'a Self, &'a Self) -> Option<&'a Self>","parent":{"krate":0,"index":613},"children":[],"decl_id":null,"docs":" Return the maximum of `self` and `other` if they are comparable.\n","sig":null,"attributes":[{"value":"/ Return the maximum of `self` and `other` if they are comparable.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":57326,"byte_end":57394,"line_start":38,"line_end":38,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":57399,"byte_end":57408,"line_start":39,"line_end":39,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":57795,"byte_end":57808,"line_start":53,"line_end":53,"column_start":8,"column_end":21},"name":"partial_sort2","qualname":"::general::lattice::Lattice::partial_sort2","value":"pub fn partial_sort2<'a>(&'a Self, &'a Self) -> Option<(&'a Self, &'a Self)>","parent":{"krate":0,"index":613},"children":[],"decl_id":null,"docs":" Sorts two values in increasing order using a partial ordering.\n","sig":null,"attributes":[{"value":"/ Sorts two values in increasing order using a partial ordering.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":57707,"byte_end":57773,"line_start":51,"line_end":51,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":57778,"byte_end":57787,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":58252,"byte_end":58265,"line_start":67,"line_end":67,"column_start":8,"column_end":21},"name":"partial_clamp","qualname":"::general::lattice::Lattice::partial_clamp","value":"pub fn partial_clamp<'a>(&'a Self, &'a Self, &'a Self) -> Option<&'a Self>","parent":{"krate":0,"index":613},"children":[],"decl_id":null,"docs":" Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n `min` or `max`.\n","sig":null,"attributes":[{"value":"/ Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":58117,"byte_end":58206,"line_start":64,"line_end":64,"column_start":5,"column_end":94}},{"value":"/ `min` or `max`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":58211,"byte_end":58230,"line_start":65,"line_end":65,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":58235,"byte_end":58244,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":647},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":61027,"byte_end":61041,"line_start":22,"line_end":22,"column_start":11,"column_end":25},"name":"AbstractModule","qualname":"::general::module::AbstractModule","value":"AbstractModule<OpGroup: Operator = Additive, OpAdd: Operator = Additive, OpMul: Operator =\n Multiplicative>: AbstractGroupAbelian<OpGroup>","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":652}],"decl_id":null,"docs":" A module combines two sets: one with an Abelian group structure and another with a\n commutative ring structure.","sig":null,"attributes":[{"value":"/ A module combines two sets: one with an Abelian group structure and another with a","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":60376,"byte_end":60462,"line_start":5,"line_end":5,"column_start":1,"column_end":87}},{"value":"/ commutative ring structure.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":60463,"byte_end":60494,"line_start":6,"line_end":6,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":60495,"byte_end":60498,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ `OpGroup` denotes the Abelian group operator (usually the addition). In addition, and external","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":60499,"byte_end":60597,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"/ multiplicative law noted `∘` is defined. Let `S` be the ring with multiplicative operator","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":60598,"byte_end":60693,"line_start":9,"line_end":9,"column_start":1,"column_end":94}},{"value":"/ `OpMul` noted `×`, multiplicative identity element noted `1`, and additive operator `OpAdd`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":60694,"byte_end":60791,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"/ Then:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":60792,"byte_end":60801,"line_start":11,"line_end":11,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":60802,"byte_end":60805,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```notrust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":60806,"byte_end":60820,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/ ∀ a, b ∈ S","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":60821,"byte_end":60839,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/ ∀ x, y ∈ Self","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":60840,"byte_end":60861,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":60862,"byte_end":60865,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ a ∘ (x + y) = (a ∘ x) + (a ∘ y)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":60866,"byte_end":60907,"line_start":17,"line_end":17,"column_start":1,"column_end":36}},{"value":"/ (a + b) ∘ x = (a ∘ x) + (b ∘ x)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":60908,"byte_end":60949,"line_start":18,"line_end":18,"column_start":1,"column_end":36}},{"value":"/ (a × b) ∘ x = a ∘ (b ∘ x)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":60950,"byte_end":60986,"line_start":19,"line_end":19,"column_start":1,"column_end":30}},{"value":"/ 1 ∘ x       = x","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":60987,"byte_end":61008,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":61009,"byte_end":61016,"line_start":21,"line_end":21,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":651},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":61228,"byte_end":61240,"line_start":29,"line_end":29,"column_start":10,"column_end":22},"name":"AbstractRing","qualname":"::general::module::AbstractModule::AbstractRing","value":"type AbstractRing: AbstractRingCommutative<OpAdd, OpMul>;","parent":{"krate":0,"index":647},"children":[],"decl_id":null,"docs":" The underlying scalar field.\n","sig":null,"attributes":[{"value":"/ The underlying scalar field.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":61186,"byte_end":61218,"line_start":28,"line_end":28,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":61362,"byte_end":61373,"line_start":32,"line_end":32,"column_start":8,"column_end":19},"name":"multiply_by","qualname":"::general::module::AbstractModule::multiply_by","value":"pub fn multiply_by(&Self, Self::AbstractRing) -> Self","parent":{"krate":0,"index":647},"children":[],"decl_id":null,"docs":" Multiplies an element of the ring with an element of the module.\n","sig":null,"attributes":[{"value":"/ Multiplies an element of the ring with an element of the module.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":61286,"byte_end":61354,"line_start":31,"line_end":31,"column_start":5,"column_end":73}}]},{"kind":"Trait","id":{"krate":0,"index":696},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":62358,"byte_end":62366,"line_start":10,"line_end":10,"column_start":11,"column_end":19},"name":"Operator","qualname":"::general::operator::Operator","value":"Operator: Copy","parent":null,"children":[{"krate":0,"index":697}],"decl_id":null,"docs":" Trait implemented by types representing abstract operators.\n","sig":null,"attributes":[{"value":"/ Trait implemented by types representing abstract operators.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":62284,"byte_end":62347,"line_start":9,"line_end":9,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":62442,"byte_end":62456,"line_start":12,"line_end":12,"column_start":8,"column_end":22},"name":"operator_token","qualname":"::general::operator::Operator::operator_token","value":"pub fn operator_token() -> Self","parent":{"krate":0,"index":696},"children":[],"decl_id":null,"docs":" Returns the structure that identifies the operator.\n","sig":null,"attributes":[{"value":"/ Returns the structure that identifies the operator.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":62379,"byte_end":62434,"line_start":11,"line_end":11,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":698},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":62669,"byte_end":62684,"line_start":18,"line_end":18,"column_start":11,"column_end":26},"name":"TwoSidedInverse","qualname":"::general::operator::TwoSidedInverse","value":"TwoSidedInverse<O: Operator>: Sized","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":701}],"decl_id":null,"docs":" Trait used to define the two_sided_inverse element relative to the given operator.","sig":null,"attributes":[{"value":"/ Trait used to define the two_sided_inverse element relative to the given operator.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":62471,"byte_end":62557,"line_start":15,"line_end":15,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":62558,"byte_end":62561,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ The operator, e.g., `Additive` or `Multiplicative`, is identified by the type parameter `O`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":62562,"byte_end":62658,"line_start":17,"line_end":17,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":62879,"byte_end":62896,"line_start":22,"line_end":22,"column_start":8,"column_end":25},"name":"two_sided_inverse","qualname":"::general::operator::TwoSidedInverse::two_sided_inverse","value":"pub fn two_sided_inverse(&Self) -> Self","parent":{"krate":0,"index":698},"children":[],"decl_id":null,"docs":" Returns the two_sided_inverse of `self`, relative to the operator `O`.","sig":null,"attributes":[{"value":"/ Returns the two_sided_inverse of `self`, relative to the operator `O`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":62711,"byte_end":62785,"line_start":19,"line_end":19,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":62790,"byte_end":62793,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ The parameter `O` is generally either `Additive` or `Multiplicative`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":62798,"byte_end":62871,"line_start":21,"line_end":21,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":63089,"byte_end":63110,"line_start":28,"line_end":28,"column_start":8,"column_end":29},"name":"two_sided_inverse_mut","qualname":"::general::operator::TwoSidedInverse::two_sided_inverse_mut","value":"pub fn two_sided_inverse_mut(&mut Self)","parent":{"krate":0,"index":698},"children":[],"decl_id":null,"docs":" In-place inversion of `self`, relative to the operator `O`.","sig":null,"attributes":[{"value":"/ In-place inversion of `self`, relative to the operator `O`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":62918,"byte_end":62981,"line_start":24,"line_end":24,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":62986,"byte_end":62989,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ The parameter `O` is generally either `Additive` or `Multiplicative`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":62994,"byte_end":63067,"line_start":26,"line_end":26,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":63072,"byte_end":63081,"line_start":27,"line_end":27,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1941},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":63297,"byte_end":63305,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"Additive","qualname":"::general::operator::Additive","value":"","parent":null,"children":[],"decl_id":null,"docs":" The addition operator, commonly symbolized by `+`.\n","sig":null,"attributes":[{"value":"/ The addition operator, commonly symbolized by `+`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":63231,"byte_end":63285,"line_start":40,"line_end":40,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":1946},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":63404,"byte_end":63418,"line_start":45,"line_end":45,"column_start":12,"column_end":26},"name":"Multiplicative","qualname":"::general::operator::Multiplicative","value":"","parent":null,"children":[],"decl_id":null,"docs":" The multiplication operator, commonly symbolized by `×`.\n","sig":null,"attributes":[{"value":"/ The multiplication operator, commonly symbolized by `×`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":63331,"byte_end":63392,"line_start":44,"line_end":44,"column_start":1,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":719},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65142,"byte_end":65151,"line_start":126,"line_end":126,"column_start":11,"column_end":20},"name":"ClosedAdd","qualname":"::general::operator::ClosedAdd","value":"ClosedAdd<Right = Self>: Sized + Add<Right, Output = Self> + AddAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Trait alias for `Add` and `AddAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ [Alias] Trait alias for `Add` and `AddAssign` with result of type `Self`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65054,"byte_end":65131,"line_start":125,"line_end":125,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":721},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65312,"byte_end":65321,"line_start":129,"line_end":129,"column_start":11,"column_end":20},"name":"ClosedSub","qualname":"::general::operator::ClosedSub","value":"ClosedSub<Right = Self>: Sized + Sub<Right, Output = Self> + SubAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Trait alias for `Sub` and `SubAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ [Alias] Trait alias for `Sub` and `SubAssign` with result of type `Self`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65224,"byte_end":65301,"line_start":128,"line_end":128,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":723},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65482,"byte_end":65491,"line_start":132,"line_end":132,"column_start":11,"column_end":20},"name":"ClosedMul","qualname":"::general::operator::ClosedMul","value":"ClosedMul<Right = Self>: Sized + Mul<Right, Output = Self> + MulAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Trait alias for `Mul` and `MulAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ [Alias] Trait alias for `Mul` and `MulAssign` with result of type `Self`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65394,"byte_end":65471,"line_start":131,"line_end":131,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":725},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65652,"byte_end":65661,"line_start":135,"line_end":135,"column_start":11,"column_end":20},"name":"ClosedDiv","qualname":"::general::operator::ClosedDiv","value":"ClosedDiv<Right = Self>: Sized + Div<Right, Output = Self> + DivAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Trait alias for `Div` and `DivAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ [Alias] Trait alias for `Div` and `DivAssign` with result of type `Self`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65564,"byte_end":65641,"line_start":134,"line_end":134,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":727},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65806,"byte_end":65815,"line_start":138,"line_end":138,"column_start":11,"column_end":20},"name":"ClosedNeg","qualname":"::general::operator::ClosedNeg","value":"ClosedNeg: Sized + Neg<Output = Self>","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Trait alias for `Neg` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ [Alias] Trait alias for `Neg` with result of type `Self`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65734,"byte_end":65795,"line_start":137,"line_end":137,"column_start":1,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":771},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67010,"byte_end":67019,"line_start":22,"line_end":22,"column_start":11,"column_end":20},"name":"RealField","qualname":"::general::real::RealField","value":"RealField: ComplexField<RealField = Self> + RelativeEq<Epsilon = Self> + UlpsEq<Epsilon =\nSelf> + Lattice + Signed + Bounded","parent":null,"children":[{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791}],"decl_id":null,"docs":" Trait shared by all reals.","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":66497,"byte_end":66519,"line_start":13,"line_end":13,"column_start":1,"column_end":23}},{"value":"/ Trait shared by all reals.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":66521,"byte_end":66551,"line_start":15,"line_end":15,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":66552,"byte_end":66555,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Reals are equipped with functions that are commonly used on reals. The results of those","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":66556,"byte_end":66647,"line_start":17,"line_end":17,"column_start":1,"column_end":92}},{"value":"/ functions only have to be approximately equal to the actual theoretical values.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":66648,"byte_end":66731,"line_start":18,"line_end":18,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67356,"byte_end":67372,"line_start":32,"line_end":32,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::general::real::RealField::is_sign_positive","value":"pub fn is_sign_positive(Self) -> bool","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67395,"byte_end":67411,"line_start":33,"line_end":33,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::general::real::RealField::is_sign_negative","value":"pub fn is_sign_negative(Self) -> bool","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67434,"byte_end":67437,"line_start":34,"line_end":34,"column_start":8,"column_end":11},"name":"max","qualname":"::general::real::RealField::max","value":"pub fn max(Self, Self) -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67473,"byte_end":67476,"line_start":35,"line_end":35,"column_start":8,"column_end":11},"name":"min","qualname":"::general::real::RealField::min","value":"pub fn min(Self, Self) -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67512,"byte_end":67517,"line_start":36,"line_end":36,"column_start":8,"column_end":13},"name":"atan2","qualname":"::general::real::RealField::atan2","value":"pub fn atan2(Self, Self) -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67554,"byte_end":67556,"line_start":38,"line_end":38,"column_start":8,"column_end":10},"name":"pi","qualname":"::general::real::RealField::pi","value":"pub fn pi() -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67575,"byte_end":67581,"line_start":39,"line_end":39,"column_start":8,"column_end":14},"name":"two_pi","qualname":"::general::real::RealField::two_pi","value":"pub fn two_pi() -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67600,"byte_end":67609,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"frac_pi_2","qualname":"::general::real::RealField::frac_pi_2","value":"pub fn frac_pi_2() -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67628,"byte_end":67637,"line_start":41,"line_end":41,"column_start":8,"column_end":17},"name":"frac_pi_3","qualname":"::general::real::RealField::frac_pi_3","value":"pub fn frac_pi_3() -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67656,"byte_end":67665,"line_start":42,"line_end":42,"column_start":8,"column_end":17},"name":"frac_pi_4","qualname":"::general::real::RealField::frac_pi_4","value":"pub fn frac_pi_4() -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67684,"byte_end":67693,"line_start":43,"line_end":43,"column_start":8,"column_end":17},"name":"frac_pi_6","qualname":"::general::real::RealField::frac_pi_6","value":"pub fn frac_pi_6() -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67712,"byte_end":67721,"line_start":44,"line_end":44,"column_start":8,"column_end":17},"name":"frac_pi_8","qualname":"::general::real::RealField::frac_pi_8","value":"pub fn frac_pi_8() -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67740,"byte_end":67749,"line_start":45,"line_end":45,"column_start":8,"column_end":17},"name":"frac_1_pi","qualname":"::general::real::RealField::frac_1_pi","value":"pub fn frac_1_pi() -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67768,"byte_end":67777,"line_start":46,"line_end":46,"column_start":8,"column_end":17},"name":"frac_2_pi","qualname":"::general::real::RealField::frac_2_pi","value":"pub fn frac_2_pi() -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67796,"byte_end":67810,"line_start":47,"line_end":47,"column_start":8,"column_end":22},"name":"frac_2_sqrt_pi","qualname":"::general::real::RealField::frac_2_sqrt_pi","value":"pub fn frac_2_sqrt_pi() -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67830,"byte_end":67831,"line_start":49,"line_end":49,"column_start":8,"column_end":9},"name":"e","qualname":"::general::real::RealField::e","value":"pub fn e() -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67850,"byte_end":67856,"line_start":50,"line_end":50,"column_start":8,"column_end":14},"name":"log2_e","qualname":"::general::real::RealField::log2_e","value":"pub fn log2_e() -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67875,"byte_end":67882,"line_start":51,"line_end":51,"column_start":8,"column_end":15},"name":"log10_e","qualname":"::general::real::RealField::log10_e","value":"pub fn log10_e() -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67901,"byte_end":67905,"line_start":52,"line_end":52,"column_start":8,"column_end":12},"name":"ln_2","qualname":"::general::real::RealField::ln_2","value":"pub fn ln_2() -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67924,"byte_end":67929,"line_start":53,"line_end":53,"column_start":8,"column_end":13},"name":"ln_10","qualname":"::general::real::RealField::ln_10","value":"pub fn ln_10() -> Self","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2014},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72113,"byte_end":72126,"line_start":24,"line_end":24,"column_start":24,"column_end":37},"name":"AdditiveMagma","qualname":"::general::specialized::AdditiveMagma","value":"AdditiveMagma: AbstractMagma<Additive>","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Algebraic structure specialized for one kind of operation.\n","sig":null,"attributes":[{"value":"/ [Alias] Algebraic structure specialized for one kind of operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":71485,"byte_end":71555,"line_start":12,"line_end":12,"column_start":9,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":2017},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72194,"byte_end":72212,"line_start":25,"line_end":25,"column_start":24,"column_end":42},"name":"AdditiveQuasigroup","qualname":"::general::specialized::AdditiveQuasigroup","value":"AdditiveQuasigroup: AbstractQuasigroup<Additive> + AdditiveMagma + ClosedSub","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Algebraic structure specialized for one kind of operation.\n","sig":null,"attributes":[{"value":"/ [Alias] Algebraic structure specialized for one kind of operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":71485,"byte_end":71555,"line_start":12,"line_end":12,"column_start":9,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":2020},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72298,"byte_end":72310,"line_start":26,"line_end":26,"column_start":24,"column_end":36},"name":"AdditiveLoop","qualname":"::general::specialized::AdditiveLoop","value":"AdditiveLoop: AbstractLoop<Additive> + AdditiveQuasigroup + ClosedNeg + Zero","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Algebraic structure specialized for one kind of operation.\n","sig":null,"attributes":[{"value":"/ [Alias] Algebraic structure specialized for one kind of operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":71485,"byte_end":71555,"line_start":12,"line_end":12,"column_start":9,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":2023},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72412,"byte_end":72429,"line_start":27,"line_end":27,"column_start":24,"column_end":41},"name":"AdditiveSemigroup","qualname":"::general::specialized::AdditiveSemigroup","value":"AdditiveSemigroup: AbstractSemigroup<Additive> + AdditiveMagma + ClosedAdd","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Algebraic structure specialized for one kind of operation.\n","sig":null,"attributes":[{"value":"/ [Alias] Algebraic structure specialized for one kind of operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":71485,"byte_end":71555,"line_start":12,"line_end":12,"column_start":9,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":2026},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72516,"byte_end":72530,"line_start":28,"line_end":28,"column_start":24,"column_end":38},"name":"AdditiveMonoid","qualname":"::general::specialized::AdditiveMonoid","value":"AdditiveMonoid: AbstractMonoid<Additive> + AdditiveSemigroup + Zero","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Algebraic structure specialized for one kind of operation.\n","sig":null,"attributes":[{"value":"/ [Alias] Algebraic structure specialized for one kind of operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":71485,"byte_end":71555,"line_start":12,"line_end":12,"column_start":9,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":2029},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72619,"byte_end":72632,"line_start":29,"line_end":29,"column_start":24,"column_end":37},"name":"AdditiveGroup","qualname":"::general::specialized::AdditiveGroup","value":"AdditiveGroup: AbstractGroup<Additive> + AdditiveLoop + AdditiveMonoid","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Algebraic structure specialized for one kind of operation.\n","sig":null,"attributes":[{"value":"/ [Alias] Algebraic structure specialized for one kind of operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":71485,"byte_end":71555,"line_start":12,"line_end":12,"column_start":9,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":2032},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72727,"byte_end":72747,"line_start":30,"line_end":30,"column_start":24,"column_end":44},"name":"AdditiveGroupAbelian","qualname":"::general::specialized::AdditiveGroupAbelian","value":"AdditiveGroupAbelian: AbstractGroupAbelian<Additive> + AdditiveGroup","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Algebraic structure specialized for one kind of operation.\n","sig":null,"attributes":[{"value":"/ [Alias] Algebraic structure specialized for one kind of operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":71485,"byte_end":71555,"line_start":12,"line_end":12,"column_start":9,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":2035},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72822,"byte_end":72841,"line_start":32,"line_end":32,"column_start":24,"column_end":43},"name":"MultiplicativeMagma","qualname":"::general::specialized::MultiplicativeMagma","value":"MultiplicativeMagma: AbstractMagma<Multiplicative>","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Algebraic structure specialized for one kind of operation.\n","sig":null,"attributes":[{"value":"/ [Alias] Algebraic structure specialized for one kind of operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":71485,"byte_end":71555,"line_start":12,"line_end":12,"column_start":9,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":2038},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72911,"byte_end":72935,"line_start":33,"line_end":33,"column_start":24,"column_end":48},"name":"MultiplicativeQuasigroup","qualname":"::general::specialized::MultiplicativeQuasigroup","value":"MultiplicativeQuasigroup: AbstractQuasigroup<Multiplicative> + MultiplicativeMagma + ClosedDiv","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Algebraic structure specialized for one kind of operation.\n","sig":null,"attributes":[{"value":"/ [Alias] Algebraic structure specialized for one kind of operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":71485,"byte_end":71555,"line_start":12,"line_end":12,"column_start":9,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":2041},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73029,"byte_end":73047,"line_start":34,"line_end":34,"column_start":24,"column_end":42},"name":"MultiplicativeLoop","qualname":"::general::specialized::MultiplicativeLoop","value":"MultiplicativeLoop: AbstractLoop<Multiplicative> + MultiplicativeQuasigroup + One","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Algebraic structure specialized for one kind of operation.\n","sig":null,"attributes":[{"value":"/ [Alias] Algebraic structure specialized for one kind of operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":71485,"byte_end":71555,"line_start":12,"line_end":12,"column_start":9,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":2044},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73146,"byte_end":73169,"line_start":35,"line_end":35,"column_start":24,"column_end":47},"name":"MultiplicativeSemigroup","qualname":"::general::specialized::MultiplicativeSemigroup","value":"MultiplicativeSemigroup: AbstractSemigroup<Multiplicative> + MultiplicativeMagma + ClosedMul","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Algebraic structure specialized for one kind of operation.\n","sig":null,"attributes":[{"value":"/ [Alias] Algebraic structure specialized for one kind of operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":71485,"byte_end":71555,"line_start":12,"line_end":12,"column_start":9,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":2047},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73264,"byte_end":73284,"line_start":36,"line_end":36,"column_start":24,"column_end":44},"name":"MultiplicativeMonoid","qualname":"::general::specialized::MultiplicativeMonoid","value":"MultiplicativeMonoid: AbstractMonoid<Multiplicative> + MultiplicativeSemigroup + One","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Algebraic structure specialized for one kind of operation.\n","sig":null,"attributes":[{"value":"/ [Alias] Algebraic structure specialized for one kind of operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":71485,"byte_end":71555,"line_start":12,"line_end":12,"column_start":9,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":2050},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73380,"byte_end":73399,"line_start":37,"line_end":37,"column_start":24,"column_end":43},"name":"MultiplicativeGroup","qualname":"::general::specialized::MultiplicativeGroup","value":"MultiplicativeGroup: AbstractGroup<Multiplicative> + MultiplicativeLoop + MultiplicativeMonoid","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Algebraic structure specialized for one kind of operation.\n","sig":null,"attributes":[{"value":"/ [Alias] Algebraic structure specialized for one kind of operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":71485,"byte_end":71555,"line_start":12,"line_end":12,"column_start":9,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":2053},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73508,"byte_end":73534,"line_start":38,"line_end":38,"column_start":24,"column_end":50},"name":"MultiplicativeGroupAbelian","qualname":"::general::specialized::MultiplicativeGroupAbelian","value":"MultiplicativeGroupAbelian: AbstractGroupAbelian<Multiplicative> + MultiplicativeGroup","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Algebraic structure specialized for one kind of operation.\n","sig":null,"attributes":[{"value":"/ [Alias] Algebraic structure specialized for one kind of operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":71485,"byte_end":71555,"line_start":12,"line_end":12,"column_start":9,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":2056},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73621,"byte_end":73625,"line_start":40,"line_end":40,"column_start":24,"column_end":28},"name":"Ring","qualname":"::general::specialized::Ring","value":"Ring: AbstractRing + AdditiveGroupAbelian + MultiplicativeMonoid","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Algebraic structure specialized for one kind of operation.\n","sig":null,"attributes":[{"value":"/ [Alias] Algebraic structure specialized for one kind of operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":71873,"byte_end":71943,"line_start":18,"line_end":18,"column_start":9,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":2059},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73730,"byte_end":73745,"line_start":41,"line_end":41,"column_start":24,"column_end":39},"name":"RingCommutative","qualname":"::general::specialized::RingCommutative","value":"RingCommutative: AbstractRingCommutative + Ring","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Algebraic structure specialized for one kind of operation.\n","sig":null,"attributes":[{"value":"/ [Alias] Algebraic structure specialized for one kind of operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":71873,"byte_end":71943,"line_start":18,"line_end":18,"column_start":9,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":2062},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73802,"byte_end":73807,"line_start":42,"line_end":42,"column_start":24,"column_end":29},"name":"Field","qualname":"::general::specialized::Field","value":"Field: AbstractField + RingCommutative + MultiplicativeGroupAbelian","parent":null,"children":[],"decl_id":null,"docs":" [Alias] Algebraic structure specialized for one kind of operation.\n","sig":null,"attributes":[{"value":"/ [Alias] Algebraic structure specialized for one kind of operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":71873,"byte_end":71943,"line_start":18,"line_end":18,"column_start":9,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":857},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73956,"byte_end":73962,"line_start":45,"line_end":45,"column_start":11,"column_end":17},"name":"Module","qualname":"::general::specialized::Module","value":"Module: AbstractModule<AbstractRing = <Self as Module>::Ring> + AdditiveGroupAbelian +\nClosedMul<<Self as Module>::Ring>","parent":null,"children":[{"krate":0,"index":858}],"decl_id":null,"docs":" A module which overloads the `*` and `+` operators.\n","sig":null,"attributes":[{"value":"/ A module which overloads the `*` and `+` operators.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73890,"byte_end":73945,"line_start":44,"line_end":44,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":858},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":74137,"byte_end":74141,"line_start":51,"line_end":51,"column_start":10,"column_end":14},"name":"Ring","qualname":"::general::specialized::Module::Ring","value":"type Ring: RingCommutative;","parent":{"krate":0,"index":857},"children":[],"decl_id":null,"docs":" The underlying scalar field.\n","sig":null,"attributes":[{"value":"/ The underlying scalar field.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":74095,"byte_end":74127,"line_start":50,"line_end":50,"column_start":5,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":870},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":75780,"byte_end":75788,"line_start":24,"line_end":24,"column_start":11,"column_end":19},"name":"SubsetOf","qualname":"::general::subset::SubsetOf","value":"SubsetOf<T>: Sized","parent":null,"children":[{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875}],"decl_id":null,"docs":" Nested sets and conversions between them (using an injective mapping). Useful to work with\n substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever\n possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever\n `SubsetOf` is).","sig":null,"attributes":[{"value":"/ Nested sets and conversions between them (using an injective mapping). Useful to work with","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":74588,"byte_end":74682,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":74683,"byte_end":74779,"line_start":7,"line_end":7,"column_start":1,"column_end":97}},{"value":"/ possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":74780,"byte_end":74872,"line_start":8,"line_end":8,"column_start":1,"column_end":93}},{"value":"/ `SubsetOf` is).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":74873,"byte_end":74892,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":74893,"byte_end":74896,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The notion of \"nested sets\" is very broad and applies to what the types are _supposed to","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":74897,"byte_end":74989,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ represent_, independently from their actual implementation details and limitations. For","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":74990,"byte_end":75081,"line_start":12,"line_end":12,"column_start":1,"column_end":92}},{"value":"/ example:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":75082,"byte_end":75094,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/ * f32 and f64 are both supposed to represent reals and are thus considered equal (even if in","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":75095,"byte_end":75191,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ practice f64 has more elements).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":75192,"byte_end":75228,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"/ * u32 and i8 are respectively supposed to represent natural and relative numbers. Thus, u32 is","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":75229,"byte_end":75327,"line_start":16,"line_end":16,"column_start":1,"column_end":99}},{"value":"/ a subset of i8.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":75328,"byte_end":75347,"line_start":17,"line_end":17,"column_start":1,"column_end":20}},{"value":"/ * A quaternion and a 3x3 orthogonal matrix with unit determinant are both sets of rotations.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":75348,"byte_end":75444,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ They can thus be considered equal.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":75445,"byte_end":75483,"line_start":19,"line_end":19,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":75484,"byte_end":75487,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ In other words, implementation details due to machine limitations are ignored (otherwise we","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":75488,"byte_end":75583,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"/ could not even, e.g., convert a u64 to an i64). If considering those limitations are","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":75584,"byte_end":75672,"line_start":22,"line_end":22,"column_start":1,"column_end":89}},{"value":"/ important, other crates allowing you to query the limitations of given types should be used.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":75673,"byte_end":75769,"line_start":23,"line_end":23,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":75894,"byte_end":75905,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"to_superset","qualname":"::general::subset::SubsetOf::to_superset","value":"pub fn to_superset(&Self) -> T","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" The inclusion map: converts `self` to the equivalent element of its superset.\n","sig":null,"attributes":[{"value":"/ The inclusion map: converts `self` to the equivalent element of its superset.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":75805,"byte_end":75886,"line_start":25,"line_end":25,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":76121,"byte_end":76134,"line_start":32,"line_end":32,"column_start":8,"column_end":21},"name":"from_superset","qualname":"::general::subset::SubsetOf::from_superset","value":"pub fn from_superset(&T) -> Option<Self>","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" The inverse inclusion map: attempts to construct `self` from the equivalent element of its\n superset.","sig":null,"attributes":[{"value":"/ The inverse inclusion map: attempts to construct `self` from the equivalent element of its","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":75924,"byte_end":76018,"line_start":28,"line_end":28,"column_start":5,"column_end":99}},{"value":"/ superset.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":76023,"byte_end":76036,"line_start":29,"line_end":29,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":76041,"byte_end":76044,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Must return `None` if `element` has no equivalent in `Self`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":76049,"byte_end":76113,"line_start":31,"line_end":31,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":76440,"byte_end":76463,"line_start":41,"line_end":41,"column_start":15,"column_end":38},"name":"from_superset_unchecked","qualname":"::general::subset::SubsetOf::from_superset_unchecked","value":"pub unsafe fn from_superset_unchecked(&T) -> Self","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.\n","sig":null,"attributes":[{"value":"/ Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":76330,"byte_end":76425,"line_start":40,"line_end":40,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":76590,"byte_end":76602,"line_start":44,"line_end":44,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"::general::subset::SubsetOf::is_in_subset","value":"pub fn is_in_subset(&T) -> bool","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" Checks if `element` is actually part of the subset `Self` (and can be converted to it).\n","sig":null,"attributes":[{"value":"/ Checks if `element` is actually part of the subset `Self` (and can be converted to it).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":76491,"byte_end":76582,"line_start":43,"line_end":43,"column_start":5,"column_end":96}}]},{"kind":"Trait","id":{"krate":0,"index":876},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77774,"byte_end":77784,"line_start":64,"line_end":64,"column_start":11,"column_end":21},"name":"SupersetOf","qualname":"::general::subset::SupersetOf","value":"SupersetOf<T>: Sized","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881}],"decl_id":null,"docs":" Nested sets and conversions between them. Useful to work with substructures. It is preferable\n to implement the `SupersetOf` trait instead of `SubsetOf` whenever possible (because\n `SupersetOf` is automatically implemented whenever `SubsetOf` is.","sig":null,"attributes":[{"value":"/ Nested sets and conversions between them. Useful to work with substructures. It is preferable","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":76628,"byte_end":76725,"line_start":47,"line_end":47,"column_start":1,"column_end":98}},{"value":"/ to implement the `SupersetOf` trait instead of `SubsetOf` whenever possible (because","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":76726,"byte_end":76814,"line_start":48,"line_end":48,"column_start":1,"column_end":89}},{"value":"/ `SupersetOf` is automatically implemented whenever `SubsetOf` is.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":76815,"byte_end":76884,"line_start":49,"line_end":49,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":76885,"byte_end":76888,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The notion of \"nested sets\" is very broad and applies to what the types are _supposed to","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":76889,"byte_end":76981,"line_start":51,"line_end":51,"column_start":1,"column_end":93}},{"value":"/ represent_, independently from their actual implementation details and limitations. For","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":76982,"byte_end":77073,"line_start":52,"line_end":52,"column_start":1,"column_end":92}},{"value":"/ example:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77074,"byte_end":77086,"line_start":53,"line_end":53,"column_start":1,"column_end":13}},{"value":"/ * f32 and f64 are both supposed to represent reals and are thus considered equal (even if in","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77087,"byte_end":77183,"line_start":54,"line_end":54,"column_start":1,"column_end":97}},{"value":"/ practice f64 has more elements).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77184,"byte_end":77220,"line_start":55,"line_end":55,"column_start":1,"column_end":37}},{"value":"/ * u32 and i8 are respectively supposed to represent natural and relative numbers. Thus, i8 is","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77221,"byte_end":77318,"line_start":56,"line_end":56,"column_start":1,"column_end":98}},{"value":"/ a superset of u32.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77319,"byte_end":77341,"line_start":57,"line_end":57,"column_start":1,"column_end":23}},{"value":"/ * A quaternion and a 3x3 orthogonal matrix with unit determinant are both sets of rotations.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77342,"byte_end":77438,"line_start":58,"line_end":58,"column_start":1,"column_end":97}},{"value":"/ They can thus be considered equal.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77439,"byte_end":77477,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77478,"byte_end":77481,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ In other words, implementation details due to machine limitations are ignored (otherwise we","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77482,"byte_end":77577,"line_start":61,"line_end":61,"column_start":1,"column_end":96}},{"value":"/ could not even, e.g., convert a u64 to an i64). If considering those limitations are","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77578,"byte_end":77666,"line_start":62,"line_end":62,"column_start":1,"column_end":89}},{"value":"/ important, other crates allowing you to query the limitations of given types should be used.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77667,"byte_end":77763,"line_start":63,"line_end":63,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77998,"byte_end":78007,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"to_subset","qualname":"::general::subset::SupersetOf::to_subset","value":"pub fn to_subset(&Self) -> Option<T>","parent":{"krate":0,"index":876},"children":[],"decl_id":null,"docs":" The inverse inclusion map: attempts to construct `self` from the equivalent element of its\n superset.","sig":null,"attributes":[{"value":"/ The inverse inclusion map: attempts to construct `self` from the equivalent element of its","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77801,"byte_end":77895,"line_start":65,"line_end":65,"column_start":5,"column_end":99}},{"value":"/ superset.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77900,"byte_end":77913,"line_start":66,"line_end":66,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77918,"byte_end":77921,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Must return `None` if `element` has no equivalent in `Self`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77926,"byte_end":77990,"line_start":68,"line_end":68,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":78267,"byte_end":78279,"line_start":78,"line_end":78,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"::general::subset::SupersetOf::is_in_subset","value":"pub fn is_in_subset(&Self) -> bool","parent":{"krate":0,"index":876},"children":[],"decl_id":null,"docs":" Checks if `self` is actually part of its subset `T` (and can be converted to it).\n","sig":null,"attributes":[{"value":"/ Checks if `self` is actually part of its subset `T` (and can be converted to it).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":78174,"byte_end":78259,"line_start":77,"line_end":77,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":78409,"byte_end":78428,"line_start":81,"line_end":81,"column_start":15,"column_end":34},"name":"to_subset_unchecked","qualname":"::general::subset::SupersetOf::to_subset_unchecked","value":"pub unsafe fn to_subset_unchecked(&Self) -> T","parent":{"krate":0,"index":876},"children":[],"decl_id":null,"docs":" Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.\n","sig":null,"attributes":[{"value":"/ Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":78301,"byte_end":78394,"line_start":80,"line_end":80,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":78536,"byte_end":78547,"line_start":84,"line_end":84,"column_start":8,"column_end":19},"name":"from_subset","qualname":"::general::subset::SupersetOf::from_subset","value":"pub fn from_subset(&T) -> Self","parent":{"krate":0,"index":876},"children":[],"decl_id":null,"docs":" The inclusion map: converts `self` to the equivalent element of its superset.\n","sig":null,"attributes":[{"value":"/ The inclusion map: converts `self` to the equivalent element of its superset.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":78447,"byte_end":78528,"line_start":83,"line_end":83,"column_start":5,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":929},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":83319,"byte_end":83331,"line_start":30,"line_end":30,"column_start":11,"column_end":23},"name":"AbstractRing","qualname":"::general::two_operators::AbstractRing","value":"AbstractRing<A: Operator = Additive, M: Operator = Multiplicative>: AbstractGroupAbelian<A> + AbstractMonoid<M>","parent":null,"children":[{"krate":0,"index":932},{"krate":0,"index":936}],"decl_id":null,"docs":" A **ring** is the combination of an Abelian group and a multiplicative monoid structure.","sig":null,"attributes":[{"value":"/ A **ring** is the combination of an Abelian group and a multiplicative monoid structure.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":82521,"byte_end":82613,"line_start":12,"line_end":12,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":82614,"byte_end":82617,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ A ring is equipped with:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":82618,"byte_end":82646,"line_start":14,"line_end":14,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":82647,"byte_end":82650,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ * An abstract operator (usually the addition, \"+\") that fulfills the constraints of an Abelian group.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":82651,"byte_end":82756,"line_start":16,"line_end":16,"column_start":1,"column_end":106}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":82757,"byte_end":82760,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/     *An Abelian group is a set with a closed commutative and associative addition with the divisibility property and an identity element.*","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":82761,"byte_end":82903,"line_start":18,"line_end":18,"column_start":1,"column_end":143}},{"value":"/ * A second abstract operator (usually the multiplication, \"×\") that fulfills the constraints of a monoid.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":82904,"byte_end":83014,"line_start":19,"line_end":19,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":83015,"byte_end":83018,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/     *A set equipped with a closed associative multiplication with the divisibility property and an identity element.*","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":83019,"byte_end":83140,"line_start":21,"line_end":21,"column_start":1,"column_end":122}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":83141,"byte_end":83144,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The multiplication is distributive over the addition:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":83145,"byte_end":83202,"line_start":23,"line_end":23,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":83203,"byte_end":83206,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Distributivity","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":83207,"byte_end":83227,"line_start":25,"line_end":25,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":83228,"byte_end":83231,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ~~~notrust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":83232,"byte_end":83246,"line_start":27,"line_end":27,"column_start":1,"column_end":15}},{"value":"/ a, b, c ∈ Self, a × (b + c) = a × b + a × c.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":83247,"byte_end":83300,"line_start":28,"line_end":28,"column_start":1,"column_end":49}},{"value":"/ ~~~","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":83301,"byte_end":83308,"line_start":29,"line_end":29,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":83615,"byte_end":83655,"line_start":35,"line_end":35,"column_start":8,"column_end":48},"name":"prop_mul_and_add_are_distributive_approx","qualname":"::general::two_operators::AbstractRing::prop_mul_and_add_are_distributive_approx","value":"pub fn prop_mul_and_add_are_distributive_approx((Self, Self, Self)) -> bool\nwhere Self: RelativeEq","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Returns `true` if the multiplication and addition operators are distributive for\n the given argument tuple. Approximate equality is used for verifications.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the multiplication and addition operators are distributive for","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":83441,"byte_end":83525,"line_start":33,"line_end":33,"column_start":5,"column_end":89}},{"value":"/ the given argument tuple. Approximate equality is used for verifications.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":83530,"byte_end":83607,"line_start":34,"line_end":34,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":84239,"byte_end":84272,"line_start":52,"line_end":52,"column_start":8,"column_end":41},"name":"prop_mul_and_add_are_distributive","qualname":"::general::two_operators::AbstractRing::prop_mul_and_add_are_distributive","value":"pub fn prop_mul_and_add_are_distributive((Self, Self, Self)) -> bool where\nSelf: Eq","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Returns `true` if the multiplication and addition operators are distributive for\n the given argument tuple.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the multiplication and addition operators are distributive for","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":84113,"byte_end":84197,"line_start":50,"line_end":50,"column_start":5,"column_end":89}},{"value":"/ the given argument tuple.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":84202,"byte_end":84231,"line_start":51,"line_end":51,"column_start":5,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":941},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":86664,"byte_end":86687,"line_start":129,"line_end":129,"column_start":11,"column_end":34},"name":"AbstractRingCommutative","qualname":"::general::two_operators::AbstractRingCommutative","value":"AbstractRingCommutative<A: Operator = Additive, M: Operator = Multiplicative>: AbstractRing<A, M>","parent":null,"children":[{"krate":0,"index":944},{"krate":0,"index":947}],"decl_id":null,"docs":" A ring with a commutative multiplication.","sig":null,"attributes":[{"value":"/ A ring with a commutative multiplication.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":86244,"byte_end":86289,"line_start":119,"line_end":119,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":86290,"byte_end":86293,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ *A **commutative ring** is a set with two binary operations: a closed commutative and associative with the divisibility property and an identity element,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":86294,"byte_end":86451,"line_start":121,"line_end":121,"column_start":1,"column_end":158}},{"value":"/ and another closed associative and **commutative** with the divisibility property and an identity element.*","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":86452,"byte_end":86563,"line_start":122,"line_end":122,"column_start":1,"column_end":112}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":86564,"byte_end":86567,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ # Commutativity","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":86568,"byte_end":86587,"line_start":124,"line_end":124,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":86588,"byte_end":86591,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ ```notrust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":86592,"byte_end":86606,"line_start":126,"line_end":126,"column_start":1,"column_end":15}},{"value":"/ ∀ a, b ∈ Self, a × b = b × a","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":86607,"byte_end":86645,"line_start":127,"line_end":127,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":86646,"byte_end":86653,"line_start":128,"line_end":128,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":86930,"byte_end":86960,"line_start":134,"line_end":134,"column_start":8,"column_end":38},"name":"prop_mul_is_commutative_approx","qualname":"::general::two_operators::AbstractRingCommutative::prop_mul_is_commutative_approx","value":"pub fn prop_mul_is_commutative_approx((Self, Self)) -> bool where\nSelf: RelativeEq","parent":{"krate":0,"index":941},"children":[],"decl_id":null,"docs":" Returns `true` if the multiplication operator is commutative for the given argument tuple.\n Approximate equality is used for verifications.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the multiplication operator is commutative for the given argument tuple.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":86772,"byte_end":86866,"line_start":132,"line_end":132,"column_start":5,"column_end":99}},{"value":"/ Approximate equality is used for verifications.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":86871,"byte_end":86922,"line_start":133,"line_end":133,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":87313,"byte_end":87336,"line_start":146,"line_end":146,"column_start":8,"column_end":31},"name":"prop_mul_is_commutative","qualname":"::general::two_operators::AbstractRingCommutative::prop_mul_is_commutative","value":"pub fn prop_mul_is_commutative((Self, Self)) -> bool where Self: Eq","parent":{"krate":0,"index":941},"children":[],"decl_id":null,"docs":" Returns `true` if the multiplication operator is commutative for the given argument tuple.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the multiplication operator is commutative for the given argument tuple.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":87211,"byte_end":87305,"line_start":145,"line_end":145,"column_start":5,"column_end":99}}]},{"kind":"Trait","id":{"krate":0,"index":951},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":89514,"byte_end":89527,"line_start":213,"line_end":213,"column_start":11,"column_end":24},"name":"AbstractField","qualname":"::general::two_operators::AbstractField","value":"AbstractField<A: Operator = Additive, M: Operator = Multiplicative>: AbstractRingCommutative<A, M> + AbstractGroupAbelian<M>","parent":null,"children":[],"decl_id":null,"docs":" A field is a commutative ring, and an Abelian group under both operators.","sig":null,"attributes":[{"value":"/ A field is a commutative ring, and an Abelian group under both operators.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":89124,"byte_end":89201,"line_start":208,"line_end":208,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":89202,"byte_end":89205,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ *A **field** is a set with two binary operations, an addition and a multiplication, which are both closed, commutative, associative","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":89206,"byte_end":89341,"line_start":210,"line_end":210,"column_start":1,"column_end":136}},{"value":"/ possess the divisibility property and an identity element, noted 0 and 1 respectively. Furthermore the multiplication is distributive","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":89342,"byte_end":89479,"line_start":211,"line_end":211,"column_start":1,"column_end":138}},{"value":"/ over the addition.*","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":89480,"byte_end":89503,"line_start":212,"line_end":212,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":961},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wrapper","qualname":"::general::wrapper","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","parent":null,"children":[{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":976},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":986},{"krate":0,"index":989},{"krate":0,"index":992},{"krate":0,"index":995},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1002},{"krate":0,"index":1005},{"krate":0,"index":1008},{"krate":0,"index":1011},{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1018},{"krate":0,"index":2783},{"krate":0,"index":2790},{"krate":0,"index":1021},{"krate":0,"index":1025},{"krate":0,"index":1030},{"krate":0,"index":1035},{"krate":0,"index":1040},{"krate":0,"index":1045},{"krate":0,"index":1050},{"krate":0,"index":1057},{"krate":0,"index":1063},{"krate":0,"index":1069},{"krate":0,"index":1075},{"krate":0,"index":1081},{"krate":0,"index":1087},{"krate":0,"index":1093},{"krate":0,"index":1098}],"decl_id":null,"docs":" Wrappers that attach an algebraic structure with a value type.\n","sig":null,"attributes":[{"value":"/ Wrappers that attach an algebraic structure with a value type.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":92162,"byte_end":92228,"line_start":1,"line_end":1,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2783},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":92643,"byte_end":92650,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"name":"Wrapper","qualname":"::general::wrapper::Wrapper","value":"Wrapper { val }","parent":null,"children":[{"krate":0,"index":2787},{"krate":0,"index":2788},{"krate":0,"index":2789}],"decl_id":null,"docs":" Wrapper that allows to use operators on algebraic types.\n","sig":null,"attributes":[{"value":"/ Wrapper that allows to use operators on algebraic types.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":92554,"byte_end":92614,"line_start":14,"line_end":14,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":2787},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":92670,"byte_end":92673,"line_start":17,"line_end":17,"column_start":9,"column_end":12},"name":"val","qualname":"::general::wrapper::Wrapper::val","value":"T","parent":{"krate":0,"index":2783},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":93265,"byte_end":93268,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<Wrapper<T, A, M>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1104},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":12476,"byte_end":12480,"line_start":198,"line_end":198,"column_start":11,"column_end":15},"name":"Real","qualname":"::general::Real","value":"Real: RealField","parent":null,"children":[],"decl_id":null,"docs":" The field of reals. This has been renamed to `RealField`.\n","sig":null,"attributes":[{"value":"deprecated(note = \"This has been renamed `RealField`.\")","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":12345,"byte_end":12403,"line_start":196,"line_end":196,"column_start":1,"column_end":59}},{"value":"/ The field of reals. This has been renamed to `RealField`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":12404,"byte_end":12465,"line_start":197,"line_end":197,"column_start":1,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":1107},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"linear","qualname":"::linear","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","parent":null,"children":[{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1112},{"krate":0,"index":1115},{"krate":0,"index":1118},{"krate":0,"index":1121},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1128},{"krate":0,"index":1131},{"krate":0,"index":1134},{"krate":0,"index":1137},{"krate":0,"index":1140},{"krate":0,"index":1143},{"krate":0,"index":1146},{"krate":0,"index":1149},{"krate":0,"index":1152},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1159},{"krate":0,"index":1162},{"krate":0,"index":1165},{"krate":0,"index":1168},{"krate":0,"index":1171},{"krate":0,"index":1174},{"krate":0,"index":1177},{"krate":0,"index":1268},{"krate":0,"index":1316},{"krate":0,"index":1452}],"decl_id":null,"docs":" Traits dedicated to linear algebra.\n","sig":null,"attributes":[{"value":"/ Traits dedicated to linear algebra.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/mod.rs","byte_start":95949,"byte_end":95988,"line_start":1,"line_end":1,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":1285},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":99851,"byte_end":99857,"line_start":7,"line_end":7,"column_start":11,"column_end":17},"name":"Matrix","qualname":"::linear::matrix::Matrix","value":"Matrix: Sized + Clone + Mul<<Self as Matrix>::Row, Output = <Self as Matrix>::Column>","parent":null,"children":[{"krate":0,"index":1286},{"krate":0,"index":1287},{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1295},{"krate":0,"index":1296}],"decl_id":null,"docs":" The space of all matrices.\n","sig":null,"attributes":[{"value":"/ The space of all matrices.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":99810,"byte_end":99840,"line_start":6,"line_end":6,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":1286},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":99982,"byte_end":99987,"line_start":11,"line_end":11,"column_start":10,"column_end":15},"name":"Field","qualname":"::linear::matrix::Matrix::Field","value":"type Field: Field;","parent":{"krate":0,"index":1285},"children":[],"decl_id":null,"docs":" The underlying field.\n","sig":null,"attributes":[{"value":"/ The underlying field.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":99947,"byte_end":99972,"line_start":10,"line_end":10,"column_start":5,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":1287},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100047,"byte_end":100050,"line_start":14,"line_end":14,"column_start":10,"column_end":13},"name":"Row","qualname":"::linear::matrix::Matrix::Row","value":"type Row: FiniteDimVectorSpace<Field = Self::Field>;","parent":{"krate":0,"index":1285},"children":[],"decl_id":null,"docs":" The type of rows of this matrix.\n","sig":null,"attributes":[{"value":"/ The type of rows of this matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100001,"byte_end":100037,"line_start":13,"line_end":13,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1288},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100149,"byte_end":100155,"line_start":17,"line_end":17,"column_start":10,"column_end":16},"name":"Column","qualname":"::linear::matrix::Matrix::Column","value":"type Column: FiniteDimVectorSpace<Field = Self::Field>;","parent":{"krate":0,"index":1285},"children":[],"decl_id":null,"docs":" The type of columns of this matrix.\n","sig":null,"attributes":[{"value":"/ The type of columns of this matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100100,"byte_end":100139,"line_start":16,"line_end":16,"column_start":5,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":1289},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100253,"byte_end":100262,"line_start":20,"line_end":20,"column_start":10,"column_end":19},"name":"Transpose","qualname":"::linear::matrix::Matrix::Transpose","value":"type Transpose: Matrix<Field = Self::Field, Row = Self::Column, Column = Self::Row>;","parent":{"krate":0,"index":1285},"children":[],"decl_id":null,"docs":" The type of the transposed matrix.\n","sig":null,"attributes":[{"value":"/ The type of the transposed matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100205,"byte_end":100243,"line_start":19,"line_end":19,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100384,"byte_end":100389,"line_start":23,"line_end":23,"column_start":8,"column_end":13},"name":"nrows","qualname":"::linear::matrix::Matrix::nrows","value":"pub fn nrows(&Self) -> usize","parent":{"krate":0,"index":1285},"children":[],"decl_id":null,"docs":" The number of rows of this matrix.\n","sig":null,"attributes":[{"value":"/ The number of rows of this matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100338,"byte_end":100376,"line_start":22,"line_end":22,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100461,"byte_end":100469,"line_start":26,"line_end":26,"column_start":8,"column_end":16},"name":"ncolumns","qualname":"::linear::matrix::Matrix::ncolumns","value":"pub fn ncolumns(&Self) -> usize","parent":{"krate":0,"index":1285},"children":[],"decl_id":null,"docs":" The number of columns of this matrix.\n","sig":null,"attributes":[{"value":"/ The number of columns of this matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100412,"byte_end":100453,"line_start":25,"line_end":25,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1292},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100532,"byte_end":100535,"line_start":29,"line_end":29,"column_start":8,"column_end":11},"name":"row","qualname":"::linear::matrix::Matrix::row","value":"pub fn row(&Self, usize) -> Self::Row","parent":{"krate":0,"index":1285},"children":[],"decl_id":null,"docs":" The i-th row of this matrix.\n","sig":null,"attributes":[{"value":"/ The i-th row of this matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100492,"byte_end":100524,"line_start":28,"line_end":28,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1293},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100615,"byte_end":100621,"line_start":32,"line_end":32,"column_start":8,"column_end":14},"name":"column","qualname":"::linear::matrix::Matrix::column","value":"pub fn column(&Self, usize) -> Self::Column","parent":{"krate":0,"index":1285},"children":[],"decl_id":null,"docs":" The i-th column of this matrix.\n","sig":null,"attributes":[{"value":"/ The i-th column of this matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100572,"byte_end":100607,"line_start":31,"line_end":31,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100763,"byte_end":100776,"line_start":35,"line_end":35,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::linear::matrix::Matrix::get_unchecked","value":"pub unsafe fn get_unchecked(&Self, usize, usize) -> Self::Field","parent":{"krate":0,"index":1285},"children":[],"decl_id":null,"docs":" Gets the component at row `i` and column `j` of this matrix without bound checking.\n","sig":null,"attributes":[{"value":"/ Gets the component at row `i` and column `j` of this matrix without bound checking.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100661,"byte_end":100748,"line_start":34,"line_end":34,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100897,"byte_end":100900,"line_start":38,"line_end":38,"column_start":8,"column_end":11},"name":"get","qualname":"::linear::matrix::Matrix::get","value":"pub fn get(&Self, usize, usize) -> Self::Field","parent":{"krate":0,"index":1285},"children":[],"decl_id":null,"docs":" Gets the component at row `i` and column `j` of this matrix.\n","sig":null,"attributes":[{"value":"/ Gets the component at row `i` and column `j` of this matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":100825,"byte_end":100889,"line_start":37,"line_end":37,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":101169,"byte_end":101178,"line_start":48,"line_end":48,"column_start":8,"column_end":17},"name":"transpose","qualname":"::linear::matrix::Matrix::transpose","value":"pub fn transpose(&Self) -> Self::Transpose","parent":{"krate":0,"index":1285},"children":[],"decl_id":null,"docs":" Transposes this matrix.\n","sig":null,"attributes":[{"value":"/ Transposes this matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":101134,"byte_end":101161,"line_start":47,"line_end":47,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":1297},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":101322,"byte_end":101331,"line_start":52,"line_end":52,"column_start":11,"column_end":20},"name":"MatrixMut","qualname":"::linear::matrix::MatrixMut","value":"MatrixMut: Matrix","parent":null,"children":[{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1303}],"decl_id":null,"docs":" The space of all matrices that are stable under modifications of its components, rows and columns.\n","sig":null,"attributes":[{"value":"/ The space of all matrices that are stable under modifications of its components, rows and columns.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":101209,"byte_end":101311,"line_start":51,"line_end":51,"column_start":1,"column_end":103}}]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":101405,"byte_end":101412,"line_start":55,"line_end":55,"column_start":8,"column_end":15},"name":"set_row","qualname":"::linear::matrix::MatrixMut::set_row","value":"pub fn set_row(&Self, usize, &Self::Row) -> Self","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Sets the i-th row of this matrix.\n","sig":null,"attributes":[{"value":"/ Sets the i-th row of this matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":101346,"byte_end":101383,"line_start":53,"line_end":53,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":101388,"byte_end":101397,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1299},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":101603,"byte_end":101614,"line_start":62,"line_end":62,"column_start":8,"column_end":19},"name":"set_row_mut","qualname":"::linear::matrix::MatrixMut::set_row_mut","value":"pub fn set_row_mut(&mut Self, usize, &Self::Row)","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" In-place sets the i-th row of this matrix.\n","sig":null,"attributes":[{"value":"/ In-place sets the i-th row of this matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":101549,"byte_end":101595,"line_start":61,"line_end":61,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1300},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":101718,"byte_end":101728,"line_start":66,"line_end":66,"column_start":8,"column_end":18},"name":"set_column","qualname":"::linear::matrix::MatrixMut::set_column","value":"pub fn set_column(&Self, usize, &Self::Column) -> Self","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Sets the i-th col of this matrix.\n","sig":null,"attributes":[{"value":"/ Sets the i-th col of this matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":101659,"byte_end":101696,"line_start":64,"line_end":64,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":101701,"byte_end":101710,"line_start":65,"line_end":65,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1301},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":101925,"byte_end":101939,"line_start":73,"line_end":73,"column_start":8,"column_end":22},"name":"set_column_mut","qualname":"::linear::matrix::MatrixMut::set_column_mut","value":"pub fn set_column_mut(&mut Self, usize, &Self::Column)","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" In-place sets the i-th col of this matrix.\n","sig":null,"attributes":[{"value":"/ In-place sets the i-th col of this matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":101871,"byte_end":101917,"line_start":72,"line_end":72,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":102089,"byte_end":102102,"line_start":76,"line_end":76,"column_start":15,"column_end":28},"name":"set_unchecked","qualname":"::linear::matrix::MatrixMut::set_unchecked","value":"pub unsafe fn set_unchecked(&mut Self, usize, usize, Self::Field)","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Sets the component at row `i` and column `j` of this matrix without bound checking.\n","sig":null,"attributes":[{"value":"/ Sets the component at row `i` and column `j` of this matrix without bound checking.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":101987,"byte_end":102074,"line_start":75,"line_end":75,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":102230,"byte_end":102233,"line_start":79,"line_end":79,"column_start":8,"column_end":11},"name":"set","qualname":"::linear::matrix::MatrixMut::set","value":"pub fn set(&mut Self, usize, usize, Self::Field)","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Sets the component at row `i` and column `j` of this matrix.\n","sig":null,"attributes":[{"value":"/ Sets the component at row `i` and column `j` of this matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":102158,"byte_end":102222,"line_start":78,"line_end":78,"column_start":5,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":1304},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":102557,"byte_end":102569,"line_start":90,"line_end":90,"column_start":11,"column_end":23},"name":"SquareMatrix","qualname":"::linear::matrix::SquareMatrix","value":"SquareMatrix: Matrix<Row = <Self as SquareMatrix>::Vector, Column =\n<Self as SquareMatrix>::Vector, Transpose = <Self as SquareMatrix>::Vector> +\nMultiplicativeMonoid","parent":null,"children":[{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310}],"decl_id":null,"docs":" The monoid of all square matrices, including non-inversible ones.\n","sig":null,"attributes":[{"value":"/ The monoid of all square matrices, including non-inversible ones.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":102477,"byte_end":102546,"line_start":89,"line_end":89,"column_start":1,"column_end":70}}]},{"kind":"Type","id":{"krate":0,"index":1305},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":102807,"byte_end":102813,"line_start":98,"line_end":98,"column_start":10,"column_end":16},"name":"Vector","qualname":"::linear::matrix::SquareMatrix::Vector","value":"type Vector: FiniteDimVectorSpace<Field = Self::Field>;","parent":{"krate":0,"index":1304},"children":[],"decl_id":null,"docs":" The type of rows, column, and diagonal of this matrix.\n","sig":null,"attributes":[{"value":"/ The type of rows, column, and diagonal of this matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":102739,"byte_end":102797,"line_start":97,"line_end":97,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":102903,"byte_end":102911,"line_start":101,"line_end":101,"column_start":8,"column_end":16},"name":"diagonal","qualname":"::linear::matrix::SquareMatrix::diagonal","value":"pub fn diagonal(&Self) -> Self::Vector","parent":{"krate":0,"index":1304},"children":[],"decl_id":null,"docs":" The diagonal of this matrix.\n","sig":null,"attributes":[{"value":"/ The diagonal of this matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":102863,"byte_end":102895,"line_start":100,"line_end":100,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":102984,"byte_end":102995,"line_start":104,"line_end":104,"column_start":8,"column_end":19},"name":"determinant","qualname":"::linear::matrix::SquareMatrix::determinant","value":"pub fn determinant(&Self) -> Self::Field","parent":{"krate":0,"index":1304},"children":[],"decl_id":null,"docs":" The determinant of this matrix.\n","sig":null,"attributes":[{"value":"/ The determinant of this matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":102941,"byte_end":102976,"line_start":103,"line_end":103,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103146,"byte_end":103157,"line_start":109,"line_end":109,"column_start":8,"column_end":19},"name":"try_inverse","qualname":"::linear::matrix::SquareMatrix::try_inverse","value":"pub fn try_inverse(&Self) -> Option<Self>","parent":{"krate":0,"index":1304},"children":[],"decl_id":null,"docs":" Attempts to two_sided_inverse `self`.\n","sig":null,"attributes":[{"value":"/ Attempts to two_sided_inverse `self`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103083,"byte_end":103124,"line_start":107,"line_end":107,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103129,"byte_end":103138,"line_start":108,"line_end":108,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103257,"byte_end":103266,"line_start":113,"line_end":113,"column_start":8,"column_end":17},"name":"dimension","qualname":"::linear::matrix::SquareMatrix::dimension","value":"pub fn dimension(&Self) -> usize","parent":{"krate":0,"index":1304},"children":[],"decl_id":null,"docs":" The number of rows or column of this matrix.\n","sig":null,"attributes":[{"value":"/ The number of rows or column of this matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103187,"byte_end":103235,"line_start":111,"line_end":111,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103240,"byte_end":103249,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103366,"byte_end":103379,"line_start":119,"line_end":119,"column_start":8,"column_end":21},"name":"transpose_mut","qualname":"::linear::matrix::SquareMatrix::transpose_mut","value":"pub fn transpose_mut(&mut Self)","parent":{"krate":0,"index":1304},"children":[],"decl_id":null,"docs":" In-place transposition.\n","sig":null,"attributes":[{"value":"/ In-place transposition.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103317,"byte_end":103344,"line_start":117,"line_end":117,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103349,"byte_end":103358,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":1311},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103543,"byte_end":103558,"line_start":125,"line_end":125,"column_start":11,"column_end":26},"name":"SquareMatrixMut","qualname":"::linear::matrix::SquareMatrixMut","value":"SquareMatrixMut: SquareMatrix + MatrixMut<Row = <Self as SquareMatrix>::Vector, Column =\n<Self as SquareMatrix>::Vector, Transpose = <Self as SquareMatrix>::Vector>","parent":null,"children":[{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1314}],"decl_id":null,"docs":" The monoid of all mutable square matrices that are stable under modification of its diagonal.\n","sig":null,"attributes":[{"value":"/ The monoid of all mutable square matrices that are stable under modification of its diagonal.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103435,"byte_end":103532,"line_start":124,"line_end":124,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103772,"byte_end":103785,"line_start":134,"line_end":134,"column_start":8,"column_end":21},"name":"from_diagonal","qualname":"::linear::matrix::SquareMatrixMut::from_diagonal","value":"pub fn from_diagonal(&Self::Vector) -> Self","parent":{"krate":0,"index":1311},"children":[],"decl_id":null,"docs":" Constructs a new diagonal matrix.\n","sig":null,"attributes":[{"value":"/ Constructs a new diagonal matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103727,"byte_end":103764,"line_start":133,"line_end":133,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1313},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103872,"byte_end":103884,"line_start":138,"line_end":138,"column_start":8,"column_end":20},"name":"set_diagonal","qualname":"::linear::matrix::SquareMatrixMut::set_diagonal","value":"pub fn set_diagonal(&Self, &Self::Vector) -> Self","parent":{"krate":0,"index":1311},"children":[],"decl_id":null,"docs":" Sets the matrix diagonal.\n","sig":null,"attributes":[{"value":"/ Sets the matrix diagonal.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103821,"byte_end":103850,"line_start":136,"line_end":136,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103855,"byte_end":103864,"line_start":137,"line_end":137,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1314},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":104064,"byte_end":104080,"line_start":145,"line_end":145,"column_start":8,"column_end":24},"name":"set_diagonal_mut","qualname":"::linear::matrix::SquareMatrixMut::set_diagonal_mut","value":"pub fn set_diagonal_mut(&mut Self, &Self::Vector)","parent":{"krate":0,"index":1311},"children":[],"decl_id":null,"docs":" In-place sets the matrix diagonal.\n","sig":null,"attributes":[{"value":"/ In-place sets the matrix diagonal.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":104018,"byte_end":104056,"line_start":144,"line_end":144,"column_start":5,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":1315},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":104234,"byte_end":104256,"line_start":150,"line_end":150,"column_start":11,"column_end":33},"name":"InversibleSquareMatrix","qualname":"::linear::matrix::InversibleSquareMatrix","value":"InversibleSquareMatrix: SquareMatrix + MultiplicativeGroup","parent":null,"children":[],"decl_id":null,"docs":" The group of inversible matrix. Commonly known as the General Linear group `GL(n)` by\n algebraists.\n","sig":null,"attributes":[{"value":"/ The group of inversible matrix. Commonly known as the General Linear group `GL(n)` by","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":104117,"byte_end":104206,"line_start":148,"line_end":148,"column_start":1,"column_end":90}},{"value":"/ algebraists.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":104207,"byte_end":104223,"line_start":149,"line_end":149,"column_start":1,"column_end":17}}]},{"kind":"Trait","id":{"krate":0,"index":1355},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":104720,"byte_end":104734,"line_start":10,"line_end":10,"column_start":11,"column_end":25},"name":"Transformation","qualname":"::linear::transformation::Transformation","value":"Transformation<E: EuclideanSpace>: MultiplicativeMonoid","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1358}],"decl_id":null,"docs":" A general transformation acting on an euclidean space. It may not be inversible.\n","sig":null,"attributes":[{"value":"/ A general transformation acting on an euclidean space. It may not be inversible.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":104625,"byte_end":104709,"line_start":9,"line_end":9,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":104858,"byte_end":104873,"line_start":12,"line_end":12,"column_start":8,"column_end":23},"name":"transform_point","qualname":"::linear::transformation::Transformation::transform_point","value":"pub fn transform_point(&Self, &E) -> E","parent":{"krate":0,"index":1355},"children":[],"decl_id":null,"docs":" Applies this group's action on a point from the euclidean space.\n","sig":null,"attributes":[{"value":"/ Applies this group's action on a point from the euclidean space.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":104782,"byte_end":104850,"line_start":11,"line_end":11,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":105149,"byte_end":105165,"line_start":18,"line_end":18,"column_start":8,"column_end":24},"name":"transform_vector","qualname":"::linear::transformation::Transformation::transform_vector","value":"pub fn transform_vector(&Self, &E::Coordinates) -> E::Coordinates","parent":{"krate":0,"index":1355},"children":[],"decl_id":null,"docs":" Applies this group's action on a vector from the euclidean space.","sig":null,"attributes":[{"value":"/ Applies this group's action on a vector from the euclidean space.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":104900,"byte_end":104969,"line_start":14,"line_end":14,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":104974,"byte_end":104977,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ If `v` is a vector and `a, b` two point such that `v = a - b`, the action `∘` on a vector","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":104982,"byte_end":105077,"line_start":16,"line_end":16,"column_start":5,"column_end":98}},{"value":"/ is defined as `self ∘ v = (self × a) - (self × b)`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":105082,"byte_end":105141,"line_start":17,"line_end":17,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":1359},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":105304,"byte_end":105328,"line_start":22,"line_end":22,"column_start":11,"column_end":35},"name":"ProjectiveTransformation","qualname":"::linear::transformation::ProjectiveTransformation","value":"ProjectiveTransformation<E: EuclideanSpace>: MultiplicativeGroup + Transformation<E>","parent":null,"children":[{"krate":0,"index":1361},{"krate":0,"index":1362}],"decl_id":null,"docs":" The most general form of invertible transformations on an euclidean space.\n","sig":null,"attributes":[{"value":"/ The most general form of invertible transformations on an euclidean space.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":105215,"byte_end":105293,"line_start":21,"line_end":21,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":105493,"byte_end":105516,"line_start":26,"line_end":26,"column_start":8,"column_end":31},"name":"inverse_transform_point","qualname":"::linear::transformation::ProjectiveTransformation::inverse_transform_point","value":"pub fn inverse_transform_point(&Self, &E) -> E","parent":{"krate":0,"index":1359},"children":[],"decl_id":null,"docs":" Applies this group's two_sided_inverse action on a point from the euclidean space.\n","sig":null,"attributes":[{"value":"/ Applies this group's two_sided_inverse action on a point from the euclidean space.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":105399,"byte_end":105485,"line_start":25,"line_end":25,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":105810,"byte_end":105834,"line_start":32,"line_end":32,"column_start":8,"column_end":32},"name":"inverse_transform_vector","qualname":"::linear::transformation::ProjectiveTransformation::inverse_transform_vector","value":"pub fn inverse_transform_vector(&Self, &E::Coordinates) -> E::Coordinates","parent":{"krate":0,"index":1359},"children":[],"decl_id":null,"docs":" Applies this group's two_sided_inverse action on a vector from the euclidean space.","sig":null,"attributes":[{"value":"/ Applies this group's two_sided_inverse action on a vector from the euclidean space.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":105543,"byte_end":105630,"line_start":28,"line_end":28,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":105635,"byte_end":105638,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ If `v` is a vector and `a, b` two point such that `v = a - b`, the action `∘` on a vector","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":105643,"byte_end":105738,"line_start":30,"line_end":30,"column_start":5,"column_end":98}},{"value":"/ is defined as `self ∘ v = (self × a) - (self × b)`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":105743,"byte_end":105802,"line_start":31,"line_end":31,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":1363},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":106063,"byte_end":106083,"line_start":37,"line_end":37,"column_start":11,"column_end":31},"name":"AffineTransformation","qualname":"::linear::transformation::AffineTransformation","value":"AffineTransformation<E: EuclideanSpace>: ProjectiveTransformation<E>","parent":null,"children":[{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375}],"decl_id":null,"docs":" The group of affine transformations. They are decomposable into a rotation, a non-uniform\n scaling, a second rotation, and a translation (applied in that order).\n","sig":null,"attributes":[{"value":"/ The group of affine transformations. They are decomposable into a rotation, a non-uniform","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":105884,"byte_end":105977,"line_start":35,"line_end":35,"column_start":1,"column_end":94}},{"value":"/ scaling, a second rotation, and a translation (applied in that order).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":105978,"byte_end":106052,"line_start":36,"line_end":36,"column_start":1,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":1365},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":106193,"byte_end":106201,"line_start":39,"line_end":39,"column_start":10,"column_end":18},"name":"Rotation","qualname":"::linear::transformation::AffineTransformation::Rotation","value":"type Rotation: Rotation<E>;","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Type of the first rotation to be applied.\n","sig":null,"attributes":[{"value":"/ Type of the first rotation to be applied.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":106138,"byte_end":106183,"line_start":38,"line_end":38,"column_start":5,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":1366},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":106280,"byte_end":106297,"line_start":41,"line_end":41,"column_start":10,"column_end":27},"name":"NonUniformScaling","qualname":"::linear::transformation::AffineTransformation::NonUniformScaling","value":"type NonUniformScaling: AffineTransformation<E>;","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Type of the non-uniform scaling to be applied.\n","sig":null,"attributes":[{"value":"/ Type of the non-uniform scaling to be applied.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":106220,"byte_end":106270,"line_start":40,"line_end":40,"column_start":5,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":1367},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":106410,"byte_end":106421,"line_start":43,"line_end":43,"column_start":10,"column_end":21},"name":"Translation","qualname":"::linear::transformation::AffineTransformation::Translation","value":"type Translation: Translation<E>;","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" The type of the pure translation part of this affine transformation.\n","sig":null,"attributes":[{"value":"/ The type of the pure translation part of this affine transformation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":106328,"byte_end":106400,"line_start":42,"line_end":42,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":106603,"byte_end":106612,"line_start":47,"line_end":47,"column_start":8,"column_end":17},"name":"decompose","qualname":"::linear::transformation::AffineTransformation::decompose","value":"pub fn decompose(&Self)\n->\n    (Self::Translation, Self::Rotation, Self::NonUniformScaling,\n     Self::Rotation)","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Decomposes this affine transformation into a rotation followed by a non-uniform scaling,\n followed by a rotation, followed by a translation.\n","sig":null,"attributes":[{"value":"/ Decomposes this affine transformation into a rotation followed by a non-uniform scaling,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":106444,"byte_end":106536,"line_start":45,"line_end":45,"column_start":5,"column_end":97}},{"value":"/ followed by a rotation, followed by a translation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":106541,"byte_end":106595,"line_start":46,"line_end":46,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":106904,"byte_end":106922,"line_start":61,"line_end":61,"column_start":8,"column_end":26},"name":"append_translation","qualname":"::linear::transformation::AffineTransformation::append_translation","value":"pub fn append_translation(&Self, &Self::Translation) -> Self","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Appends a translation to this similarity.\n","sig":null,"attributes":[{"value":"/ Appends a translation to this similarity.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":106851,"byte_end":106896,"line_start":60,"line_end":60,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":107021,"byte_end":107040,"line_start":64,"line_end":64,"column_start":8,"column_end":27},"name":"prepend_translation","qualname":"::linear::transformation::AffineTransformation::prepend_translation","value":"pub fn prepend_translation(&Self, &Self::Translation) -> Self","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Prepends a translation to this similarity.\n","sig":null,"attributes":[{"value":"/ Prepends a translation to this similarity.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":106967,"byte_end":107013,"line_start":63,"line_end":63,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1371},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":107135,"byte_end":107150,"line_start":67,"line_end":67,"column_start":8,"column_end":23},"name":"append_rotation","qualname":"::linear::transformation::AffineTransformation::append_rotation","value":"pub fn append_rotation(&Self, &Self::Rotation) -> Self","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Appends a rotation to this similarity.\n","sig":null,"attributes":[{"value":"/ Appends a rotation to this similarity.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":107085,"byte_end":107127,"line_start":66,"line_end":66,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":107243,"byte_end":107259,"line_start":70,"line_end":70,"column_start":8,"column_end":24},"name":"prepend_rotation","qualname":"::linear::transformation::AffineTransformation::prepend_rotation","value":"pub fn prepend_rotation(&Self, &Self::Rotation) -> Self","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Prepends a rotation to this similarity.\n","sig":null,"attributes":[{"value":"/ Prepends a rotation to this similarity.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":107192,"byte_end":107235,"line_start":69,"line_end":69,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1373},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":107357,"byte_end":107371,"line_start":73,"line_end":73,"column_start":8,"column_end":22},"name":"append_scaling","qualname":"::linear::transformation::AffineTransformation::append_scaling","value":"pub fn append_scaling(&Self, &Self::NonUniformScaling) -> Self","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Appends a scaling factor to this similarity.\n","sig":null,"attributes":[{"value":"/ Appends a scaling factor to this similarity.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":107301,"byte_end":107349,"line_start":72,"line_end":72,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":107479,"byte_end":107494,"line_start":76,"line_end":76,"column_start":8,"column_end":23},"name":"prepend_scaling","qualname":"::linear::transformation::AffineTransformation::prepend_scaling","value":"pub fn prepend_scaling(&Self, &Self::NonUniformScaling) -> Self","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Prepends a scaling factor to this similarity.\n","sig":null,"attributes":[{"value":"/ Prepends a scaling factor to this similarity.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":107422,"byte_end":107471,"line_start":75,"line_end":75,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1375},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":107813,"byte_end":107838,"line_start":84,"line_end":84,"column_start":8,"column_end":33},"name":"append_rotation_wrt_point","qualname":"::linear::transformation::AffineTransformation::append_rotation_wrt_point","value":"pub fn append_rotation_wrt_point(&Self, &Self::Rotation, &E) -> Option<Self>","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Appends to this similarity a rotation centered at the point `p`, i.e., this point is left\n invariant.","sig":null,"attributes":[{"value":"/ Appends to this similarity a rotation centered at the point `p`, i.e., this point is left","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":107545,"byte_end":107638,"line_start":78,"line_end":78,"column_start":5,"column_end":98}},{"value":"/ invariant.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":107643,"byte_end":107657,"line_start":79,"line_end":79,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":107662,"byte_end":107665,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ May return `None` if `Self` does not have enough translational degree of liberty to perform","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":107670,"byte_end":107765,"line_start":81,"line_end":81,"column_start":5,"column_end":100}},{"value":"/ this computation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":107770,"byte_end":107791,"line_start":82,"line_end":82,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":107796,"byte_end":107805,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":1376},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":108404,"byte_end":108414,"line_start":101,"line_end":101,"column_start":11,"column_end":21},"name":"Similarity","qualname":"::linear::transformation::Similarity","value":"Similarity<E: EuclideanSpace>: AffineTransformation<E, NonUniformScaling = <Self as Similarity<E>>::Scaling>","parent":null,"children":[{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391}],"decl_id":null,"docs":" Subgroups of the similarity group `S(n)`, i.e., rotations, translations, and (signed) uniform scaling.","sig":null,"attributes":[{"value":"/ Subgroups of the similarity group `S(n)`, i.e., rotations, translations, and (signed) uniform scaling.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":108226,"byte_end":108332,"line_start":98,"line_end":98,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":108333,"byte_end":108336,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ Similarities map lines to lines and preserve angles.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":108337,"byte_end":108393,"line_start":100,"line_end":100,"column_start":1,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":1378},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":108615,"byte_end":108622,"line_start":105,"line_end":105,"column_start":10,"column_end":17},"name":"Scaling","qualname":"::linear::transformation::Similarity::Scaling","value":"type Scaling: Scaling<E>;","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" The type of the pure (uniform) scaling part of this similarity transformation.\n","sig":null,"attributes":[{"value":"/ The type of the pure (uniform) scaling part of this similarity transformation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":108523,"byte_end":108605,"line_start":104,"line_end":104,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1379},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":108764,"byte_end":108775,"line_start":111,"line_end":111,"column_start":8,"column_end":19},"name":"translation","qualname":"::linear::transformation::Similarity::translation","value":"pub fn translation(&Self) -> Self::Translation","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" The pure translational component of this similarity transformation.\n","sig":null,"attributes":[{"value":"/ The pure translational component of this similarity transformation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":108685,"byte_end":108756,"line_start":110,"line_end":110,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":108886,"byte_end":108894,"line_start":114,"line_end":114,"column_start":8,"column_end":16},"name":"rotation","qualname":"::linear::transformation::Similarity::rotation","value":"pub fn rotation(&Self) -> Self::Rotation","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" The pure rotational component of this similarity transformation.\n","sig":null,"attributes":[{"value":"/ The pure rotational component of this similarity transformation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":108810,"byte_end":108878,"line_start":113,"line_end":113,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1381},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":108999,"byte_end":109006,"line_start":117,"line_end":117,"column_start":8,"column_end":15},"name":"scaling","qualname":"::linear::transformation::Similarity::scaling","value":"pub fn scaling(&Self) -> Self::Scaling","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" The pure scaling component of this similarity transformation.\n","sig":null,"attributes":[{"value":"/ The pure scaling component of this similarity transformation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":108926,"byte_end":108991,"line_start":116,"line_end":116,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":109167,"byte_end":109182,"line_start":124,"line_end":124,"column_start":8,"column_end":23},"name":"translate_point","qualname":"::linear::transformation::Similarity::translate_point","value":"pub fn translate_point(&Self, &E) -> E","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" Applies this transformation's pure translational part to a point.\n","sig":null,"attributes":[{"value":"/ Applies this transformation's pure translational part to a point.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":109076,"byte_end":109145,"line_start":122,"line_end":122,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":109150,"byte_end":109159,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1383},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":109351,"byte_end":109363,"line_start":130,"line_end":130,"column_start":8,"column_end":20},"name":"rotate_point","qualname":"::linear::transformation::Similarity::rotate_point","value":"pub fn rotate_point(&Self, &E) -> E","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" Applies this transformation's pure rotational part to a point.\n","sig":null,"attributes":[{"value":"/ Applies this transformation's pure rotational part to a point.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":109263,"byte_end":109329,"line_start":128,"line_end":128,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":109334,"byte_end":109343,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":109526,"byte_end":109537,"line_start":136,"line_end":136,"column_start":8,"column_end":19},"name":"scale_point","qualname":"::linear::transformation::Similarity::scale_point","value":"pub fn scale_point(&Self, &E) -> E","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" Applies this transformation's pure scaling part to a point.\n","sig":null,"attributes":[{"value":"/ Applies this transformation's pure scaling part to a point.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":109441,"byte_end":109504,"line_start":134,"line_end":134,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":109509,"byte_end":109518,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1385},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":109703,"byte_end":109716,"line_start":142,"line_end":142,"column_start":8,"column_end":21},"name":"rotate_vector","qualname":"::linear::transformation::Similarity::rotate_vector","value":"pub fn rotate_vector(&Self, &E::Coordinates) -> E::Coordinates","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" Applies this transformation's pure rotational part to a vector.\n","sig":null,"attributes":[{"value":"/ Applies this transformation's pure rotational part to a vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":109614,"byte_end":109681,"line_start":140,"line_end":140,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":109686,"byte_end":109695,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":109907,"byte_end":109919,"line_start":148,"line_end":148,"column_start":8,"column_end":20},"name":"scale_vector","qualname":"::linear::transformation::Similarity::scale_vector","value":"pub fn scale_vector(&Self, &E::Coordinates) -> E::Coordinates","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" Applies this transformation's pure scaling part to a vector.\n","sig":null,"attributes":[{"value":"/ Applies this transformation's pure scaling part to a vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":109821,"byte_end":109885,"line_start":146,"line_end":146,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":109890,"byte_end":109899,"line_start":147,"line_end":147,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1387},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":110169,"byte_end":110192,"line_start":157,"line_end":157,"column_start":8,"column_end":31},"name":"inverse_translate_point","qualname":"::linear::transformation::Similarity::inverse_translate_point","value":"pub fn inverse_translate_point(&Self, &E) -> E","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" Applies this transformation inverse's pure translational part to a point.\n","sig":null,"attributes":[{"value":"/ Applies this transformation inverse's pure translational part to a point.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":110070,"byte_end":110147,"line_start":155,"line_end":155,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":110152,"byte_end":110161,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":110377,"byte_end":110397,"line_start":163,"line_end":163,"column_start":8,"column_end":28},"name":"inverse_rotate_point","qualname":"::linear::transformation::Similarity::inverse_rotate_point","value":"pub fn inverse_rotate_point(&Self, &E) -> E","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" Applies this transformation inverse's pure rotational part to a point.\n","sig":null,"attributes":[{"value":"/ Applies this transformation inverse's pure rotational part to a point.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":110281,"byte_end":110355,"line_start":161,"line_end":161,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":110360,"byte_end":110369,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1389},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":110576,"byte_end":110595,"line_start":169,"line_end":169,"column_start":8,"column_end":27},"name":"inverse_scale_point","qualname":"::linear::transformation::Similarity::inverse_scale_point","value":"pub fn inverse_scale_point(&Self, &E) -> E","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" Applies this transformation inverse's pure scaling part to a point.\n","sig":null,"attributes":[{"value":"/ Applies this transformation inverse's pure scaling part to a point.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":110483,"byte_end":110554,"line_start":167,"line_end":167,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":110559,"byte_end":110568,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":110777,"byte_end":110798,"line_start":175,"line_end":175,"column_start":8,"column_end":29},"name":"inverse_rotate_vector","qualname":"::linear::transformation::Similarity::inverse_rotate_vector","value":"pub fn inverse_rotate_vector(&Self, &E::Coordinates) -> E::Coordinates","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" Applies this transformation inverse's pure rotational part to a vector.\n","sig":null,"attributes":[{"value":"/ Applies this transformation inverse's pure rotational part to a vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":110680,"byte_end":110755,"line_start":173,"line_end":173,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":110760,"byte_end":110769,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111005,"byte_end":111025,"line_start":181,"line_end":181,"column_start":8,"column_end":28},"name":"inverse_scale_vector","qualname":"::linear::transformation::Similarity::inverse_scale_vector","value":"pub fn inverse_scale_vector(&Self, &E::Coordinates) -> E::Coordinates","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" Applies this transformation inverse's pure scaling part to a vector.\n","sig":null,"attributes":[{"value":"/ Applies this transformation inverse's pure scaling part to a vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":110911,"byte_end":110983,"line_start":179,"line_end":179,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":110988,"byte_end":110997,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":1392},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111236,"byte_end":111244,"line_start":187,"line_end":187,"column_start":11,"column_end":19},"name":"Isometry","qualname":"::linear::transformation::Isometry","value":"Isometry<E: EuclideanSpace>: Similarity<E, Scaling = Id>","parent":null,"children":[],"decl_id":null,"docs":" Subgroups of the isometry group `E(n)`, i.e., rotations, reflexions, and translations.\n","sig":null,"attributes":[{"value":"/ Subgroups of the isometry group `E(n)`, i.e., rotations, reflexions, and translations.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111135,"byte_end":111225,"line_start":186,"line_end":186,"column_start":1,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":1394},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111409,"byte_end":111423,"line_start":190,"line_end":190,"column_start":11,"column_end":25},"name":"DirectIsometry","qualname":"::linear::transformation::DirectIsometry","value":"DirectIsometry<E: EuclideanSpace>: Isometry<E>","parent":null,"children":[],"decl_id":null,"docs":" Subgroups of the orientation-preserving isometry group `SE(n)`, i.e., rotations and translations.\n","sig":null,"attributes":[{"value":"/ Subgroups of the orientation-preserving isometry group `SE(n)`, i.e., rotations and translations.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111297,"byte_end":111398,"line_start":189,"line_end":189,"column_start":1,"column_end":102}}]},{"kind":"Trait","id":{"krate":0,"index":1396},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111535,"byte_end":111559,"line_start":193,"line_end":193,"column_start":11,"column_end":35},"name":"OrthogonalTransformation","qualname":"::linear::transformation::OrthogonalTransformation","value":"OrthogonalTransformation<E: EuclideanSpace>: Isometry<E, Translation = Id>","parent":null,"children":[],"decl_id":null,"docs":" Subgroups of the n-dimensional rotations and scaling `O(n)`.\n","sig":null,"attributes":[{"value":"/ Subgroups of the n-dimensional rotations and scaling `O(n)`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111460,"byte_end":111524,"line_start":192,"line_end":192,"column_start":1,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":1398},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111677,"byte_end":111684,"line_start":196,"line_end":196,"column_start":11,"column_end":18},"name":"Scaling","qualname":"::linear::transformation::Scaling","value":"Scaling<E: EuclideanSpace>: AffineTransformation<E, NonUniformScaling = Self, Translation = Self, Rotation\n= Self> + SubsetOf<E::RealField>","parent":null,"children":[{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403}],"decl_id":null,"docs":" Subgroups of the (signed) uniform scaling group.\n","sig":null,"attributes":[{"value":"/ Subgroups of the (signed) uniform scaling group.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111614,"byte_end":111666,"line_start":195,"line_end":195,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111922,"byte_end":111929,"line_start":202,"line_end":202,"column_start":8,"column_end":15},"name":"to_real","qualname":"::linear::transformation::Scaling::to_real","value":"pub fn to_real(&Self) -> E::RealField","parent":{"krate":0,"index":1398},"children":[],"decl_id":null,"docs":" Converts this scaling factor to a real. Same as `self.to_superset()`.\n","sig":null,"attributes":[{"value":"/ Converts this scaling factor to a real. Same as `self.to_superset()`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111827,"byte_end":111900,"line_start":200,"line_end":200,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111905,"byte_end":111914,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":112191,"byte_end":112200,"line_start":209,"line_end":209,"column_start":8,"column_end":17},"name":"from_real","qualname":"::linear::transformation::Scaling::from_real","value":"pub fn from_real(E::RealField) -> Option<Self>","parent":{"krate":0,"index":1398},"children":[],"decl_id":null,"docs":" Attempts to convert a real to an element of this scaling subgroup. Same as\n `Self::from_superset()`. Returns `None` if no such scaling is possible for this subgroup.\n","sig":null,"attributes":[{"value":"/ Attempts to convert a real to an element of this scaling subgroup. Same as","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111993,"byte_end":112071,"line_start":206,"line_end":206,"column_start":5,"column_end":83}},{"value":"/ `Self::from_superset()`. Returns `None` if no such scaling is possible for this subgroup.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":112076,"byte_end":112169,"line_start":207,"line_end":207,"column_start":5,"column_end":98}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":112174,"byte_end":112183,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":112467,"byte_end":112471,"line_start":216,"line_end":216,"column_start":8,"column_end":12},"name":"powf","qualname":"::linear::transformation::Scaling::powf","value":"pub fn powf(&Self, E::RealField) -> Option<Self>","parent":{"krate":0,"index":1398},"children":[],"decl_id":null,"docs":" Raises the scaling to a power. The result must be equivalent to\n `self.to_superset().powf(n)`. Returns `None` if the result is not representable by `Self`.\n","sig":null,"attributes":[{"value":"/ Raises the scaling to a power. The result must be equivalent to","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":112279,"byte_end":112346,"line_start":213,"line_end":213,"column_start":5,"column_end":72}},{"value":"/ `self.to_superset().powf(n)`. Returns `None` if the result is not representable by `Self`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":112351,"byte_end":112445,"line_start":214,"line_end":214,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":112450,"byte_end":112459,"line_start":215,"line_end":215,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":112713,"byte_end":112726,"line_start":223,"line_end":223,"column_start":8,"column_end":21},"name":"scale_between","qualname":"::linear::transformation::Scaling::scale_between","value":"pub fn scale_between(&E::Coordinates, &E::Coordinates) -> Option<Self>","parent":{"krate":0,"index":1398},"children":[],"decl_id":null,"docs":" The scaling required to make `a` have the same norm as `b`, i.e., `|b| = |a| * norm_ratio(a,\n b)`.\n","sig":null,"attributes":[{"value":"/ The scaling required to make `a` have the same norm as `b`, i.e., `|b| = |a| * norm_ratio(a,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":112582,"byte_end":112678,"line_start":220,"line_end":220,"column_start":5,"column_end":101}},{"value":"/ b)`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":112683,"byte_end":112691,"line_start":221,"line_end":221,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":112696,"byte_end":112705,"line_start":222,"line_end":222,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":1404},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":112917,"byte_end":112928,"line_start":229,"line_end":229,"column_start":11,"column_end":22},"name":"Translation","qualname":"::linear::transformation::Translation","value":"Translation<E: EuclideanSpace>: DirectIsometry<E, Translation = Self, Rotation = Self>","parent":null,"children":[{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409}],"decl_id":null,"docs":" Subgroups of the n-dimensional translation group `T(n)`.\n","sig":null,"attributes":[{"value":"/ Subgroups of the n-dimensional translation group `T(n)`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":112846,"byte_end":112906,"line_start":228,"line_end":228,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1406},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":113435,"byte_end":113444,"line_start":237,"line_end":237,"column_start":8,"column_end":17},"name":"to_vector","qualname":"::linear::transformation::Translation::to_vector","value":"pub fn to_vector(&Self) -> E::Coordinates","parent":{"krate":0,"index":1404},"children":[],"decl_id":null,"docs":" Converts this translation to a vector.\n","sig":null,"attributes":[{"value":"/ Converts this translation to a vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":113385,"byte_end":113427,"line_start":236,"line_end":236,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1407},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":113661,"byte_end":113672,"line_start":241,"line_end":241,"column_start":8,"column_end":19},"name":"from_vector","qualname":"::linear::transformation::Translation::from_vector","value":"pub fn from_vector(E::Coordinates) -> Option<Self>","parent":{"krate":0,"index":1404},"children":[],"decl_id":null,"docs":" Attempts to convert a vector to this translation. Returns `None` if the translation\n represented by `v` is not part of the translation subgroup represented by `Self`.\n","sig":null,"attributes":[{"value":"/ Attempts to convert a vector to this translation. Returns `None` if the translation","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":113476,"byte_end":113563,"line_start":239,"line_end":239,"column_start":5,"column_end":92}},{"value":"/ represented by `v` is not part of the translation subgroup represented by `Self`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":113568,"byte_end":113653,"line_start":240,"line_end":240,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":113903,"byte_end":113907,"line_start":246,"line_end":246,"column_start":8,"column_end":12},"name":"powf","qualname":"::linear::transformation::Translation::powf","value":"pub fn powf(&Self, E::RealField) -> Option<Self>","parent":{"krate":0,"index":1404},"children":[],"decl_id":null,"docs":" Raises the translation to a power. The result must be equivalent to\n `self.to_superset() * n`.  Returns `None` if the result is not representable by `Self`.\n","sig":null,"attributes":[{"value":"/ Raises the translation to a power. The result must be equivalent to","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":113714,"byte_end":113785,"line_start":243,"line_end":243,"column_start":5,"column_end":76}},{"value":"/ `self.to_superset() * n`.  Returns `None` if the result is not representable by `Self`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":113790,"byte_end":113881,"line_start":244,"line_end":244,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":113886,"byte_end":113895,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1409},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":114126,"byte_end":114145,"line_start":252,"line_end":252,"column_start":8,"column_end":27},"name":"translation_between","qualname":"::linear::transformation::Translation::translation_between","value":"pub fn translation_between(&E, &E) -> Option<Self>","parent":{"krate":0,"index":1404},"children":[],"decl_id":null,"docs":" The translation needed to make `a` coincide with `b`, i.e., `b = a * translation_to(a, b)`.\n","sig":null,"attributes":[{"value":"/ The translation needed to make `a` coincide with `b`, i.e., `b = a * translation_to(a, b)`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":114009,"byte_end":114104,"line_start":250,"line_end":250,"column_start":5,"column_end":100}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":114109,"byte_end":114118,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":1410},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":114305,"byte_end":114313,"line_start":258,"line_end":258,"column_start":11,"column_end":19},"name":"Rotation","qualname":"::linear::transformation::Rotation","value":"Rotation<E: EuclideanSpace>: OrthogonalTransformation<E, Rotation = Self> + DirectIsometry<E, Rotation =\nSelf>","parent":null,"children":[{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1414}],"decl_id":null,"docs":" Subgroups of the n-dimensional rotation group `SO(n)`.\n","sig":null,"attributes":[{"value":"/ Subgroups of the n-dimensional rotation group `SO(n)`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":114236,"byte_end":114294,"line_start":257,"line_end":257,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":114580,"byte_end":114584,"line_start":263,"line_end":263,"column_start":8,"column_end":12},"name":"powf","qualname":"::linear::transformation::Rotation::powf","value":"pub fn powf(&Self, E::RealField) -> Option<Self>","parent":{"krate":0,"index":1410},"children":[],"decl_id":null,"docs":" Raises this rotation to a power. If this is a simple rotation, the result must be\n equivalent to multiplying the rotation angle by `n`.\n","sig":null,"attributes":[{"value":"/ Raises this rotation to a power. If this is a simple rotation, the result must be","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":114426,"byte_end":114511,"line_start":261,"line_end":261,"column_start":5,"column_end":90}},{"value":"/ equivalent to multiplying the rotation angle by `n`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":114516,"byte_end":114572,"line_start":262,"line_end":262,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1413},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":114955,"byte_end":114971,"line_start":269,"line_end":269,"column_start":8,"column_end":24},"name":"rotation_between","qualname":"::linear::transformation::Rotation::rotation_between","value":"pub fn rotation_between(&E::Coordinates, &E::Coordinates) -> Option<Self>","parent":{"krate":0,"index":1410},"children":[],"decl_id":null,"docs":" Computes a simple rotation that makes the angle between `a` and `b` equal to zero, i.e.,\n `b.angle(a * delta_rotation(a, b)) = 0`. If `a` and `b` are collinear, the computed\n rotation may not be unique. Returns `None` if no such simple rotation exists in the\n subgroup represented by `Self`.\n","sig":null,"attributes":[{"value":"/ Computes a simple rotation that makes the angle between `a` and `b` equal to zero, i.e.,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":114631,"byte_end":114723,"line_start":265,"line_end":265,"column_start":5,"column_end":97}},{"value":"/ `b.angle(a * delta_rotation(a, b)) = 0`. If `a` and `b` are collinear, the computed","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":114728,"byte_end":114815,"line_start":266,"line_end":266,"column_start":5,"column_end":92}},{"value":"/ rotation may not be unique. Returns `None` if no such simple rotation exists in the","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":114820,"byte_end":114907,"line_start":267,"line_end":267,"column_start":5,"column_end":92}},{"value":"/ subgroup represented by `Self`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":114912,"byte_end":114947,"line_start":268,"line_end":268,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":115281,"byte_end":115304,"line_start":276,"line_end":276,"column_start":8,"column_end":31},"name":"scaled_rotation_between","qualname":"::linear::transformation::Rotation::scaled_rotation_between","value":"pub fn scaled_rotation_between(&E::Coordinates, &E::Coordinates, E::RealField)\n-> Option<Self>","parent":{"krate":0,"index":1410},"children":[],"decl_id":null,"docs":" Computes the rotation between `a` and `b` and raises it to the power `n`.","sig":null,"attributes":[{"value":"/ Computes the rotation between `a` and `b` and raises it to the power `n`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":115034,"byte_end":115111,"line_start":271,"line_end":271,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":115116,"byte_end":115119,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to calling `self.rotation_between(a, b)` followed by `.powf(n)` but will","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":115124,"byte_end":115219,"line_start":273,"line_end":273,"column_start":5,"column_end":100}},{"value":"/ usually be much more efficient.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":115224,"byte_end":115259,"line_start":274,"line_end":274,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":115264,"byte_end":115273,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":1515},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":118728,"byte_end":118739,"line_start":11,"line_end":11,"column_start":11,"column_end":22},"name":"VectorSpace","qualname":"::linear::vector::VectorSpace","value":"VectorSpace: Module<Ring = <Self as VectorSpace>::Field>","parent":null,"children":[{"krate":0,"index":1516}],"decl_id":null,"docs":" A vector space has a module structure over a field instead of a ring.\n","sig":null,"attributes":[{"value":"/ A vector space has a module structure over a field instead of a ring.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":118644,"byte_end":118717,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":1516},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":118881,"byte_end":118886,"line_start":16,"line_end":16,"column_start":10,"column_end":15},"name":"Field","qualname":"::linear::vector::VectorSpace::Field","value":"type Field: Field;","parent":{"krate":0,"index":1515},"children":[],"decl_id":null,"docs":" The underlying scalar field.\n","sig":null,"attributes":[{"value":"/ The underlying scalar field.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":118839,"byte_end":118871,"line_start":15,"line_end":15,"column_start":5,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":1517},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":118935,"byte_end":118946,"line_start":20,"line_end":20,"column_start":11,"column_end":22},"name":"NormedSpace","qualname":"::linear::vector::NormedSpace","value":"NormedSpace: VectorSpace<Field = <Self as NormedSpace>::ComplexField>","parent":null,"children":[{"krate":0,"index":1518},{"krate":0,"index":1519},{"krate":0,"index":1520},{"krate":0,"index":1521},{"krate":0,"index":1522},{"krate":0,"index":1523},{"krate":0,"index":1524},{"krate":0,"index":1525}],"decl_id":null,"docs":" A normed vector space.\n","sig":null,"attributes":[{"value":"/ A normed vector space.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":118898,"byte_end":118924,"line_start":19,"line_end":19,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":1518},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119119,"byte_end":119128,"line_start":22,"line_end":22,"column_start":10,"column_end":19},"name":"RealField","qualname":"::linear::vector::NormedSpace::RealField","value":"type RealField: RealField;","parent":{"krate":0,"index":1517},"children":[],"decl_id":null,"docs":" The result of the norm (not necessarily the same same as the field used by this vector space).\n","sig":null,"attributes":[{"value":"/ The result of the norm (not necessarily the same same as the field used by this vector space).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119011,"byte_end":119109,"line_start":21,"line_end":21,"column_start":5,"column_end":103}}]},{"kind":"Type","id":{"krate":0,"index":1519},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119211,"byte_end":119223,"line_start":24,"line_end":24,"column_start":10,"column_end":22},"name":"ComplexField","qualname":"::linear::vector::NormedSpace::ComplexField","value":"type ComplexField: ComplexField<RealField = Self::RealField>;","parent":{"krate":0,"index":1517},"children":[],"decl_id":null,"docs":" The field of this space must be this complex number.\n","sig":null,"attributes":[{"value":"/ The field of this space must be this complex number.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119145,"byte_end":119201,"line_start":23,"line_end":23,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119317,"byte_end":119329,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"norm_squared","qualname":"::linear::vector::NormedSpace::norm_squared","value":"pub fn norm_squared(&Self) -> Self::RealField","parent":{"krate":0,"index":1517},"children":[],"decl_id":null,"docs":" The squared norm of this vector.\n","sig":null,"attributes":[{"value":"/ The squared norm of this vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119273,"byte_end":119309,"line_start":26,"line_end":26,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1521},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119398,"byte_end":119402,"line_start":30,"line_end":30,"column_start":8,"column_end":12},"name":"norm","qualname":"::linear::vector::NormedSpace::norm","value":"pub fn norm(&Self) -> Self::RealField","parent":{"krate":0,"index":1517},"children":[],"decl_id":null,"docs":" The norm of this vector.\n","sig":null,"attributes":[{"value":"/ The norm of this vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119362,"byte_end":119390,"line_start":29,"line_end":29,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1522},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119491,"byte_end":119500,"line_start":33,"line_end":33,"column_start":8,"column_end":17},"name":"normalize","qualname":"::linear::vector::NormedSpace::normalize","value":"pub fn normalize(&Self) -> Self","parent":{"krate":0,"index":1517},"children":[],"decl_id":null,"docs":" Returns a normalized version of this vector.\n","sig":null,"attributes":[{"value":"/ Returns a normalized version of this vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119435,"byte_end":119483,"line_start":32,"line_end":32,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1523},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119587,"byte_end":119600,"line_start":36,"line_end":36,"column_start":8,"column_end":21},"name":"normalize_mut","qualname":"::linear::vector::NormedSpace::normalize_mut","value":"pub fn normalize_mut(&mut Self) -> Self::RealField","parent":{"krate":0,"index":1517},"children":[],"decl_id":null,"docs":" Normalizes this vector in-place and returns its norm.\n","sig":null,"attributes":[{"value":"/ Normalizes this vector in-place and returns its norm.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119522,"byte_end":119579,"line_start":35,"line_end":35,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119738,"byte_end":119751,"line_start":39,"line_end":39,"column_start":8,"column_end":21},"name":"try_normalize","qualname":"::linear::vector::NormedSpace::try_normalize","value":"pub fn try_normalize(&Self, Self::RealField) -> Option<Self>","parent":{"krate":0,"index":1517},"children":[],"decl_id":null,"docs":" Returns a normalized version of this vector unless its norm as smaller or equal to `eps`.\n","sig":null,"attributes":[{"value":"/ Returns a normalized version of this vector unless its norm as smaller or equal to `eps`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119637,"byte_end":119730,"line_start":38,"line_end":38,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1525},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119991,"byte_end":120008,"line_start":44,"line_end":44,"column_start":8,"column_end":25},"name":"try_normalize_mut","qualname":"::linear::vector::NormedSpace::try_normalize_mut","value":"pub fn try_normalize_mut(&mut Self, Self::RealField)\n-> Option<Self::RealField>","parent":{"krate":0,"index":1517},"children":[],"decl_id":null,"docs":" Normalizes this vector in-place or does nothing if its norm is smaller or equal to `eps`.","sig":null,"attributes":[{"value":"/ Normalizes this vector in-place or does nothing if its norm is smaller or equal to `eps`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119803,"byte_end":119896,"line_start":41,"line_end":41,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119901,"byte_end":119904,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ If the normalization succeeded, returns the old normal of this vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":119909,"byte_end":119983,"line_start":43,"line_end":43,"column_start":5,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":1526},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":120318,"byte_end":120328,"line_start":51,"line_end":51,"column_start":11,"column_end":21},"name":"InnerSpace","qualname":"::linear::vector::InnerSpace","value":"InnerSpace: NormedSpace","parent":null,"children":[{"krate":0,"index":1527},{"krate":0,"index":1528}],"decl_id":null,"docs":" A vector space equipped with an inner product.","sig":null,"attributes":[{"value":"/ A vector space equipped with an inner product.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":120073,"byte_end":120123,"line_start":47,"line_end":47,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":120124,"byte_end":120127,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ It must be a normed space as well and the norm must agree with the inner product.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":120128,"byte_end":120213,"line_start":49,"line_end":49,"column_start":1,"column_end":86}},{"value":"/ The inner product must be symmetric, linear in its first argument, and positive definite.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":120214,"byte_end":120307,"line_start":50,"line_end":50,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1527},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":120410,"byte_end":120423,"line_start":53,"line_end":53,"column_start":8,"column_end":21},"name":"inner_product","qualname":"::linear::vector::InnerSpace::inner_product","value":"pub fn inner_product(&Self, &Self) -> Self::ComplexField","parent":{"krate":0,"index":1526},"children":[],"decl_id":null,"docs":" Computes the inner product of `self` with `other`.\n","sig":null,"attributes":[{"value":"/ Computes the inner product of `self` with `other`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":120348,"byte_end":120402,"line_start":52,"line_end":52,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1528},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":120538,"byte_end":120543,"line_start":57,"line_end":57,"column_start":8,"column_end":13},"name":"angle","qualname":"::linear::vector::InnerSpace::angle","value":"pub fn angle(&Self, &Self) -> Self::RealField","parent":{"krate":0,"index":1526},"children":[],"decl_id":null,"docs":" Measures the angle between two vectors.\n","sig":null,"attributes":[{"value":"/ Measures the angle between two vectors.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":120473,"byte_end":120516,"line_start":55,"line_end":55,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":120521,"byte_end":120530,"line_start":56,"line_end":56,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":1529},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":121128,"byte_end":121148,"line_start":79,"line_end":79,"column_start":11,"column_end":31},"name":"FiniteDimVectorSpace","qualname":"::linear::vector::FiniteDimVectorSpace","value":"FiniteDimVectorSpace: VectorSpace + Index<usize, Output = <Self as VectorSpace>::Field> +\nIndexMut<usize, Output = <Self as VectorSpace>::Field>","parent":null,"children":[{"krate":0,"index":1530},{"krate":0,"index":1531},{"krate":0,"index":1533},{"krate":0,"index":1534},{"krate":0,"index":1535},{"krate":0,"index":1536}],"decl_id":null,"docs":" A finite-dimensional vector space.\n","sig":null,"attributes":[{"value":"/ A finite-dimensional vector space.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":121079,"byte_end":121117,"line_start":78,"line_end":78,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":121330,"byte_end":121339,"line_start":85,"line_end":85,"column_start":8,"column_end":17},"name":"dimension","qualname":"::linear::vector::FiniteDimVectorSpace::dimension","value":"pub fn dimension() -> usize","parent":{"krate":0,"index":1529},"children":[],"decl_id":null,"docs":" The vector space dimension.\n","sig":null,"attributes":[{"value":"/ The vector space dimension.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":121291,"byte_end":121322,"line_start":84,"line_end":84,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1531},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":121578,"byte_end":121593,"line_start":90,"line_end":90,"column_start":8,"column_end":23},"name":"canonical_basis","qualname":"::linear::vector::FiniteDimVectorSpace::canonical_basis","value":"pub fn canonical_basis<F: FnMut(&Self) -> bool>(F)","parent":{"krate":0,"index":1529},"children":[],"decl_id":null,"docs":" Applies the given closule to each element of this vector space's canonical basis. Stops if\n `f` returns `false`.\n","sig":null,"attributes":[{"value":"/ Applies the given closule to each element of this vector space's canonical basis. Stops if","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":121357,"byte_end":121451,"line_start":87,"line_end":87,"column_start":5,"column_end":99}},{"value":"/ `f` returns `false`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":121456,"byte_end":121480,"line_start":88,"line_end":88,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1533},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":121830,"byte_end":121853,"line_start":99,"line_end":99,"column_start":8,"column_end":31},"name":"canonical_basis_element","qualname":"::linear::vector::FiniteDimVectorSpace::canonical_basis_element","value":"pub fn canonical_basis_element(usize) -> Self","parent":{"krate":0,"index":1529},"children":[],"decl_id":null,"docs":" The i-the canonical basis element.\n","sig":null,"attributes":[{"value":"/ The i-the canonical basis element.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":121784,"byte_end":121822,"line_start":98,"line_end":98,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1534},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":121926,"byte_end":121929,"line_start":102,"line_end":102,"column_start":8,"column_end":11},"name":"dot","qualname":"::linear::vector::FiniteDimVectorSpace::dot","value":"pub fn dot(&Self, &Self) -> Self::Field","parent":{"krate":0,"index":1529},"children":[],"decl_id":null,"docs":" The dot product between two vectors.\n","sig":null,"attributes":[{"value":"/ The dot product between two vectors.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":121878,"byte_end":121918,"line_start":101,"line_end":101,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1535},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":122037,"byte_end":122056,"line_start":105,"line_end":105,"column_start":15,"column_end":34},"name":"component_unchecked","qualname":"::linear::vector::FiniteDimVectorSpace::component_unchecked","value":"pub unsafe fn component_unchecked(&Self, usize) -> &Self::Field","parent":{"krate":0,"index":1529},"children":[],"decl_id":null,"docs":" Same as `&self[i]` but without bound-checking.\n","sig":null,"attributes":[{"value":"/ Same as `&self[i]` but without bound-checking.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":121972,"byte_end":122022,"line_start":104,"line_end":104,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":122165,"byte_end":122188,"line_start":108,"line_end":108,"column_start":15,"column_end":38},"name":"component_unchecked_mut","qualname":"::linear::vector::FiniteDimVectorSpace::component_unchecked_mut","value":"pub unsafe fn component_unchecked_mut(&mut Self, usize) -> &mut Self::Field","parent":{"krate":0,"index":1529},"children":[],"decl_id":null,"docs":" Same as `&mut self[i]` but without bound-checking.\n","sig":null,"attributes":[{"value":"/ Same as `&mut self[i]` but without bound-checking.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":122096,"byte_end":122150,"line_start":107,"line_end":107,"column_start":5,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":1537},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":122358,"byte_end":122377,"line_start":113,"line_end":113,"column_start":11,"column_end":30},"name":"FiniteDimInnerSpace","qualname":"::linear::vector::FiniteDimInnerSpace","value":"FiniteDimInnerSpace: InnerSpace + FiniteDimVectorSpace<Field = <Self as NormedSpace>::ComplexField>","parent":null,"children":[{"krate":0,"index":1538},{"krate":0,"index":1539}],"decl_id":null,"docs":" A finite-dimensional vector space equipped with an inner product that must coincide\n with the dot product.\n","sig":null,"attributes":[{"value":"/ A finite-dimensional vector space equipped with an inner product that must coincide","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":122234,"byte_end":122321,"line_start":111,"line_end":111,"column_start":1,"column_end":88}},{"value":"/ with the dot product.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":122322,"byte_end":122347,"line_start":112,"line_end":112,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":122732,"byte_end":122746,"line_start":119,"line_end":119,"column_start":8,"column_end":22},"name":"orthonormalize","qualname":"::linear::vector::FiniteDimInnerSpace::orthonormalize","value":"pub fn orthonormalize(&mut [Self]) -> usize","parent":{"krate":0,"index":1537},"children":[],"decl_id":null,"docs":" Orthonormalizes the given family of vectors. The largest free family of vectors is moved at\n the beginning of the array and its size is returned. Vectors at an indices larger or equal to\n this length can be modified to an arbitrary value.\n","sig":null,"attributes":[{"value":"/ Orthonormalizes the given family of vectors. The largest free family of vectors is moved at","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":122468,"byte_end":122563,"line_start":116,"line_end":116,"column_start":5,"column_end":100}},{"value":"/ the beginning of the array and its size is returned. Vectors at an indices larger or equal to","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":122568,"byte_end":122665,"line_start":117,"line_end":117,"column_start":5,"column_end":102}},{"value":"/ this length can be modified to an arbitrary value.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":122670,"byte_end":122724,"line_start":118,"line_end":118,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1539},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123079,"byte_end":123105,"line_start":125,"line_end":125,"column_start":8,"column_end":34},"name":"orthonormal_subspace_basis","qualname":"::linear::vector::FiniteDimInnerSpace::orthonormal_subspace_basis","value":"pub fn orthonormal_subspace_basis<F: FnMut(&Self) -> bool>(&[Self], F)","parent":{"krate":0,"index":1537},"children":[],"decl_id":null,"docs":" Applies the given closure to each element of the orthonormal basis of the subspace\n orthogonal to free family of vectors `vs`. If `vs` is not a free family, the result is\n unspecified.\n","sig":null,"attributes":[{"value":"/ Applies the given closure to each element of the orthonormal basis of the subspace","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":122779,"byte_end":122865,"line_start":121,"line_end":121,"column_start":5,"column_end":91}},{"value":"/ orthogonal to free family of vectors `vs`. If `vs` is not a free family, the result is","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":122870,"byte_end":122960,"line_start":122,"line_end":122,"column_start":5,"column_end":95}},{"value":"/ unspecified.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":122965,"byte_end":122981,"line_start":123,"line_end":123,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":1541},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123283,"byte_end":123294,"line_start":130,"line_end":130,"column_start":11,"column_end":22},"name":"AffineSpace","qualname":"::linear::vector::AffineSpace","value":"AffineSpace: Sized + Clone + PartialEq + Sub<Self, Output =\n<Self as AffineSpace>::Translation> +\nClosedAdd<<Self as AffineSpace>::Translation>","parent":null,"children":[{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1544}],"decl_id":null,"docs":" A set points associated with a vector space and a transitive and free additive group action\n (the translation).\n","sig":null,"attributes":[{"value":"/ A set points associated with a vector space and a transitive and free additive group action","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123154,"byte_end":123249,"line_start":128,"line_end":128,"column_start":1,"column_end":96}},{"value":"/ (the translation).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123250,"byte_end":123272,"line_start":129,"line_end":129,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":1542},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123495,"byte_end":123506,"line_start":138,"line_end":138,"column_start":10,"column_end":21},"name":"Translation","qualname":"::linear::vector::AffineSpace::Translation","value":"type Translation: VectorSpace;","parent":{"krate":0,"index":1541},"children":[],"decl_id":null,"docs":" The associated vector space.\n","sig":null,"attributes":[{"value":"/ The associated vector space.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123453,"byte_end":123485,"line_start":137,"line_end":137,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1543},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123673,"byte_end":123685,"line_start":143,"line_end":143,"column_start":8,"column_end":20},"name":"translate_by","qualname":"::linear::vector::AffineSpace::translate_by","value":"pub fn translate_by(&Self, &Self::Translation) -> Self","parent":{"krate":0,"index":1541},"children":[],"decl_id":null,"docs":" Same as `*self + *t`. Applies the additive group action of this affine space's associated\n vector space on `self`.\n","sig":null,"attributes":[{"value":"/ Same as `*self + *t`. Applies the additive group action of this affine space's associated","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123526,"byte_end":123619,"line_start":140,"line_end":140,"column_start":5,"column_end":98}},{"value":"/ vector space on `self`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123624,"byte_end":123651,"line_start":141,"line_end":141,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123656,"byte_end":123665,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123921,"byte_end":123929,"line_start":150,"line_end":150,"column_start":8,"column_end":16},"name":"subtract","qualname":"::linear::vector::AffineSpace::subtract","value":"pub fn subtract(&Self, &Self) -> Self::Translation","parent":{"krate":0,"index":1541},"children":[],"decl_id":null,"docs":" Same as `*self - *other`. Returns the unique element `v` of the associated vector space\n such that `self = right + v`.\n","sig":null,"attributes":[{"value":"/ Same as `*self - *other`. Returns the unique element `v` of the associated vector space","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123770,"byte_end":123861,"line_start":147,"line_end":147,"column_start":5,"column_end":96}},{"value":"/ such that `self = right + v`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123866,"byte_end":123899,"line_start":148,"line_end":148,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123904,"byte_end":123913,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":1545},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":124099,"byte_end":124113,"line_start":156,"line_end":156,"column_start":11,"column_end":25},"name":"EuclideanSpace","qualname":"::linear::vector::EuclideanSpace","value":"EuclideanSpace: AffineSpace<Translation = <Self as EuclideanSpace>::Coordinates> +\nClosedMul<<Self as EuclideanSpace>::RealField> +\nClosedDiv<<Self as EuclideanSpace>::RealField> + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":1546},{"krate":0,"index":1547},{"krate":0,"index":1548},{"krate":0,"index":1549},{"krate":0,"index":1550},{"krate":0,"index":1551},{"krate":0,"index":1552},{"krate":0,"index":1553}],"decl_id":null,"docs":" The finite-dimensional affine space based on the field of reals.\n","sig":null,"attributes":[{"value":"/ The finite-dimensional affine space based on the field of reals.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":124020,"byte_end":124088,"line_start":155,"line_end":155,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1546},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":124606,"byte_end":124617,"line_start":164,"line_end":164,"column_start":10,"column_end":21},"name":"Coordinates","qualname":"::linear::vector::EuclideanSpace::Coordinates","value":"type Coordinates: FiniteDimInnerSpace<RealField = Self::RealField, ComplexField = Self::RealField> +\n                 // XXX: the following bounds should not be necessary but the compiler does not\n                 // seem to be able to find them (from supertraits of VectorSpace)… Also, it won't\n                 // find them even if we add ClosedMul instead of Mul and MulAssign separately…\n                 Add<Self::Coordinates, Output = Self::Coordinates> +\n                 AddAssign<Self::Coordinates> +\n                 Sub<Self::Coordinates, Output = Self::Coordinates> +\n                 SubAssign<Self::Coordinates> +\n                 Mul<Self::RealField, Output = Self::Coordinates> +\n                 MulAssign<Self::RealField>                  +\n                 Div<Self::RealField, Output = Self::Coordinates> +\n                 DivAssign<Self::RealField>                  +\n                 Neg<Output = Self::Coordinates>;","parent":{"krate":0,"index":1545},"children":[],"decl_id":null,"docs":" The underlying finite vector space.\n","sig":null,"attributes":[{"value":"/ The underlying finite vector space.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":124557,"byte_end":124596,"line_start":163,"line_end":163,"column_start":5,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":1547},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":125902,"byte_end":125911,"line_start":184,"line_end":184,"column_start":10,"column_end":19},"name":"RealField","qualname":"::linear::vector::EuclideanSpace::RealField","value":"type RealField: RealField;","parent":{"krate":0,"index":1545},"children":[],"decl_id":null,"docs":" The underlying reals.\n","sig":null,"attributes":[{"value":"/ The underlying reals.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":125867,"byte_end":125892,"line_start":183,"line_end":183,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1548},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":126187,"byte_end":126193,"line_start":190,"line_end":190,"column_start":8,"column_end":14},"name":"origin","qualname":"::linear::vector::EuclideanSpace::origin","value":"pub fn origin() -> Self","parent":{"krate":0,"index":1545},"children":[],"decl_id":null,"docs":" The preferred origin of this euclidean space.","sig":null,"attributes":[{"value":"/ The preferred origin of this euclidean space.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":125929,"byte_end":125978,"line_start":186,"line_end":186,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":125983,"byte_end":125986,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Theoretically, an euclidean space has no clearly defined origin. Though it is almost always","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":125991,"byte_end":126086,"line_start":188,"line_end":188,"column_start":5,"column_end":100}},{"value":"/ useful to have some reference point to express all the others as translations of it.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":126091,"byte_end":126179,"line_start":189,"line_end":189,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1549},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":126335,"byte_end":126343,"line_start":196,"line_end":196,"column_start":8,"column_end":16},"name":"scale_by","qualname":"::linear::vector::EuclideanSpace::scale_by","value":"pub fn scale_by(&Self, Self::RealField) -> Self","parent":{"krate":0,"index":1545},"children":[],"decl_id":null,"docs":" Multiplies the distance of this point to `Self::origin()` by `s`.","sig":null,"attributes":[{"value":"/ Multiplies the distance of this point to `Self::origin()` by `s`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":126210,"byte_end":126279,"line_start":192,"line_end":192,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":126284,"byte_end":126287,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ Same as self * s.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":126292,"byte_end":126313,"line_start":194,"line_end":194,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":126318,"byte_end":126327,"line_start":195,"line_end":195,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1550},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":126576,"byte_end":126587,"line_start":203,"line_end":203,"column_start":8,"column_end":19},"name":"coordinates","qualname":"::linear::vector::EuclideanSpace::coordinates","value":"pub fn coordinates(&Self) -> Self::Coordinates","parent":{"krate":0,"index":1545},"children":[],"decl_id":null,"docs":" The coordinates of this point, i.e., the translation from the origin.\n","sig":null,"attributes":[{"value":"/ The coordinates of this point, i.e., the translation from the origin.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":126481,"byte_end":126554,"line_start":201,"line_end":201,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":126559,"byte_end":126568,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1551},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":126753,"byte_end":126769,"line_start":209,"line_end":209,"column_start":8,"column_end":24},"name":"from_coordinates","qualname":"::linear::vector::EuclideanSpace::from_coordinates","value":"pub fn from_coordinates(Self::Coordinates) -> Self","parent":{"krate":0,"index":1545},"children":[],"decl_id":null,"docs":" Builds a point from its coordinates relative to the origin.\n","sig":null,"attributes":[{"value":"/ Builds a point from its coordinates relative to the origin.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":126668,"byte_end":126731,"line_start":207,"line_end":207,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":126736,"byte_end":126745,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1552},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":126921,"byte_end":126937,"line_start":215,"line_end":215,"column_start":8,"column_end":24},"name":"distance_squared","qualname":"::linear::vector::EuclideanSpace::distance_squared","value":"pub fn distance_squared(&Self, &Self) -> Self::RealField","parent":{"krate":0,"index":1545},"children":[],"decl_id":null,"docs":" The distance between two points.\n","sig":null,"attributes":[{"value":"/ The distance between two points.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":126863,"byte_end":126899,"line_start":213,"line_end":213,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":126904,"byte_end":126913,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1553},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":127085,"byte_end":127093,"line_start":221,"line_end":221,"column_start":8,"column_end":16},"name":"distance","qualname":"::linear::vector::EuclideanSpace::distance","value":"pub fn distance(&Self, &Self) -> Self::RealField","parent":{"krate":0,"index":1545},"children":[],"decl_id":null,"docs":" The distance between two points.\n","sig":null,"attributes":[{"value":"/ The distance between two points.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":127027,"byte_end":127063,"line_start":219,"line_end":219,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":127068,"byte_end":127077,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]}],"impls":[{"id":52,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":25673,"byte_end":25680,"line_start":436,"line_end":436,"column_start":62,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":25920,"byte_end":25927,"line_start":446,"line_end":446,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":38091,"byte_end":38098,"line_start":486,"line_end":486,"column_start":50,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":51516,"byte_end":51523,"line_start":44,"line_end":44,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":51720,"byte_end":51727,"line_start":54,"line_end":54,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52308,"byte_end":52310,"line_start":73,"line_end":73,"column_start":19,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52466,"byte_end":52468,"line_start":81,"line_end":81,"column_start":28,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52504,"byte_end":52506,"line_start":83,"line_end":83,"column_start":29,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52619,"byte_end":52621,"line_start":90,"line_end":90,"column_start":36,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52765,"byte_end":52767,"line_start":96,"line_end":96,"column_start":33,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52872,"byte_end":52874,"line_start":103,"line_end":103,"column_start":26,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52915,"byte_end":52917,"line_start":105,"line_end":105,"column_start":34,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":53069,"byte_end":53071,"line_start":112,"line_end":112,"column_start":35,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":53179,"byte_end":53181,"line_start":119,"line_end":119,"column_start":33,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":53430,"byte_end":53432,"line_start":133,"line_end":133,"column_start":34,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":53673,"byte_end":53675,"line_start":145,"line_end":145,"column_start":30,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":53906,"byte_end":53908,"line_start":162,"line_end":162,"column_start":18,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54011,"byte_end":54013,"line_start":170,"line_end":170,"column_start":24,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54097,"byte_end":54099,"line_start":176,"line_end":176,"column_start":18,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54202,"byte_end":54204,"line_start":184,"line_end":184,"column_start":24,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54298,"byte_end":54300,"line_start":190,"line_end":190,"column_start":28,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":559},{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54453,"byte_end":54455,"line_start":198,"line_end":198,"column_start":34,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54581,"byte_end":54583,"line_start":204,"line_end":204,"column_start":40,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54714,"byte_end":54716,"line_start":211,"line_end":211,"column_start":42,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":568},{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54928,"byte_end":54930,"line_start":223,"line_end":223,"column_start":44,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54981,"byte_end":54983,"line_start":224,"line_end":224,"column_start":45,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55030,"byte_end":55032,"line_start":225,"line_end":225,"column_start":41,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55077,"byte_end":55079,"line_start":226,"line_end":226,"column_start":39,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55125,"byte_end":55127,"line_start":227,"line_end":227,"column_start":40,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55180,"byte_end":55182,"line_start":228,"line_end":228,"column_start":47,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55203,"byte_end":55205,"line_start":230,"line_end":230,"column_start":14,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55284,"byte_end":55286,"line_start":237,"line_end":237,"column_start":15,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":585},{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55529,"byte_end":55531,"line_start":254,"line_end":254,"column_start":63,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55833,"byte_end":55835,"line_start":271,"line_end":271,"column_start":39,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55959,"byte_end":55961,"line_start":278,"line_end":278,"column_start":39,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":56077,"byte_end":56079,"line_start":285,"line_end":285,"column_start":31,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":59833,"byte_end":59840,"line_start":126,"line_end":126,"column_start":59,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":60077,"byte_end":60084,"line_start":136,"line_end":136,"column_start":59,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":61597,"byte_end":61604,"line_start":37,"line_end":37,"column_start":75,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":63527,"byte_end":63535,"line_start":51,"line_end":51,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":63630,"byte_end":63644,"line_start":58,"line_end":58,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":705}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":63745,"byte_end":63761,"line_start":65,"line_end":65,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":707}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":64259,"byte_end":64266,"line_start":86,"line_end":86,"column_start":66,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":64957,"byte_end":64964,"line_start":118,"line_end":118,"column_start":70,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65884,"byte_end":65885,"line_start":140,"line_end":140,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65976,"byte_end":65977,"line_start":141,"line_end":141,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":66068,"byte_end":66069,"line_start":142,"line_end":142,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":66160,"byte_end":66161,"line_start":143,"line_end":143,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":66238,"byte_end":66239,"line_start":144,"line_end":144,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":74285,"byte_end":74292,"line_start":55,"line_end":55,"column_start":67,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":78619,"byte_end":78621,"line_start":87,"line_end":87,"column_start":47,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":80851,"byte_end":80858,"line_start":169,"line_end":169,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895}],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":91965,"byte_end":91972,"line_start":287,"line_end":287,"column_start":66,"column_end":73},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":92066,"byte_end":92073,"line_start":288,"line_end":288,"column_start":88,"column_end":95},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":92147,"byte_end":92154,"line_start":289,"line_end":289,"column_start":68,"column_end":75},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":92762,"byte_end":92769,"line_start":22,"line_end":22,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":390,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":92814,"byte_end":92821,"line_start":24,"line_end":24,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1029}],"docs":"","sig":null,"attributes":[]},{"id":391,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":92952,"byte_end":92959,"line_start":30,"line_end":30,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1034}],"docs":"","sig":null,"attributes":[]},{"id":392,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":93122,"byte_end":93129,"line_start":36,"line_end":36,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1039}],"docs":"","sig":null,"attributes":[]},{"id":393,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":93235,"byte_end":93242,"line_start":42,"line_end":42,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1044}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":93458,"byte_end":93465,"line_start":52,"line_end":52,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":93613,"byte_end":93620,"line_start":58,"line_end":58,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1056}],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":93938,"byte_end":93945,"line_start":72,"line_end":72,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1061},{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":94323,"byte_end":94330,"line_start":89,"line_end":89,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1067},{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":398,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":94642,"byte_end":94649,"line_start":101,"line_end":101,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1073},{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":399,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":94859,"byte_end":94866,"line_start":113,"line_end":113,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1079},{"krate":0,"index":1080}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":95105,"byte_end":95112,"line_start":126,"line_end":126,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1085},{"krate":0,"index":1086}],"docs":"","sig":null,"attributes":[]},{"id":401,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":95316,"byte_end":95323,"line_start":138,"line_end":138,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1091},{"krate":0,"index":1092}],"docs":"","sig":null,"attributes":[]},{"id":402,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":95548,"byte_end":95555,"line_start":150,"line_end":150,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1097}],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":95769,"byte_end":95776,"line_start":160,"line_end":160,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1102},{"krate":0,"index":1103}],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":12524,"byte_end":12525,"line_start":200,"line_end":200,"column_start":29,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":96898,"byte_end":96900,"line_start":13,"line_end":13,"column_start":47,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1227},{"krate":0,"index":1228}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":97156,"byte_end":97158,"line_start":25,"line_end":25,"column_start":57,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1231},{"krate":0,"index":1232}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":97426,"byte_end":97428,"line_start":37,"line_end":37,"column_start":53,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":98281,"byte_end":98283,"line_start":78,"line_end":78,"column_start":43,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":1250}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":98601,"byte_end":98603,"line_start":97,"line_end":97,"column_start":40,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":98647,"byte_end":98649,"line_start":98,"line_end":98,"column_start":41,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":98699,"byte_end":98701,"line_start":99,"line_end":99,"column_start":47,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":98761,"byte_end":98763,"line_start":100,"line_end":100,"column_start":57,"column_end":59},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":98808,"byte_end":98810,"line_start":102,"line_end":102,"column_start":41,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1263}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":99375,"byte_end":99377,"line_start":127,"line_end":127,"column_start":44,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1266},{"krate":0,"index":1267}],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":115622,"byte_end":115623,"line_start":292,"line_end":292,"column_start":34,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1418},{"krate":0,"index":1419}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":116005,"byte_end":116006,"line_start":309,"line_end":309,"column_start":44,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1423},{"krate":0,"index":1424}],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":116498,"byte_end":116499,"line_start":328,"line_end":328,"column_start":40,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437}],"docs":"","sig":null,"attributes":[]},{"id":418,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":117463,"byte_end":117464,"line_start":374,"line_end":374,"column_start":27,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444}],"docs":"","sig":null,"attributes":[]},{"id":419,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":118032,"byte_end":118033,"line_start":401,"line_end":401,"column_start":30,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450},{"krate":0,"index":1451}],"docs":"","sig":null,"attributes":[]},{"id":424,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":128984,"byte_end":128991,"line_start":288,"line_end":288,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1557}],"docs":"","sig":null,"attributes":[]},{"id":425,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":129055,"byte_end":129062,"line_start":292,"line_end":292,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1560},{"krate":0,"index":1561},{"krate":0,"index":1562},{"krate":0,"index":1563},{"krate":0,"index":1564},{"krate":0,"index":1565},{"krate":0,"index":1566},{"krate":0,"index":1567}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","byte_start":1030,"byte_end":1037,"line_start":36,"line_end":36,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":9}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":12335,"byte_end":12342,"line_start":194,"line_end":194,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":961}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/lib.rs","byte_start":1047,"byte_end":1053,"line_start":37,"line_end":37,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1107}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13031,"byte_end":13036,"line_start":19,"line_end":19,"column_start":39,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":194}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13039,"byte_end":13044,"line_start":19,"line_end":19,"column_start":47,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":2474},"to":{"krate":0,"index":194}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13895,"byte_end":13904,"line_start":49,"line_end":49,"column_start":5,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":2504},"to":{"krate":0,"index":198}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13907,"byte_end":13920,"line_start":49,"line_end":49,"column_start":17,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":194},"to":{"krate":0,"index":198}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":13926,"byte_end":13941,"line_start":49,"line_end":49,"column_start":36,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":698},"to":{"krate":0,"index":198}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":16189,"byte_end":16198,"line_start":125,"line_end":125,"column_start":43,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":2504},"to":{"krate":0,"index":203}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":16201,"byte_end":16214,"line_start":125,"line_end":125,"column_start":55,"column_end":68},"kind":"SuperTrait","from":{"krate":0,"index":194},"to":{"krate":0,"index":203}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":18130,"byte_end":18148,"line_start":189,"line_end":189,"column_start":38,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":198},"to":{"krate":0,"index":208}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":18154,"byte_end":18162,"line_start":189,"line_end":189,"column_start":62,"column_end":70},"kind":"SuperTrait","from":{"krate":0,"index":503},"to":{"krate":0,"index":208}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":19613,"byte_end":19630,"line_start":239,"line_end":239,"column_start":40,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":203},"to":{"krate":0,"index":211}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":19636,"byte_end":19644,"line_start":239,"line_end":239,"column_start":63,"column_end":71},"kind":"SuperTrait","from":{"krate":0,"index":503},"to":{"krate":0,"index":211}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":21500,"byte_end":21512,"line_start":297,"line_end":297,"column_start":39,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":208},"to":{"krate":0,"index":216}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":21518,"byte_end":21532,"line_start":297,"line_end":297,"column_start":57,"column_end":71},"kind":"SuperTrait","from":{"krate":0,"index":211},"to":{"krate":0,"index":216}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":23117,"byte_end":23130,"line_start":348,"line_end":348,"column_start":46,"column_end":59},"kind":"SuperTrait","from":{"krate":0,"index":216},"to":{"krate":0,"index":219}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":25673,"byte_end":25680,"line_start":436,"line_end":436,"column_start":62,"column_end":69},"kind":{"Impl":{"id":52}},"from":{"krate":21,"index":545},"to":{"krate":0,"index":194}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/one_operator.rs","byte_start":25920,"byte_end":25927,"line_start":446,"line_end":446,"column_start":56,"column_end":63},"kind":{"Impl":{"id":53}},"from":{"krate":21,"index":545},"to":{"krate":0,"index":194}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27138,"byte_end":27146,"line_start":24,"line_end":24,"column_start":5,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":870},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27159,"byte_end":27169,"line_start":25,"line_end":25,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":876},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27181,"byte_end":27186,"line_start":26,"line_end":26,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":2062},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27193,"byte_end":27197,"line_start":27,"line_end":27,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2863},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27204,"byte_end":27207,"line_start":28,"line_end":28,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":20,"index":923},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27214,"byte_end":27223,"line_start":29,"line_end":29,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":20,"index":950},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27230,"byte_end":27243,"line_start":30,"line_end":30,"column_start":7,"column_end":20},"kind":"SuperTrait","from":{"krate":20,"index":320},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27250,"byte_end":27253,"line_start":31,"line_end":31,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2947},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27275,"byte_end":27290,"line_start":32,"line_end":32,"column_start":7,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":609},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27297,"byte_end":27312,"line_start":33,"line_end":33,"column_start":7,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":611},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27385,"byte_end":27389,"line_start":36,"line_end":36,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2853},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27396,"byte_end":27400,"line_start":37,"line_end":37,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2865},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27407,"byte_end":27410,"line_start":38,"line_end":38,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3516},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27431,"byte_end":27436,"line_start":40,"line_end":40,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":8887},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":27443,"byte_end":27450,"line_start":41,"line_end":41,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":8894},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/complex.rs","byte_start":38091,"byte_end":38098,"line_start":486,"line_end":486,"column_start":50,"column_end":57},"kind":{"Impl":{"id":56}},"from":{"krate":21,"index":545},"to":{"krate":0,"index":290}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":51516,"byte_end":51523,"line_start":44,"line_end":44,"column_start":52,"column_end":59},"kind":{"Impl":{"id":85}},"from":{"krate":21,"index":545},"to":{"krate":0,"index":503}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":51720,"byte_end":51727,"line_start":54,"line_end":54,"column_start":51,"column_end":58},"kind":{"Impl":{"id":86}},"from":{"krate":21,"index":545},"to":{"krate":0,"index":503}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52308,"byte_end":52310,"line_start":73,"line_end":73,"column_start":19,"column_end":21},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52466,"byte_end":52468,"line_start":81,"line_end":81,"column_start":28,"column_end":30},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1830},"to":{"krate":2,"index":2863}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52504,"byte_end":52506,"line_start":83,"line_end":83,"column_start":29,"column_end":31},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1830},"to":{"krate":2,"index":2474}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52619,"byte_end":52621,"line_start":90,"line_end":90,"column_start":36,"column_end":38},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1830},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52765,"byte_end":52767,"line_start":96,"line_end":96,"column_start":33,"column_end":35},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1830},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52872,"byte_end":52874,"line_start":103,"line_end":103,"column_start":26,"column_end":28},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1830},"to":{"krate":2,"index":2509}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":52915,"byte_end":52917,"line_start":105,"line_end":105,"column_start":34,"column_end":36},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1830},"to":{"krate":2,"index":2551}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":53069,"byte_end":53071,"line_start":112,"line_end":112,"column_start":35,"column_end":37},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":503}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":53179,"byte_end":53181,"line_start":119,"line_end":119,"column_start":33,"column_end":35},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1830},"to":{"krate":19,"index":15}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":53430,"byte_end":53432,"line_start":133,"line_end":133,"column_start":34,"column_end":36},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1830},"to":{"krate":19,"index":66}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":53673,"byte_end":53675,"line_start":145,"line_end":145,"column_start":30,"column_end":32},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1830},"to":{"krate":19,"index":107}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":53906,"byte_end":53908,"line_start":162,"line_end":162,"column_start":18,"column_end":20},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1830},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54011,"byte_end":54013,"line_start":170,"line_end":170,"column_start":24,"column_end":26},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1830},"to":{"krate":2,"index":2959}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54097,"byte_end":54099,"line_start":176,"line_end":176,"column_start":18,"column_end":20},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1830},"to":{"krate":2,"index":2935}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54202,"byte_end":54204,"line_start":184,"line_end":184,"column_start":24,"column_end":26},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1830},"to":{"krate":2,"index":2963}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54298,"byte_end":54300,"line_start":190,"line_end":190,"column_start":28,"column_end":30},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1830},"to":{"krate":2,"index":2920}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54453,"byte_end":54455,"line_start":198,"line_end":198,"column_start":34,"column_end":36},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1830},"to":{"krate":2,"index":2951}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54581,"byte_end":54583,"line_start":204,"line_end":204,"column_start":40,"column_end":42},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":194}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54714,"byte_end":54716,"line_start":211,"line_end":211,"column_start":42,"column_end":44},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":698}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54928,"byte_end":54930,"line_start":223,"line_end":223,"column_start":44,"column_end":46},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":203}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":54981,"byte_end":54983,"line_start":224,"line_end":224,"column_start":45,"column_end":47},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":198}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55030,"byte_end":55032,"line_start":225,"line_end":225,"column_start":41,"column_end":43},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":211}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55077,"byte_end":55079,"line_start":226,"line_end":226,"column_start":39,"column_end":41},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":208}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55125,"byte_end":55127,"line_start":227,"line_end":227,"column_start":40,"column_end":42},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":216}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55180,"byte_end":55182,"line_start":228,"line_end":228,"column_start":47,"column_end":49},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":219}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55203,"byte_end":55205,"line_start":230,"line_end":230,"column_start":14,"column_end":16},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1830},"to":{"krate":20,"index":507}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55284,"byte_end":55286,"line_start":237,"line_end":237,"column_start":15,"column_end":17},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1830},"to":{"krate":20,"index":497}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55529,"byte_end":55531,"line_start":254,"line_end":254,"column_start":63,"column_end":65},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":870}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55833,"byte_end":55835,"line_start":271,"line_end":271,"column_start":39,"column_end":41},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":609}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":55959,"byte_end":55961,"line_start":278,"line_end":278,"column_start":39,"column_end":41},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":611}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/identity.rs","byte_start":56077,"byte_end":56079,"line_start":285,"line_end":285,"column_start":31,"column_end":33},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":613}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56280,"byte_end":56285,"line_start":6,"line_end":6,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":609}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56495,"byte_end":56500,"line_start":12,"line_end":12,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":611}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56706,"byte_end":56721,"line_start":18,"line_end":18,"column_start":20,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":609},"to":{"krate":0,"index":613}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56724,"byte_end":56739,"line_start":18,"line_end":18,"column_start":38,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":611},"to":{"krate":0,"index":613}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":56742,"byte_end":56752,"line_start":18,"line_end":18,"column_start":56,"column_end":66},"kind":"SuperTrait","from":{"krate":2,"index":2551},"to":{"krate":0,"index":613}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":59833,"byte_end":59840,"line_start":126,"line_end":126,"column_start":59,"column_end":66},"kind":{"Impl":{"id":118}},"from":{"krate":21,"index":545},"to":{"krate":0,"index":609}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/lattice.rs","byte_start":60077,"byte_end":60084,"line_start":136,"line_end":136,"column_start":59,"column_end":66},"kind":{"Impl":{"id":119}},"from":{"krate":21,"index":545},"to":{"krate":0,"index":611}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":61150,"byte_end":61170,"line_start":26,"line_end":26,"column_start":4,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":219},"to":{"krate":0,"index":647}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/module.rs","byte_start":61597,"byte_end":61604,"line_start":37,"line_end":37,"column_start":75,"column_end":82},"kind":{"Impl":{"id":120}},"from":{"krate":21,"index":545},"to":{"krate":0,"index":647}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":62368,"byte_end":62372,"line_start":10,"line_end":10,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":2863},"to":{"krate":0,"index":696}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":62699,"byte_end":62704,"line_start":18,"line_end":18,"column_start":41,"column_end":46},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":698}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":63527,"byte_end":63535,"line_start":51,"line_end":51,"column_start":19,"column_end":27},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1941},"to":{"krate":0,"index":696}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":63630,"byte_end":63644,"line_start":58,"line_end":58,"column_start":19,"column_end":33},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1946},"to":{"krate":0,"index":696}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":63745,"byte_end":63761,"line_start":65,"line_end":65,"column_start":19,"column_end":35},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1951},"to":{"krate":0,"index":696}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":64259,"byte_end":64266,"line_start":86,"line_end":86,"column_start":66,"column_end":73},"kind":{"Impl":{"id":139}},"from":{"krate":21,"index":545},"to":{"krate":0,"index":698}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":64957,"byte_end":64964,"line_start":118,"line_end":118,"column_start":70,"column_end":77},"kind":{"Impl":{"id":142}},"from":{"krate":21,"index":545},"to":{"krate":0,"index":698}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65167,"byte_end":65172,"line_start":126,"line_end":126,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":719}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65175,"byte_end":65178,"line_start":126,"line_end":126,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2920},"to":{"krate":0,"index":719}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65203,"byte_end":65212,"line_start":126,"line_end":126,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2951},"to":{"krate":0,"index":719}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65337,"byte_end":65342,"line_start":129,"line_end":129,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":721}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65345,"byte_end":65348,"line_start":129,"line_end":129,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2925},"to":{"krate":0,"index":721}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65373,"byte_end":65382,"line_start":129,"line_end":129,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2955},"to":{"krate":0,"index":721}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65507,"byte_end":65512,"line_start":132,"line_end":132,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":723}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65515,"byte_end":65518,"line_start":132,"line_end":132,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2930},"to":{"krate":0,"index":723}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65543,"byte_end":65552,"line_start":132,"line_end":132,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2959},"to":{"krate":0,"index":723}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65677,"byte_end":65682,"line_start":135,"line_end":135,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":725}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65685,"byte_end":65688,"line_start":135,"line_end":135,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2935},"to":{"krate":0,"index":725}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65713,"byte_end":65722,"line_start":135,"line_end":135,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2963},"to":{"krate":0,"index":725}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65817,"byte_end":65822,"line_start":138,"line_end":138,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":727}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65825,"byte_end":65828,"line_start":138,"line_end":138,"column_start":30,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":2947},"to":{"krate":0,"index":727}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65884,"byte_end":65885,"line_start":140,"line_end":140,"column_start":37,"column_end":38},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":729},"to":{"krate":0,"index":719}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":65976,"byte_end":65977,"line_start":141,"line_end":141,"column_start":37,"column_end":38},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":732},"to":{"krate":0,"index":721}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":66068,"byte_end":66069,"line_start":142,"line_end":142,"column_start":37,"column_end":38},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":735},"to":{"krate":0,"index":723}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":66160,"byte_end":66161,"line_start":143,"line_end":143,"column_start":37,"column_end":38},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":738},"to":{"krate":0,"index":725}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/operator.rs","byte_start":66238,"byte_end":66239,"line_start":144,"line_end":144,"column_start":23,"column_end":24},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":741},"to":{"krate":0,"index":727}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67025,"byte_end":67037,"line_start":23,"line_end":23,"column_start":5,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":290},"to":{"krate":0,"index":771}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67062,"byte_end":67072,"line_start":24,"line_end":24,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":19,"index":66},"to":{"krate":0,"index":771}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67095,"byte_end":67101,"line_start":25,"line_end":25,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":19,"index":107},"to":{"krate":0,"index":771}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67124,"byte_end":67131,"line_start":26,"line_end":26,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":613},"to":{"krate":0,"index":771}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67138,"byte_end":67144,"line_start":27,"line_end":27,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":20,"index":898},"to":{"krate":0,"index":771}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/real.rs","byte_start":67151,"byte_end":67158,"line_start":28,"line_end":28,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":20,"index":230},"to":{"krate":0,"index":771}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72135,"byte_end":72148,"line_start":24,"line_end":24,"column_start":46,"column_end":59},"kind":"SuperTrait","from":{"krate":0,"index":194},"to":{"krate":0,"index":2014}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72216,"byte_end":72234,"line_start":25,"line_end":25,"column_start":46,"column_end":64},"kind":"SuperTrait","from":{"krate":0,"index":198},"to":{"krate":0,"index":2017}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72249,"byte_end":72262,"line_start":25,"line_end":25,"column_start":79,"column_end":92},"kind":"SuperTrait","from":{"krate":0,"index":2014},"to":{"krate":0,"index":2017}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72263,"byte_end":72272,"line_start":25,"line_end":25,"column_start":93,"column_end":102},"kind":"SuperTrait","from":{"krate":0,"index":721},"to":{"krate":0,"index":2017}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72320,"byte_end":72332,"line_start":26,"line_end":26,"column_start":46,"column_end":58},"kind":"SuperTrait","from":{"krate":0,"index":208},"to":{"krate":0,"index":2020}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72353,"byte_end":72371,"line_start":26,"line_end":26,"column_start":79,"column_end":97},"kind":"SuperTrait","from":{"krate":0,"index":2017},"to":{"krate":0,"index":2020}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72372,"byte_end":72381,"line_start":26,"line_end":26,"column_start":98,"column_end":107},"kind":"SuperTrait","from":{"krate":0,"index":727},"to":{"krate":0,"index":2020}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72382,"byte_end":72386,"line_start":26,"line_end":26,"column_start":108,"column_end":112},"kind":"SuperTrait","from":{"krate":20,"index":497},"to":{"krate":0,"index":2020}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72434,"byte_end":72451,"line_start":27,"line_end":27,"column_start":46,"column_end":63},"kind":"SuperTrait","from":{"krate":0,"index":203},"to":{"krate":0,"index":2023}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72467,"byte_end":72480,"line_start":27,"line_end":27,"column_start":79,"column_end":92},"kind":"SuperTrait","from":{"krate":0,"index":2014},"to":{"krate":0,"index":2023}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72481,"byte_end":72490,"line_start":27,"line_end":27,"column_start":93,"column_end":102},"kind":"SuperTrait","from":{"krate":0,"index":719},"to":{"krate":0,"index":2023}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72538,"byte_end":72552,"line_start":28,"line_end":28,"column_start":46,"column_end":60},"kind":"SuperTrait","from":{"krate":0,"index":211},"to":{"krate":0,"index":2026}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72571,"byte_end":72588,"line_start":28,"line_end":28,"column_start":79,"column_end":96},"kind":"SuperTrait","from":{"krate":0,"index":2023},"to":{"krate":0,"index":2026}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72589,"byte_end":72593,"line_start":28,"line_end":28,"column_start":97,"column_end":101},"kind":"SuperTrait","from":{"krate":20,"index":497},"to":{"krate":0,"index":2026}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72641,"byte_end":72654,"line_start":29,"line_end":29,"column_start":46,"column_end":59},"kind":"SuperTrait","from":{"krate":0,"index":216},"to":{"krate":0,"index":2029}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72674,"byte_end":72686,"line_start":29,"line_end":29,"column_start":79,"column_end":91},"kind":"SuperTrait","from":{"krate":0,"index":2020},"to":{"krate":0,"index":2029}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72687,"byte_end":72701,"line_start":29,"line_end":29,"column_start":92,"column_end":106},"kind":"SuperTrait","from":{"krate":0,"index":2026},"to":{"krate":0,"index":2029}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72749,"byte_end":72769,"line_start":30,"line_end":30,"column_start":46,"column_end":66},"kind":"SuperTrait","from":{"krate":0,"index":219},"to":{"krate":0,"index":2032}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72782,"byte_end":72795,"line_start":30,"line_end":30,"column_start":79,"column_end":92},"kind":"SuperTrait","from":{"krate":0,"index":2029},"to":{"krate":0,"index":2032}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72848,"byte_end":72861,"line_start":32,"line_end":32,"column_start":50,"column_end":63},"kind":"SuperTrait","from":{"krate":0,"index":194},"to":{"krate":0,"index":2035}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72937,"byte_end":72955,"line_start":33,"line_end":33,"column_start":50,"column_end":68},"kind":"SuperTrait","from":{"krate":0,"index":198},"to":{"krate":0,"index":2038}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72974,"byte_end":72993,"line_start":33,"line_end":33,"column_start":87,"column_end":106},"kind":"SuperTrait","from":{"krate":0,"index":2035},"to":{"krate":0,"index":2038}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":72994,"byte_end":73003,"line_start":33,"line_end":33,"column_start":107,"column_end":116},"kind":"SuperTrait","from":{"krate":0,"index":725},"to":{"krate":0,"index":2038}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73055,"byte_end":73067,"line_start":34,"line_end":34,"column_start":50,"column_end":62},"kind":"SuperTrait","from":{"krate":0,"index":208},"to":{"krate":0,"index":2041}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73092,"byte_end":73116,"line_start":34,"line_end":34,"column_start":87,"column_end":111},"kind":"SuperTrait","from":{"krate":0,"index":2038},"to":{"krate":0,"index":2041}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73117,"byte_end":73120,"line_start":34,"line_end":34,"column_start":112,"column_end":115},"kind":"SuperTrait","from":{"krate":20,"index":507},"to":{"krate":0,"index":2041}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73172,"byte_end":73189,"line_start":35,"line_end":35,"column_start":50,"column_end":67},"kind":"SuperTrait","from":{"krate":0,"index":203},"to":{"krate":0,"index":2044}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73209,"byte_end":73228,"line_start":35,"line_end":35,"column_start":87,"column_end":106},"kind":"SuperTrait","from":{"krate":0,"index":2035},"to":{"krate":0,"index":2044}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73229,"byte_end":73238,"line_start":35,"line_end":35,"column_start":107,"column_end":116},"kind":"SuperTrait","from":{"krate":0,"index":723},"to":{"krate":0,"index":2044}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73290,"byte_end":73304,"line_start":36,"line_end":36,"column_start":50,"column_end":64},"kind":"SuperTrait","from":{"krate":0,"index":211},"to":{"krate":0,"index":2047}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73327,"byte_end":73350,"line_start":36,"line_end":36,"column_start":87,"column_end":110},"kind":"SuperTrait","from":{"krate":0,"index":2044},"to":{"krate":0,"index":2047}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73351,"byte_end":73354,"line_start":36,"line_end":36,"column_start":111,"column_end":114},"kind":"SuperTrait","from":{"krate":20,"index":507},"to":{"krate":0,"index":2047}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73406,"byte_end":73419,"line_start":37,"line_end":37,"column_start":50,"column_end":63},"kind":"SuperTrait","from":{"krate":0,"index":216},"to":{"krate":0,"index":2050}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73443,"byte_end":73461,"line_start":37,"line_end":37,"column_start":87,"column_end":105},"kind":"SuperTrait","from":{"krate":0,"index":2041},"to":{"krate":0,"index":2050}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73462,"byte_end":73482,"line_start":37,"line_end":37,"column_start":106,"column_end":126},"kind":"SuperTrait","from":{"krate":0,"index":2047},"to":{"krate":0,"index":2050}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73536,"byte_end":73556,"line_start":38,"line_end":38,"column_start":52,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":219},"to":{"krate":0,"index":2053}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73575,"byte_end":73594,"line_start":38,"line_end":38,"column_start":91,"column_end":110},"kind":"SuperTrait","from":{"krate":0,"index":2050},"to":{"krate":0,"index":2053}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73638,"byte_end":73650,"line_start":40,"line_end":40,"column_start":41,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":929},"to":{"krate":0,"index":2056}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73663,"byte_end":73683,"line_start":40,"line_end":40,"column_start":66,"column_end":86},"kind":"SuperTrait","from":{"krate":0,"index":2032},"to":{"krate":0,"index":2056}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73684,"byte_end":73704,"line_start":40,"line_end":40,"column_start":87,"column_end":107},"kind":"SuperTrait","from":{"krate":0,"index":2047},"to":{"krate":0,"index":2056}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73747,"byte_end":73770,"line_start":41,"line_end":41,"column_start":41,"column_end":64},"kind":"SuperTrait","from":{"krate":0,"index":941},"to":{"krate":0,"index":2059}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73772,"byte_end":73776,"line_start":41,"line_end":41,"column_start":66,"column_end":70},"kind":"SuperTrait","from":{"krate":0,"index":2056},"to":{"krate":0,"index":2059}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73819,"byte_end":73832,"line_start":42,"line_end":42,"column_start":41,"column_end":54},"kind":"SuperTrait","from":{"krate":0,"index":951},"to":{"krate":0,"index":2062}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73844,"byte_end":73859,"line_start":42,"line_end":42,"column_start":66,"column_end":81},"kind":"SuperTrait","from":{"krate":0,"index":2059},"to":{"krate":0,"index":2062}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73860,"byte_end":73886,"line_start":42,"line_end":42,"column_start":82,"column_end":108},"kind":"SuperTrait","from":{"krate":0,"index":2053},"to":{"krate":0,"index":2062}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":73968,"byte_end":73982,"line_start":46,"line_end":46,"column_start":5,"column_end":19},"kind":"SuperTrait","from":{"krate":0,"index":647},"to":{"krate":0,"index":857}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":74028,"byte_end":74048,"line_start":47,"line_end":47,"column_start":7,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":2032},"to":{"krate":0,"index":857}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":74055,"byte_end":74064,"line_start":48,"line_end":48,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":0,"index":723},"to":{"krate":0,"index":857}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/specialized.rs","byte_start":74285,"byte_end":74292,"line_start":55,"line_end":55,"column_start":67,"column_end":74},"kind":{"Impl":{"id":150}},"from":{"krate":21,"index":545},"to":{"krate":0,"index":857}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":75793,"byte_end":75798,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":870}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":77789,"byte_end":77794,"line_start":64,"line_end":64,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":876}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":78619,"byte_end":78621,"line_start":87,"line_end":87,"column_start":47,"column_end":49},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":884},"to":{"krate":0,"index":876}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/subset.rs","byte_start":80851,"byte_end":80858,"line_start":169,"line_end":169,"column_start":56,"column_end":63},"kind":{"Impl":{"id":295}},"from":{"krate":21,"index":545},"to":{"krate":0,"index":870}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":83391,"byte_end":83411,"line_start":31,"line_end":31,"column_start":5,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":219},"to":{"krate":0,"index":929}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":83417,"byte_end":83431,"line_start":31,"line_end":31,"column_start":31,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":211},"to":{"krate":0,"index":929}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":86747,"byte_end":86759,"line_start":130,"line_end":130,"column_start":5,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":929},"to":{"krate":0,"index":941}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":89587,"byte_end":89610,"line_start":214,"line_end":214,"column_start":5,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":941},"to":{"krate":0,"index":951}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":89619,"byte_end":89639,"line_start":214,"line_end":214,"column_start":37,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":219},"to":{"krate":0,"index":951}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":91965,"byte_end":91972,"line_start":287,"line_end":287,"column_start":66,"column_end":73},"kind":{"Impl":{"id":386}},"from":{"krate":21,"index":545},"to":{"krate":0,"index":929}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":92066,"byte_end":92073,"line_start":288,"line_end":288,"column_start":88,"column_end":95},"kind":{"Impl":{"id":387}},"from":{"krate":21,"index":545},"to":{"krate":0,"index":941}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/two_operators.rs","byte_start":92147,"byte_end":92154,"line_start":289,"line_end":289,"column_start":68,"column_end":75},"kind":{"Impl":{"id":388}},"from":{"krate":21,"index":545},"to":{"krate":0,"index":951}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":92762,"byte_end":92769,"line_start":22,"line_end":22,"column_start":30,"column_end":37},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":2783},"to":{"krate":2,"index":2863}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":92814,"byte_end":92821,"line_start":24,"line_end":24,"column_start":32,"column_end":39},"kind":{"Impl":{"id":390}},"from":{"krate":0,"index":2783},"to":{"krate":2,"index":2474}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":92952,"byte_end":92959,"line_start":30,"line_end":30,"column_start":42,"column_end":49},"kind":{"Impl":{"id":391}},"from":{"krate":0,"index":2783},"to":{"krate":2,"index":2551}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":93122,"byte_end":93129,"line_start":36,"line_end":36,"column_start":40,"column_end":47},"kind":{"Impl":{"id":392}},"from":{"krate":0,"index":2783},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":93235,"byte_end":93242,"line_start":42,"line_end":42,"column_start":15,"column_end":22},"kind":{"Impl":{"id":393}},"from":{"krate":0,"index":2783},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":93458,"byte_end":93465,"line_start":52,"line_end":52,"column_start":56,"column_end":63},"kind":{"Impl":{"id":394}},"from":{"krate":0,"index":2783},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":93613,"byte_end":93620,"line_start":58,"line_end":58,"column_start":40,"column_end":47},"kind":{"Impl":{"id":395}},"from":{"krate":0,"index":2783},"to":{"krate":19,"index":15}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":93938,"byte_end":93945,"line_start":72,"line_end":72,"column_start":42,"column_end":49},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":2783},"to":{"krate":19,"index":66}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":94323,"byte_end":94330,"line_start":89,"line_end":89,"column_start":34,"column_end":41},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":2783},"to":{"krate":19,"index":107}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":94642,"byte_end":94649,"line_start":101,"line_end":101,"column_start":51,"column_end":58},"kind":{"Impl":{"id":398}},"from":{"krate":0,"index":2783},"to":{"krate":2,"index":2920}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":94859,"byte_end":94866,"line_start":113,"line_end":113,"column_start":33,"column_end":40},"kind":{"Impl":{"id":399}},"from":{"krate":0,"index":2783},"to":{"krate":2,"index":2947}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":95105,"byte_end":95112,"line_start":126,"line_end":126,"column_start":51,"column_end":58},"kind":{"Impl":{"id":400}},"from":{"krate":0,"index":2783},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":95316,"byte_end":95323,"line_start":138,"line_end":138,"column_start":51,"column_end":58},"kind":{"Impl":{"id":401}},"from":{"krate":0,"index":2783},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":95548,"byte_end":95555,"line_start":150,"line_end":150,"column_start":48,"column_end":55},"kind":{"Impl":{"id":402}},"from":{"krate":0,"index":2783},"to":{"krate":0,"index":698}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/wrapper.rs","byte_start":95769,"byte_end":95776,"line_start":160,"line_end":160,"column_start":51,"column_end":58},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":2783},"to":{"krate":2,"index":2935}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":12482,"byte_end":12491,"line_start":198,"line_end":198,"column_start":17,"column_end":26},"kind":"SuperTrait","from":{"krate":0,"index":771},"to":{"krate":0,"index":1104}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/general/mod.rs","byte_start":12524,"byte_end":12525,"line_start":200,"line_end":200,"column_start":29,"column_end":30},"kind":{"Impl":{"id":404}},"from":{"krate":0,"index":1106},"to":{"krate":0,"index":1104}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":96898,"byte_end":96900,"line_start":13,"line_end":13,"column_start":47,"column_end":49},"kind":{"Impl":{"id":405}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":1355}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":97156,"byte_end":97158,"line_start":25,"line_end":25,"column_start":57,"column_end":59},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":1359}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":97426,"byte_end":97428,"line_start":37,"line_end":37,"column_start":53,"column_end":55},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":1363}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":98281,"byte_end":98283,"line_start":78,"line_end":78,"column_start":43,"column_end":45},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":1376}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":98601,"byte_end":98603,"line_start":97,"line_end":97,"column_start":40,"column_end":42},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":1398}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":98647,"byte_end":98649,"line_start":98,"line_end":98,"column_start":41,"column_end":43},"kind":{"Impl":{"id":410}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":1392}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":98699,"byte_end":98701,"line_start":99,"line_end":99,"column_start":47,"column_end":49},"kind":{"Impl":{"id":411}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":1394}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":98761,"byte_end":98763,"line_start":100,"line_end":100,"column_start":57,"column_end":59},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":1396}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":98808,"byte_end":98810,"line_start":102,"line_end":102,"column_start":41,"column_end":43},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":1410}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/id.rs","byte_start":99375,"byte_end":99377,"line_start":127,"line_end":127,"column_start":44,"column_end":46},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":1830},"to":{"krate":0,"index":1404}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":99863,"byte_end":99868,"line_start":8,"line_end":8,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":1285}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":99871,"byte_end":99876,"line_start":8,"line_end":8,"column_start":13,"column_end":18},"kind":"SuperTrait","from":{"krate":2,"index":2474},"to":{"krate":0,"index":1285}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":99879,"byte_end":99882,"line_start":8,"line_end":8,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":2930},"to":{"krate":0,"index":1285}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":101333,"byte_end":101339,"line_start":52,"line_end":52,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":1285},"to":{"krate":0,"index":1297}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":102575,"byte_end":102581,"line_start":91,"line_end":91,"column_start":5,"column_end":11},"kind":"SuperTrait","from":{"krate":0,"index":1285},"to":{"krate":0,"index":1304}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":102712,"byte_end":102732,"line_start":95,"line_end":95,"column_start":9,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":2047},"to":{"krate":0,"index":1304}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103564,"byte_end":103576,"line_start":126,"line_end":126,"column_start":5,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":1304},"to":{"krate":0,"index":1311}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":103583,"byte_end":103592,"line_start":127,"line_end":127,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":0,"index":1297},"to":{"krate":0,"index":1311}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":104258,"byte_end":104270,"line_start":150,"line_end":150,"column_start":35,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":1304},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/matrix.rs","byte_start":104273,"byte_end":104292,"line_start":150,"line_end":150,"column_start":50,"column_end":69},"kind":"SuperTrait","from":{"krate":0,"index":2050},"to":{"krate":0,"index":1315}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":104755,"byte_end":104775,"line_start":10,"line_end":10,"column_start":46,"column_end":66},"kind":"SuperTrait","from":{"krate":0,"index":2047},"to":{"krate":0,"index":1355}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":105353,"byte_end":105372,"line_start":23,"line_end":23,"column_start":5,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":2050},"to":{"krate":0,"index":1359}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":105375,"byte_end":105389,"line_start":23,"line_end":23,"column_start":27,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":1355},"to":{"krate":0,"index":1359}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":106104,"byte_end":106128,"line_start":37,"line_end":37,"column_start":52,"column_end":76},"kind":"SuperTrait","from":{"krate":0,"index":1359},"to":{"krate":0,"index":1363}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":108439,"byte_end":108459,"line_start":102,"line_end":102,"column_start":5,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":1363},"to":{"krate":0,"index":1376}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111265,"byte_end":111275,"line_start":187,"line_end":187,"column_start":40,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":1376},"to":{"krate":0,"index":1392}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111444,"byte_end":111452,"line_start":190,"line_end":190,"column_start":46,"column_end":54},"kind":"SuperTrait","from":{"krate":0,"index":1392},"to":{"krate":0,"index":1394}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111580,"byte_end":111588,"line_start":193,"line_end":193,"column_start":56,"column_end":64},"kind":"SuperTrait","from":{"krate":0,"index":1392},"to":{"krate":0,"index":1396}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111709,"byte_end":111729,"line_start":197,"line_end":197,"column_start":5,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":1363},"to":{"krate":0,"index":1398}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":111798,"byte_end":111806,"line_start":198,"line_end":198,"column_start":7,"column_end":15},"kind":"SuperTrait","from":{"krate":0,"index":870},"to":{"krate":0,"index":1398}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":112953,"byte_end":112967,"line_start":230,"line_end":230,"column_start":5,"column_end":19},"kind":"SuperTrait","from":{"krate":0,"index":1394},"to":{"krate":0,"index":1404}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":114338,"byte_end":114362,"line_start":259,"line_end":259,"column_start":5,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":1396},"to":{"krate":0,"index":1410}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":114385,"byte_end":114399,"line_start":259,"line_end":259,"column_start":52,"column_end":66},"kind":"SuperTrait","from":{"krate":0,"index":1394},"to":{"krate":0,"index":1410}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":115622,"byte_end":115623,"line_start":292,"line_end":292,"column_start":34,"column_end":35},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":1416},"to":{"krate":0,"index":1355}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":116005,"byte_end":116006,"line_start":309,"line_end":309,"column_start":44,"column_end":45},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":1421},"to":{"krate":0,"index":1359}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":116498,"byte_end":116499,"line_start":328,"line_end":328,"column_start":40,"column_end":41},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":1426},"to":{"krate":0,"index":1363}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":117463,"byte_end":117464,"line_start":374,"line_end":374,"column_start":27,"column_end":28},"kind":{"Impl":{"id":418}},"from":{"krate":0,"index":1439},"to":{"krate":0,"index":1398}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/transformation.rs","byte_start":118032,"byte_end":118033,"line_start":401,"line_end":401,"column_start":30,"column_end":31},"kind":{"Impl":{"id":419}},"from":{"krate":0,"index":1446},"to":{"krate":0,"index":1376}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":118741,"byte_end":118747,"line_start":11,"line_end":11,"column_start":24,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":857},"to":{"krate":0,"index":1515}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":118948,"byte_end":118959,"line_start":20,"line_end":20,"column_start":24,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":1515},"to":{"krate":0,"index":1517}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":120330,"byte_end":120341,"line_start":51,"line_end":51,"column_start":23,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":1517},"to":{"krate":0,"index":1526}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":121154,"byte_end":121165,"line_start":80,"line_end":80,"column_start":5,"column_end":16},"kind":"SuperTrait","from":{"krate":0,"index":1515},"to":{"krate":0,"index":1529}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":121172,"byte_end":121177,"line_start":81,"line_end":81,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":3149},"to":{"krate":0,"index":1529}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":121230,"byte_end":121238,"line_start":82,"line_end":82,"column_start":7,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":3153},"to":{"krate":0,"index":1529}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":122383,"byte_end":122393,"line_start":114,"line_end":114,"column_start":5,"column_end":15},"kind":"SuperTrait","from":{"krate":0,"index":1526},"to":{"krate":0,"index":1537}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":122396,"byte_end":122416,"line_start":114,"line_end":114,"column_start":18,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":1529},"to":{"krate":0,"index":1537}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123300,"byte_end":123305,"line_start":131,"line_end":131,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":1541}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123312,"byte_end":123317,"line_start":132,"line_end":132,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2474},"to":{"krate":0,"index":1541}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123324,"byte_end":123333,"line_start":133,"line_end":133,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":2504},"to":{"krate":0,"index":1541}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123340,"byte_end":123343,"line_start":134,"line_end":134,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2925},"to":{"krate":0,"index":1541}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":123401,"byte_end":123410,"line_start":135,"line_end":135,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":0,"index":719},"to":{"krate":0,"index":1541}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":124115,"byte_end":124126,"line_start":156,"line_end":156,"column_start":27,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":1541},"to":{"krate":0,"index":1545}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":124264,"byte_end":124273,"line_start":158,"line_end":158,"column_start":27,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":723},"to":{"krate":0,"index":1545}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":124395,"byte_end":124404,"line_start":160,"line_end":160,"column_start":27,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":725},"to":{"krate":0,"index":1545}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":124532,"byte_end":124535,"line_start":162,"line_end":162,"column_start":27,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2947},"to":{"krate":0,"index":1545}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":128984,"byte_end":128991,"line_start":288,"line_end":288,"column_start":49,"column_end":56},"kind":{"Impl":{"id":424}},"from":{"krate":21,"index":545},"to":{"krate":0,"index":1515}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/alga-0.9.3/src/linear/vector.rs","byte_start":129055,"byte_end":129062,"line_start":292,"line_end":292,"column_start":36,"column_end":43},"kind":{"Impl":{"id":425}},"from":{"krate":21,"index":545},"to":{"krate":0,"index":1517}}]}