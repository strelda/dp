{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3","program":"/home/strelda/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","generic_array","/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=a5bbfaa4fc14dcee","-C","extra-filename=-a5bbfaa4fc14dcee","--out-dir","/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps","-L","dependency=/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps","--extern","typenum=/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps/libtypenum-8fa0e6bbb9428c5d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/strelda/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps/libgeneric_array-a5bbfaa4fc14dcee.rmeta"},"prelude":{"crate_id":{"name":"generic_array","disambiguator":[12079527779217415778,13083402877010744411]},"crate_root":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src","external_crates":[{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2572959971889902175,17506693968225989007]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[7380289047210505863,13821127130725723065]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[15494144285296940423,1517275930380298805]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","num":4,"id":{"name":"typenum","disambiguator":[6578675967236591406,12581686752636525447]}}],"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":0,"byte_end":16976,"line_start":1,"line_end":635,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":275},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":1550,"byte_end":1566,"line_start":71,"line_end":71,"column_start":21,"column_end":37},"alias_span":null,"name":"GenericArrayIter","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":0,"byte_end":16976,"line_start":1,"line_end":635,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":43},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":199},{"krate":0,"index":248},{"krate":0,"index":332},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":440},{"krate":0,"index":443},{"krate":0,"index":449},{"krate":0,"index":453},{"krate":0,"index":456},{"krate":0,"index":462},{"krate":0,"index":466},{"krate":0,"index":469},{"krate":0,"index":473},{"krate":0,"index":477},{"krate":0,"index":481},{"krate":0,"index":484},{"krate":0,"index":487},{"krate":0,"index":492},{"krate":0,"index":496},{"krate":0,"index":501},{"krate":0,"index":507},{"krate":0,"index":511},{"krate":0,"index":516},{"krate":0,"index":521},{"krate":0,"index":525},{"krate":0,"index":532},{"krate":0,"index":539},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":565},{"krate":0,"index":570},{"krate":0,"index":586},{"krate":0,"index":593},{"krate":0,"index":598},{"krate":0,"index":603},{"krate":0,"index":607},{"krate":0,"index":613}],"decl_id":null,"docs":" This crate implements a structure that can be used as a generic array type.\n Core Rust array types `[T; N]` can't be used generically with\n respect to `N`, so for example this:","sig":null,"attributes":[{"value":"/ This crate implements a structure that can be used as a generic array type.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":0,"byte_end":79,"line_start":1,"line_end":1,"column_start":1,"column_end":80}},{"value":"/ Core Rust array types `[T; N]` can't be used generically with","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":80,"byte_end":145,"line_start":2,"line_end":2,"column_start":1,"column_end":66}},{"value":"/ respect to `N`, so for example this:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":146,"byte_end":186,"line_start":3,"line_end":3,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":187,"byte_end":190,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ```{should_fail}","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":191,"byte_end":211,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/ struct Foo<T, N> {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":212,"byte_end":234,"line_start":6,"line_end":6,"column_start":1,"column_end":23}},{"value":"/     data: [T; N]","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":235,"byte_end":255,"line_start":7,"line_end":7,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":256,"byte_end":261,"line_start":8,"line_end":8,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":262,"byte_end":269,"line_start":9,"line_end":9,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":270,"byte_end":273,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ won't work.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":274,"byte_end":289,"line_start":11,"line_end":11,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":290,"byte_end":293,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ **generic-array** exports a `GenericArray<T,N>` type, which lets","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":294,"byte_end":362,"line_start":13,"line_end":13,"column_start":1,"column_end":69}},{"value":"/ the above be implemented as:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":363,"byte_end":395,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":396,"byte_end":399,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":400,"byte_end":407,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ # use generic_array::{ArrayLength, GenericArray};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":408,"byte_end":461,"line_start":17,"line_end":17,"column_start":1,"column_end":54}},{"value":"/ struct Foo<T, N: ArrayLength<T>> {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":462,"byte_end":500,"line_start":18,"line_end":18,"column_start":1,"column_end":39}},{"value":"/     data: GenericArray<T,N>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":501,"byte_end":532,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":533,"byte_end":538,"line_start":20,"line_end":20,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":539,"byte_end":546,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":547,"byte_end":550,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The `ArrayLength<T>` trait is implemented by default for","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":551,"byte_end":611,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/ [unsigned integer types](../typenum/uint/index.html) from","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":612,"byte_end":673,"line_start":24,"line_end":24,"column_start":1,"column_end":62}},{"value":"/ [typenum](../typenum/index.html).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":674,"byte_end":711,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":712,"byte_end":715,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ For ease of use, an `arr!` macro is provided - example below:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":716,"byte_end":781,"line_start":27,"line_end":27,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":782,"byte_end":785,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":786,"byte_end":793,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":794,"byte_end":812,"line_start":30,"line_end":30,"column_start":1,"column_end":19}},{"value":"/ # extern crate generic_array;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":813,"byte_end":846,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"/ # extern crate typenum;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":847,"byte_end":874,"line_start":32,"line_end":32,"column_start":1,"column_end":28}},{"value":"/ # fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":875,"byte_end":892,"line_start":33,"line_end":33,"column_start":1,"column_end":18}},{"value":"/ let array = arr![u32; 1, 2, 3];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":893,"byte_end":928,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(array[2], 3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":929,"byte_end":957,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":958,"byte_end":965,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":966,"byte_end":973,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"deny(missing_docs)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":975,"byte_end":997,"line_start":39,"line_end":39,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":998,"byte_end":1008,"line_start":40,"line_end":40,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":173},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/arr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"arr","qualname":"::arr","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/arr.rs","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":187},{"krate":0,"index":192},{"krate":0,"index":197}],"decl_id":null,"docs":" Implementation for `arr!` macro.\n","sig":null,"attributes":[{"value":"/ Implementation for `arr!` macro.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/arr.rs","byte_start":25623,"byte_end":25659,"line_start":1,"line_end":1,"column_start":1,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":183},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/arr.rs","byte_start":25767,"byte_end":25776,"line_start":8,"line_end":8,"column_start":11,"column_end":20},"name":"AddLength","qualname":"::arr::AddLength","value":"AddLength<T, N: ArrayLength<T>>: ArrayLength<T>","parent":null,"children":[{"krate":0,"index":186}],"decl_id":null,"docs":" Helper trait for `arr!` macro\n","sig":null,"attributes":[{"value":"/ Helper trait for `arr!` macro","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/arr.rs","byte_start":25723,"byte_end":25756,"line_start":7,"line_end":7,"column_start":1,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":186},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/arr.rs","byte_start":25851,"byte_end":25857,"line_start":10,"line_end":10,"column_start":10,"column_end":16},"name":"Output","qualname":"::arr::AddLength::Output","value":"type Output: ArrayLength<T>;","parent":{"krate":0,"index":183},"children":[],"decl_id":null,"docs":" Resulting length\n","sig":null,"attributes":[{"value":"/ Resulting length","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/arr.rs","byte_start":25821,"byte_end":25841,"line_start":9,"line_end":9,"column_start":5,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":192},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/arr.rs","byte_start":26117,"byte_end":26120,"line_start":23,"line_end":23,"column_start":10,"column_end":13},"name":"Inc","qualname":"::arr::Inc","value":"<U as AddLength<T, U1>>::Output","parent":null,"children":[],"decl_id":null,"docs":" Helper type for `arr!` macro\n","sig":null,"attributes":[{"value":"/ Helper type for `arr!` macro","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/arr.rs","byte_start":26075,"byte_end":26107,"line_start":22,"line_end":22,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":199},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"functional","qualname":"::functional","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":203},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":211},{"krate":0,"index":217},{"krate":0,"index":223},{"krate":0,"index":227},{"krate":0,"index":240},{"krate":0,"index":244}],"decl_id":null,"docs":" Functional programming with generic sequences","sig":null,"attributes":[{"value":"/ Functional programming with generic sequences","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":29235,"byte_end":29284,"line_start":1,"line_end":1,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":29285,"byte_end":29288,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Please see `tests/generics.rs` for examples of how to best use these in your generic functions.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":29289,"byte_end":29388,"line_start":3,"line_end":3,"column_start":1,"column_end":100}}]},{"kind":"Trait","id":{"krate":0,"index":207},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":29602,"byte_end":29623,"line_start":12,"line_end":12,"column_start":18,"column_end":39},"name":"MappedGenericSequence","qualname":"::functional::MappedGenericSequence","value":"MappedGenericSequence<T, U>: GenericSequence<T>","parent":null,"children":[{"krate":0,"index":210}],"decl_id":null,"docs":" Defines the relationship between one generic sequence and another,\n for operations such as `map` and `zip`.\n","sig":null,"attributes":[{"value":"/ Defines the relationship between one generic sequence and another,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":29470,"byte_end":29540,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/ for operations such as `map` and `zip`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":29541,"byte_end":29584,"line_start":11,"line_end":11,"column_start":1,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":210},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":29730,"byte_end":29736,"line_start":17,"line_end":17,"column_start":10,"column_end":16},"name":"Mapped","qualname":"::functional::MappedGenericSequence::Mapped","value":"type Mapped: GenericSequence<U, Length = Self::Length>;","parent":{"krate":0,"index":207},"children":[],"decl_id":null,"docs":" Mapped sequence type\n","sig":null,"attributes":[{"value":"/ Mapped sequence type","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":29696,"byte_end":29720,"line_start":16,"line_end":16,"column_start":5,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":223},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":30505,"byte_end":30519,"line_start":39,"line_end":39,"column_start":10,"column_end":24},"name":"MappedSequence","qualname":"::functional::MappedSequence","value":"<<S as MappedGenericSequence<T, U>>::Mapped as GenericSequence<U>>::Sequence","parent":null,"children":[],"decl_id":null,"docs":" Accessor type for a mapped generic sequence\n","sig":null,"attributes":[{"value":"/ Accessor type for a mapped generic sequence","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":30448,"byte_end":30495,"line_start":38,"line_end":38,"column_start":1,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":227},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":30696,"byte_end":30714,"line_start":43,"line_end":43,"column_start":18,"column_end":36},"name":"FunctionalSequence","qualname":"::functional::FunctionalSequence","value":"FunctionalSequence<T>: GenericSequence<T>","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":237}],"decl_id":null,"docs":" Defines functional programming methods for generic sequences\n","sig":null,"attributes":[{"value":"/ Defines functional programming methods for generic sequences","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":30614,"byte_end":30678,"line_start":42,"line_end":42,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":31005,"byte_end":31008,"line_start":48,"line_end":48,"column_start":8,"column_end":11},"name":"map","qualname":"::functional::FunctionalSequence::map","value":"pub fn map<U, F>(Self, F) -> MappedSequence<Self, T, U> where\nSelf: MappedGenericSequence<T, U>, Self::Length: ArrayLength<U>,\nF: FnMut(Self::Item) -> U","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Maps a `GenericSequence` to another `GenericSequence`.","sig":null,"attributes":[{"value":"/ Maps a `GenericSequence` to another `GenericSequence`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":30744,"byte_end":30802,"line_start":44,"line_end":44,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":30807,"byte_end":30810,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ If the mapping function panics, any already initialized elements in the new sequence","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":30815,"byte_end":30903,"line_start":46,"line_end":46,"column_start":5,"column_end":93}},{"value":"/ will be dropped, AND any unused elements in the source sequence will also be dropped.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":30908,"byte_end":30997,"line_start":47,"line_end":47,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":31647,"byte_end":31650,"line_start":63,"line_end":63,"column_start":8,"column_end":11},"name":"zip","qualname":"::functional::FunctionalSequence::zip","value":"pub fn zip<B, Rhs, U, F>(Self, Rhs, F) -> MappedSequence<Self, T, U> where\nSelf: MappedGenericSequence<T, U>, Rhs: MappedGenericSequence<B, U, Mapped =\nMappedSequence<Self, T, U>>, Self::Length: ArrayLength<B> + ArrayLength<U>,\nRhs: GenericSequence<B, Length = Self::Length>,\nF: FnMut(Self::Item, Rhs::Item) -> U","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Combines two `GenericSequence` instances and iterates through both of them,\n initializing a new `GenericSequence` with the result of the zipped mapping function.","sig":null,"attributes":[{"value":"/ Combines two `GenericSequence` instances and iterates through both of them,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":31257,"byte_end":31336,"line_start":57,"line_end":57,"column_start":5,"column_end":84}},{"value":"/ initializing a new `GenericSequence` with the result of the zipped mapping function.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":31341,"byte_end":31429,"line_start":58,"line_end":58,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":31434,"byte_end":31437,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ If the mapping function panics, any already initialized elements in the new sequence","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":31442,"byte_end":31530,"line_start":60,"line_end":60,"column_start":5,"column_end":93}},{"value":"/ will be dropped, AND any unused elements in the source sequences will also be dropped.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":31535,"byte_end":31625,"line_start":61,"line_end":61,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":31630,"byte_end":31639,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":32210,"byte_end":32214,"line_start":77,"line_end":77,"column_start":8,"column_end":12},"name":"fold","qualname":"::functional::FunctionalSequence::fold","value":"pub fn fold<U, F>(Self, U, F) -> U where F: FnMut(U, Self::Item) -> U","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Folds (or reduces) a sequence of data into a single value.","sig":null,"attributes":[{"value":"/ Folds (or reduces) a sequence of data into a single value.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":32058,"byte_end":32120,"line_start":74,"line_end":74,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":32125,"byte_end":32128,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ If the fold function panics, any unused elements will be dropped.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":32133,"byte_end":32202,"line_start":76,"line_end":76,"column_start":5,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":248},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iter","qualname":"::iter","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":266},{"krate":0,"index":269},{"krate":0,"index":272},{"krate":0,"index":275},{"krate":0,"index":281},{"krate":0,"index":286},{"krate":0,"index":292},{"krate":0,"index":296},{"krate":0,"index":300},{"krate":0,"index":304},{"krate":0,"index":317},{"krate":0,"index":325},{"krate":0,"index":329}],"decl_id":null,"docs":" `GenericArray` iterator implementation.\n","sig":null,"attributes":[{"value":"/ `GenericArray` iterator implementation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":32589,"byte_end":32632,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":275},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":32829,"byte_end":32845,"line_start":9,"line_end":9,"column_start":12,"column_end":28},"name":"GenericArrayIter","qualname":"::iter::GenericArrayIter","value":"GenericArrayIter {  }","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280}],"decl_id":null,"docs":" An iterator that moves out of a `GenericArray`\n","sig":null,"attributes":[{"value":"/ An iterator that moves out of a `GenericArray`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":32767,"byte_end":32817,"line_start":8,"line_end":8,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":33503,"byte_end":33511,"line_start":36,"line_end":36,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<GenericArrayIter<T, N>>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining items of this iterator as a slice\n","sig":null,"attributes":[{"value":"/ Returns the remaining items of this iterator as a slice","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":33418,"byte_end":33477,"line_start":34,"line_end":34,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":33482,"byte_end":33491,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":33693,"byte_end":33705,"line_start":42,"line_end":42,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<GenericArrayIter<T, N>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining items of this iterator as a mutable slice\n","sig":null,"attributes":[{"value":"/ Returns the remaining items of this iterator as a mutable slice","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":33600,"byte_end":33667,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":33672,"byte_end":33681,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":332},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sequence","qualname":"::sequence","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":338},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":345},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":376},{"krate":0,"index":384},{"krate":0,"index":389},{"krate":0,"index":394},{"krate":0,"index":400},{"krate":0,"index":406},{"krate":0,"index":412},{"krate":0,"index":419},{"krate":0,"index":425}],"decl_id":null,"docs":" Useful traits for manipulating sequences of data stored in `GenericArray`s\n","sig":null,"attributes":[{"value":"/ Useful traits for manipulating sequences of data stored in `GenericArray`s","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":38381,"byte_end":38459,"line_start":1,"line_end":1,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":349},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":38728,"byte_end":38743,"line_start":11,"line_end":11,"column_start":18,"column_end":33},"name":"GenericSequence","qualname":"::sequence::GenericSequence","value":"GenericSequence<T>: Sized + IntoIterator","parent":null,"children":[{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":355},{"krate":0,"index":360}],"decl_id":null,"docs":" Defines some sequence with an associated length and iteration capabilities.","sig":null,"attributes":[{"value":"/ Defines some sequence with an associated length and iteration capabilities.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":38559,"byte_end":38638,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":38639,"byte_end":38642,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This is useful for passing N-length generic arrays as generics.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":38643,"byte_end":38710,"line_start":10,"line_end":10,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":351},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":38821,"byte_end":38827,"line_start":13,"line_end":13,"column_start":10,"column_end":16},"name":"Length","qualname":"::sequence::GenericSequence::Length","value":"type Length: ArrayLength<T>;","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" `GenericArray` associated length\n","sig":null,"attributes":[{"value":"/ `GenericArray` associated length","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":38775,"byte_end":38811,"line_start":12,"line_end":12,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":352},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":38957,"byte_end":38965,"line_start":16,"line_end":16,"column_start":10,"column_end":18},"name":"Sequence","qualname":"::sequence::GenericSequence::Sequence","value":"type Sequence: GenericSequence<T, Length = Self::Length> + FromIterator<T>;","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Concrete sequence type used in conjuction with reference implementations of `GenericSequence`\n","sig":null,"attributes":[{"value":"/ Concrete sequence type used in conjuction with reference implementations of `GenericSequence`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":38850,"byte_end":38947,"line_start":15,"line_end":15,"column_start":5,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":39246,"byte_end":39254,"line_start":22,"line_end":22,"column_start":8,"column_end":16},"name":"generate","qualname":"::sequence::GenericSequence::generate","value":"pub fn generate<F>(F) -> Self::Sequence where F: FnMut(usize) -> T","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Initializes a new sequence instance using the given function.","sig":null,"attributes":[{"value":"/ Initializes a new sequence instance using the given function.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":39033,"byte_end":39098,"line_start":18,"line_end":18,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":39103,"byte_end":39106,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ If the generator function panics while initializing the sequence,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":39111,"byte_end":39180,"line_start":20,"line_end":20,"column_start":5,"column_end":74}},{"value":"/ any already initialized elements will be dropped.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":39185,"byte_end":39238,"line_start":21,"line_end":21,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":39349,"byte_end":39361,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"inverted_zip","qualname":"::sequence::GenericSequence::inverted_zip","value":"pub fn inverted_zip<B, U, F>(Self, GenericArray<B, Self::Length>, F)\n-> MappedSequence<GenericArray<B, Self::Length>, B, U> where\nGenericArray<B, Self::Length>: GenericSequence<B, Length = Self::Length> +\nMappedGenericSequence<B, U>, Self: MappedGenericSequence<T, U>,\nSelf::Length: ArrayLength<B> + ArrayLength<U>, F: FnMut(B, Self::Item) -> U","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":40275,"byte_end":40288,"line_start":57,"line_end":57,"column_start":8,"column_end":21},"name":"inverted_zip2","qualname":"::sequence::GenericSequence::inverted_zip2","value":"pub fn inverted_zip2<B, Lhs, U, F>(Self, Lhs, F) -> MappedSequence<Lhs, B, U>\nwhere Lhs: GenericSequence<B, Length = Self::Length> +\nMappedGenericSequence<B, U>, Self: MappedGenericSequence<T, U>,\nSelf::Length: ArrayLength<B> + ArrayLength<U>, F: FnMut(Lhs::Item, Self::Item)\n-> U","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":366},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":40943,"byte_end":40955,"line_start":72,"line_end":72,"column_start":10,"column_end":22},"name":"SequenceItem","qualname":"::sequence::SequenceItem","value":"<T as IntoIterator>::Item","parent":null,"children":[],"decl_id":null,"docs":" Accessor for `GenericSequence` item type, which is really `IntoIterator::Item`","sig":null,"attributes":[{"value":"/ Accessor for `GenericSequence` item type, which is really `IntoIterator::Item`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":40706,"byte_end":40788,"line_start":68,"line_end":68,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":40789,"byte_end":40792,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ For deeply nested generic mapped sequence types, like shown in `tests/generics.rs`,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":40793,"byte_end":40880,"line_start":70,"line_end":70,"column_start":1,"column_end":88}},{"value":"/ this can be useful for keeping things organized.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":40881,"byte_end":40933,"line_start":71,"line_end":71,"column_start":1,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":384},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":41847,"byte_end":41855,"line_start":110,"line_end":110,"column_start":18,"column_end":26},"name":"Lengthen","qualname":"::sequence::Lengthen","value":"Lengthen<T>: Sized + GenericSequence<T>","parent":null,"children":[{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388}],"decl_id":null,"docs":" Defines any `GenericSequence` which can be lengthened or extended by appending\n or prepending an element to it.","sig":null,"attributes":[{"value":"/ Defines any `GenericSequence` which can be lengthened or extended by appending","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":41609,"byte_end":41691,"line_start":106,"line_end":106,"column_start":1,"column_end":83}},{"value":"/ or prepending an element to it.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":41692,"byte_end":41727,"line_start":107,"line_end":107,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":41728,"byte_end":41731,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ Any lengthened sequence can be shortened back to the original using `pop_front` or `pop_back`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":41732,"byte_end":41829,"line_start":109,"line_end":109,"column_start":1,"column_end":98}}]},{"kind":"Type","id":{"krate":0,"index":386},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":41962,"byte_end":41968,"line_start":112,"line_end":112,"column_start":10,"column_end":16},"name":"Longer","qualname":"::sequence::Lengthen::Longer","value":"type Longer: Shorten<T, Shorter = Self>;","parent":{"krate":0,"index":384},"children":[],"decl_id":null,"docs":" `GenericSequence` that has one more element than `Self`\n","sig":null,"attributes":[{"value":"/ `GenericSequence` that has one more element than `Self`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":41893,"byte_end":41952,"line_start":111,"line_end":111,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42274,"byte_end":42280,"line_start":125,"line_end":125,"column_start":8,"column_end":14},"name":"append","qualname":"::sequence::Lengthen::append","value":"pub fn append(Self, T) -> Self::Longer","parent":{"krate":0,"index":384},"children":[],"decl_id":null,"docs":" Returns a new array with the given element appended to the end of it.","sig":null,"attributes":[{"value":"/ Returns a new array with the given element appended to the end of it.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42003,"byte_end":42076,"line_start":114,"line_end":114,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42081,"byte_end":42084,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ Example:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42089,"byte_end":42101,"line_start":116,"line_end":116,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42106,"byte_end":42109,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42114,"byte_end":42127,"line_start":118,"line_end":118,"column_start":5,"column_end":18}},{"value":"/ let a = arr![i32; 1, 2, 3];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42132,"byte_end":42163,"line_start":119,"line_end":119,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42168,"byte_end":42171,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ let b = a.append(4);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42176,"byte_end":42200,"line_start":121,"line_end":121,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42205,"byte_end":42208,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b, arr![i32; 1, 2, 3, 4]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42213,"byte_end":42254,"line_start":123,"line_end":123,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42259,"byte_end":42266,"line_start":124,"line_end":124,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42593,"byte_end":42600,"line_start":138,"line_end":138,"column_start":8,"column_end":15},"name":"prepend","qualname":"::sequence::Lengthen::prepend","value":"pub fn prepend(Self, T) -> Self::Longer","parent":{"krate":0,"index":384},"children":[],"decl_id":null,"docs":" Returns a new array with the given element prepended to the front of it.","sig":null,"attributes":[{"value":"/ Returns a new array with the given element prepended to the front of it.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42318,"byte_end":42394,"line_start":127,"line_end":127,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42399,"byte_end":42402,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ Example:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42407,"byte_end":42419,"line_start":129,"line_end":129,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42424,"byte_end":42427,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42432,"byte_end":42445,"line_start":131,"line_end":131,"column_start":5,"column_end":18}},{"value":"/ let a = arr![i32; 1, 2, 3];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42450,"byte_end":42481,"line_start":132,"line_end":132,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42486,"byte_end":42489,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ let b = a.prepend(4);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42494,"byte_end":42519,"line_start":134,"line_end":134,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42524,"byte_end":42527,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b, arr![i32; 4, 1, 2, 3]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42532,"byte_end":42573,"line_start":136,"line_end":136,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42578,"byte_end":42585,"line_start":137,"line_end":137,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":389},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42868,"byte_end":42875,"line_start":145,"line_end":145,"column_start":18,"column_end":25},"name":"Shorten","qualname":"::sequence::Shorten","value":"Shorten<T>: Sized + GenericSequence<T>","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393}],"decl_id":null,"docs":" Defines a `GenericSequence` which can be shortened by removing the first or last element from it.","sig":null,"attributes":[{"value":"/ Defines a `GenericSequence` which can be shortened by removing the first or last element from it.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42637,"byte_end":42738,"line_start":141,"line_end":141,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42739,"byte_end":42742,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ Additionally, any shortened sequence can be lengthened by","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42743,"byte_end":42804,"line_start":143,"line_end":143,"column_start":1,"column_end":62}},{"value":"/ appending or prepending an element to it.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42805,"byte_end":42850,"line_start":144,"line_end":144,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":391},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42982,"byte_end":42989,"line_start":147,"line_end":147,"column_start":10,"column_end":17},"name":"Shorter","qualname":"::sequence::Shorten::Shorter","value":"type Shorter: Lengthen<T, Longer = Self>;","parent":{"krate":0,"index":389},"children":[],"decl_id":null,"docs":" `GenericSequence` that has one less element than `Self`\n","sig":null,"attributes":[{"value":"/ `GenericSequence` that has one less element than `Self`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42913,"byte_end":42972,"line_start":146,"line_end":146,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43337,"byte_end":43345,"line_start":161,"line_end":161,"column_start":8,"column_end":16},"name":"pop_back","qualname":"::sequence::Shorten::pop_back","value":"pub fn pop_back(Self) -> (Self::Shorter, T)","parent":{"krate":0,"index":389},"children":[],"decl_id":null,"docs":" Returns a new array without the last element, and the last element.","sig":null,"attributes":[{"value":"/ Returns a new array without the last element, and the last element.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43024,"byte_end":43095,"line_start":149,"line_end":149,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43100,"byte_end":43103,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Example:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43108,"byte_end":43120,"line_start":151,"line_end":151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43125,"byte_end":43128,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43133,"byte_end":43146,"line_start":153,"line_end":153,"column_start":5,"column_end":18}},{"value":"/ let a = arr![i32; 1, 2, 3, 4];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43151,"byte_end":43185,"line_start":154,"line_end":154,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43190,"byte_end":43193,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ let (init, last) = a.pop_back();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43198,"byte_end":43234,"line_start":156,"line_end":156,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43239,"byte_end":43242,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(init, arr![i32; 1, 2, 3]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43247,"byte_end":43288,"line_start":158,"line_end":158,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(last, 4);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43293,"byte_end":43317,"line_start":159,"line_end":159,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43322,"byte_end":43329,"line_start":160,"line_end":160,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43688,"byte_end":43697,"line_start":174,"line_end":174,"column_start":8,"column_end":17},"name":"pop_front","qualname":"::sequence::Shorten::pop_front","value":"pub fn pop_front(Self) -> (T, Self::Shorter)","parent":{"krate":0,"index":389},"children":[],"decl_id":null,"docs":" Returns a new array without the first element, and the first element.\n Example:","sig":null,"attributes":[{"value":"/ Returns a new array without the first element, and the first element.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43380,"byte_end":43453,"line_start":163,"line_end":163,"column_start":5,"column_end":78}},{"value":"/ Example:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43458,"byte_end":43470,"line_start":164,"line_end":164,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43475,"byte_end":43478,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43483,"byte_end":43496,"line_start":166,"line_end":166,"column_start":5,"column_end":18}},{"value":"/ let a = arr![i32; 1, 2, 3, 4];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43501,"byte_end":43535,"line_start":167,"line_end":167,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43540,"byte_end":43543,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ let (head, tail) = a.pop_front();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43548,"byte_end":43585,"line_start":169,"line_end":169,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43590,"byte_end":43593,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(head, 1);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43598,"byte_end":43622,"line_start":171,"line_end":171,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(tail, arr![i32; 2, 3, 4]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43627,"byte_end":43668,"line_start":172,"line_end":172,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43673,"byte_end":43680,"line_start":173,"line_end":173,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":406},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":45569,"byte_end":45574,"line_start":246,"line_end":246,"column_start":18,"column_end":23},"name":"Split","qualname":"::sequence::Split","value":"Split<T, K>: GenericSequence<T>","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411}],"decl_id":null,"docs":" Defines a `GenericSequence` that can be split into two parts at a given pivot index.\n","sig":null,"attributes":[{"value":"/ Defines a `GenericSequence` that can be split into two parts at a given pivot index.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":45463,"byte_end":45551,"line_start":245,"line_end":245,"column_start":1,"column_end":89}}]},{"kind":"Type","id":{"krate":0,"index":409},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":45689,"byte_end":45694,"line_start":251,"line_end":251,"column_start":10,"column_end":15},"name":"First","qualname":"::sequence::Split::First","value":"type First: GenericSequence<T>;","parent":{"krate":0,"index":406},"children":[],"decl_id":null,"docs":" First part of the resulting split array\n","sig":null,"attributes":[{"value":"/ First part of the resulting split array","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":45636,"byte_end":45679,"line_start":250,"line_end":250,"column_start":5,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":410},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":45774,"byte_end":45780,"line_start":253,"line_end":253,"column_start":10,"column_end":16},"name":"Second","qualname":"::sequence::Split::Second","value":"type Second: GenericSequence<T>;","parent":{"krate":0,"index":406},"children":[],"decl_id":null,"docs":" Second part of the resulting split array\n","sig":null,"attributes":[{"value":"/ Second part of the resulting split array","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":45720,"byte_end":45764,"line_start":252,"line_end":252,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":45897,"byte_end":45902,"line_start":256,"line_end":256,"column_start":8,"column_end":13},"name":"split","qualname":"::sequence::Split::split","value":"pub fn split(Self) -> (Self::First, Self::Second)","parent":{"krate":0,"index":406},"children":[],"decl_id":null,"docs":" Splits an array at the given index, returning the separate parts of the array.\n","sig":null,"attributes":[{"value":"/ Splits an array at the given index, returning the separate parts of the array.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":45807,"byte_end":45889,"line_start":255,"line_end":255,"column_start":5,"column_end":87}}]},{"kind":"Trait","id":{"krate":0,"index":419},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":46613,"byte_end":46619,"line_start":283,"line_end":283,"column_start":18,"column_end":24},"name":"Concat","qualname":"::sequence::Concat","value":"Concat<T, M>: GenericSequence<T>","parent":null,"children":[{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424}],"decl_id":null,"docs":" Defines `GenericSequence`s which can be joined together, forming a larger array.\n","sig":null,"attributes":[{"value":"/ Defines `GenericSequence`s which can be joined together, forming a larger array.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":46511,"byte_end":46595,"line_start":282,"line_end":282,"column_start":1,"column_end":85}}]},{"kind":"Type","id":{"krate":0,"index":422},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":46734,"byte_end":46738,"line_start":288,"line_end":288,"column_start":10,"column_end":14},"name":"Rest","qualname":"::sequence::Concat::Rest","value":"type Rest: GenericSequence<T, Length = M>;","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" Sequence to be concatenated with `self`\n","sig":null,"attributes":[{"value":"/ Sequence to be concatenated with `self`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":46681,"byte_end":46724,"line_start":287,"line_end":287,"column_start":5,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":423},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":46838,"byte_end":46844,"line_start":291,"line_end":291,"column_start":10,"column_end":16},"name":"Output","qualname":"::sequence::Concat::Output","value":"type Output: GenericSequence<T>;","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" Resulting sequence formed by the concatenation.\n","sig":null,"attributes":[{"value":"/ Resulting sequence formed by the concatenation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":46777,"byte_end":46828,"line_start":290,"line_end":290,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":46919,"byte_end":46925,"line_start":294,"line_end":294,"column_start":8,"column_end":14},"name":"concat","qualname":"::sequence::Concat::concat","value":"pub fn concat(Self, Self::Rest) -> Self::Output","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" Concatenate, or join, two sequences.\n","sig":null,"attributes":[{"value":"/ Concatenate, or join, two sequences.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":46871,"byte_end":46911,"line_start":293,"line_end":293,"column_start":5,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":437},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":1694,"byte_end":1705,"line_start":75,"line_end":75,"column_start":18,"column_end":29},"name":"ArrayLength","qualname":"::ArrayLength","value":"ArrayLength<T>: Unsigned","parent":null,"children":[{"krate":0,"index":439}],"decl_id":null,"docs":" Trait making `GenericArray` work, marking types to be used as length of an array\n","sig":null,"attributes":[{"value":"/ Trait making `GenericArray` work, marking types to be used as length of an array","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":1592,"byte_end":1676,"line_start":74,"line_end":74,"column_start":1,"column_end":85}}]},{"kind":"Type","id":{"krate":0,"index":439},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":1797,"byte_end":1806,"line_start":77,"line_end":77,"column_start":10,"column_end":19},"name":"ArrayType","qualname":"::ArrayLength::ArrayType","value":"type ArrayType;","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" Associated type representing the array type for the number\n","sig":null,"attributes":[{"value":"/ Associated type representing the array type for the number","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":1725,"byte_end":1787,"line_start":76,"line_end":76,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":443},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":2021,"byte_end":2041,"line_start":89,"line_end":89,"column_start":12,"column_end":32},"name":"GenericArrayImplEven","qualname":"::GenericArrayImplEven","value":"GenericArrayImplEven {  }","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448}],"decl_id":null,"docs":" Internal type used to generate a struct of appropriate size\n","sig":null,"attributes":[{"value":"/ Internal type used to generate a struct of appropriate size","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":1900,"byte_end":1963,"line_start":85,"line_end":85,"column_start":1,"column_end":64}},{"value":"allow(dead_code)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":1964,"byte_end":1983,"line_start":86,"line_end":86,"column_start":1,"column_end":20}},{"value":"repr(C)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":1984,"byte_end":1994,"line_start":87,"line_end":87,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":456},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":2584,"byte_end":2603,"line_start":111,"line_end":111,"column_start":12,"column_end":31},"name":"GenericArrayImplOdd","qualname":"::GenericArrayImplOdd","value":"GenericArrayImplOdd {  }","parent":null,"children":[{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461}],"decl_id":null,"docs":" Internal type used to generate a struct of appropriate size\n","sig":null,"attributes":[{"value":"/ Internal type used to generate a struct of appropriate size","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":2463,"byte_end":2526,"line_start":107,"line_end":107,"column_start":1,"column_end":64}},{"value":"allow(dead_code)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":2527,"byte_end":2546,"line_start":108,"line_end":108,"column_start":1,"column_end":20}},{"value":"repr(C)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":2547,"byte_end":2557,"line_start":109,"line_end":109,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":477},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":3438,"byte_end":3450,"line_start":142,"line_end":142,"column_start":12,"column_end":24},"name":"GenericArray","qualname":"::GenericArray","value":"GenericArray {  }","parent":null,"children":[{"krate":0,"index":480}],"decl_id":null,"docs":" Struct representing a generic array - `GenericArray<T, N>` works like [T; N]\n","sig":null,"attributes":[{"value":"/ Struct representing a generic array - `GenericArray<T, N>` works like [T; N]","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":3305,"byte_end":3385,"line_start":139,"line_end":139,"column_start":1,"column_end":81}},{"value":"allow(dead_code)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":3386,"byte_end":3405,"line_start":140,"line_end":140,"column_start":1,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":3406,"byte_end":3426,"line_start":141,"line_end":141,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":496},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":4396,"byte_end":4408,"line_start":177,"line_end":177,"column_start":12,"column_end":24},"name":"ArrayBuilder","qualname":"::ArrayBuilder","value":"ArrayBuilder {  }","parent":null,"children":[{"krate":0,"index":499},{"krate":0,"index":500}],"decl_id":null,"docs":" Creates an array one element at a time using a mutable iterator\n you can write to with `ptr::write`.","sig":null,"attributes":[{"value":"/ Creates an array one element at a time using a mutable iterator","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":4126,"byte_end":4193,"line_start":171,"line_end":171,"column_start":1,"column_end":68}},{"value":"/ you can write to with `ptr::write`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":4194,"byte_end":4233,"line_start":172,"line_end":172,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":4234,"byte_end":4237,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ Incremenent the position while iterating to mark off created elements,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":4238,"byte_end":4312,"line_start":174,"line_end":174,"column_start":1,"column_end":75}},{"value":"/ which will be dropped if `into_inner` is not called.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":4313,"byte_end":4369,"line_start":175,"line_end":175,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":4601,"byte_end":4604,"line_start":185,"line_end":185,"column_start":19,"column_end":22},"name":"new","qualname":"<ArrayBuilder<T, N>>::new","value":"pub unsafe fn new() -> ArrayBuilder<T, N>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":4573,"byte_end":4582,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":5029,"byte_end":5042,"line_start":198,"line_end":198,"column_start":19,"column_end":32},"name":"iter_position","qualname":"<ArrayBuilder<T, N>>::iter_position","value":"pub unsafe fn iter_position(&mut Self) -> (slice::IterMut<, T>, &mut usize)","parent":null,"children":[],"decl_id":null,"docs":" Creates a mutable iterator for writing to the array using `ptr::write`.","sig":null,"attributes":[{"value":"/ Creates a mutable iterator for writing to the array using `ptr::write`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":4760,"byte_end":4835,"line_start":192,"line_end":192,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":4840,"byte_end":4843,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ Increment the position value given as a mutable reference as you iterate","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":4848,"byte_end":4924,"line_start":194,"line_end":194,"column_start":5,"column_end":81}},{"value":"/ to mark how many elements have been created.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":4929,"byte_end":4977,"line_start":195,"line_end":195,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":5001,"byte_end":5010,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":5302,"byte_end":5312,"line_start":206,"line_end":206,"column_start":19,"column_end":29},"name":"into_inner","qualname":"<ArrayBuilder<T, N>>::into_inner","value":"pub unsafe fn into_inner(Self) -> GenericArray<T, N>","parent":null,"children":[],"decl_id":null,"docs":" When done writing (assuming all elements have been written to),\n get the inner array.\n","sig":null,"attributes":[{"value":"/ When done writing (assuming all elements have been written to),","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":5154,"byte_end":5221,"line_start":202,"line_end":202,"column_start":5,"column_end":72}},{"value":"/ get the inner array.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":5226,"byte_end":5250,"line_start":203,"line_end":203,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":5274,"byte_end":5283,"line_start":205,"line_end":205,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":511},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":5871,"byte_end":5884,"line_start":230,"line_end":230,"column_start":12,"column_end":25},"name":"ArrayConsumer","qualname":"::ArrayConsumer","value":"ArrayConsumer {  }","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":515}],"decl_id":null,"docs":" Consumes an array.","sig":null,"attributes":[{"value":"/ Consumes an array.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":5700,"byte_end":5722,"line_start":225,"line_end":225,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":5723,"byte_end":5726,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ Increment the position while iterating and any leftover elements","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":5727,"byte_end":5795,"line_start":227,"line_end":227,"column_start":1,"column_end":69}},{"value":"/ will be dropped if position does not go to N","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":5796,"byte_end":5844,"line_start":228,"line_end":228,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":6078,"byte_end":6081,"line_start":238,"line_end":238,"column_start":19,"column_end":22},"name":"new","qualname":"<ArrayConsumer<T, N>>::new","value":"pub unsafe fn new(GenericArray<T, N>) -> ArrayConsumer<T, N>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":6050,"byte_end":6059,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":6499,"byte_end":6512,"line_start":251,"line_end":251,"column_start":19,"column_end":32},"name":"iter_position","qualname":"<ArrayConsumer<T, N>>::iter_position","value":"pub unsafe fn iter_position(&mut Self) -> (slice::Iter<, T>, &mut usize)","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator and mutable reference to the internal position\n to keep track of consumed elements.","sig":null,"attributes":[{"value":"/ Creates an iterator and mutable reference to the internal position","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":6249,"byte_end":6319,"line_start":245,"line_end":245,"column_start":5,"column_end":75}},{"value":"/ to keep track of consumed elements.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":6324,"byte_end":6363,"line_start":246,"line_end":246,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":6368,"byte_end":6371,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ Increment the position as you iterate to mark off consumed elements","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":6376,"byte_end":6447,"line_start":248,"line_end":248,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":6471,"byte_end":6480,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":12898,"byte_end":12906,"line_start":492,"line_end":492,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<GenericArray<T, N>>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a slice containing the entire array.\n","sig":null,"attributes":[{"value":"/ Extracts a slice containing the entire array.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":12823,"byte_end":12872,"line_start":490,"line_end":490,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":12877,"byte_end":12886,"line_start":491,"line_end":491,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":13039,"byte_end":13051,"line_start":498,"line_end":498,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<GenericArray<T, N>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable slice containing the entire array.\n","sig":null,"attributes":[{"value":"/ Extracts a mutable slice containing the entire array.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":12956,"byte_end":13013,"line_start":496,"line_end":496,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":13018,"byte_end":13027,"line_start":497,"line_end":497,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":13286,"byte_end":13296,"line_start":506,"line_end":506,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<GenericArray<T, N>>::from_slice","value":"pub fn from_slice(&[T]) -> &GenericArray<T, N>","parent":null,"children":[],"decl_id":null,"docs":" Converts slice to a generic array reference with inferred length;","sig":null,"attributes":[{"value":"/ Converts slice to a generic array reference with inferred length;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":13113,"byte_end":13182,"line_start":502,"line_end":502,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":13187,"byte_end":13190,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ Length of the slice must be equal to the length of the array.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":13195,"byte_end":13260,"line_start":504,"line_end":504,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":13265,"byte_end":13274,"line_start":505,"line_end":505,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":13534,"byte_end":13548,"line_start":514,"line_end":514,"column_start":12,"column_end":26},"name":"from_mut_slice","qualname":"<GenericArray<T, N>>::from_mut_slice","value":"pub fn from_mut_slice(&mut [T]) -> &mut GenericArray<T, N>","parent":null,"children":[],"decl_id":null,"docs":" Converts mutable slice to a mutable generic array reference","sig":null,"attributes":[{"value":"/ Converts mutable slice to a mutable generic array reference","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":13367,"byte_end":13430,"line_start":510,"line_end":510,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":13435,"byte_end":13438,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ Length of the slice must be equal to the length of the array.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":13443,"byte_end":13508,"line_start":512,"line_end":512,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":13513,"byte_end":13522,"line_start":513,"line_end":513,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":14712,"byte_end":14728,"line_start":551,"line_end":551,"column_start":12,"column_end":28},"name":"clone_from_slice","qualname":"<GenericArray<T, N>>::clone_from_slice","value":"pub fn clone_from_slice(&[T]) -> GenericArray<T, N>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `GenericArray` from a slice by cloning its content","sig":null,"attributes":[{"value":"/ Construct a `GenericArray` from a slice by cloning its content","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":14543,"byte_end":14609,"line_start":547,"line_end":547,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":14614,"byte_end":14617,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ Length of the slice must be equal to the length of the array","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":14622,"byte_end":14686,"line_start":549,"line_end":549,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":14691,"byte_end":14700,"line_start":550,"line_end":550,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":15157,"byte_end":15172,"line_start":564,"line_end":564,"column_start":12,"column_end":27},"name":"from_exact_iter","qualname":"<GenericArray<T, N>>::from_exact_iter","value":"pub fn from_exact_iter<I>(I) -> Option<Self> where I: IntoIterator<Item = T>,\n<I as IntoIterator>::IntoIter: ExactSizeIterator","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `GenericArray` instance from an iterator with a known exact size.","sig":null,"attributes":[{"value":"/ Creates a new `GenericArray` instance from an iterator with a known exact size.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":14957,"byte_end":15040,"line_start":561,"line_end":561,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":15045,"byte_end":15048,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the size is not equal to the number of elements in the `GenericArray`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":15053,"byte_end":15145,"line_start":563,"line_end":563,"column_start":5,"column_end":97}}]},{"kind":"Function","id":{"krate":0,"index":613},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":16044,"byte_end":16053,"line_start":597,"line_end":597,"column_start":15,"column_end":24},"name":"transmute","qualname":"::transmute","value":"pub unsafe fn transmute<A, B>(A) -> B","parent":null,"children":[],"decl_id":null,"docs":" A reimplementation of the `transmute` function, avoiding problems\n when the compiler can't prove equal sizes.\n","sig":null,"attributes":[{"value":"/ A reimplementation of the `transmute` function, avoiding problems","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":15888,"byte_end":15957,"line_start":593,"line_end":593,"column_start":1,"column_end":70}},{"value":"/ when the compiler can't prove equal sizes.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":15958,"byte_end":16004,"line_start":594,"line_end":594,"column_start":1,"column_end":47}},{"value":"inline","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":16005,"byte_end":16014,"line_start":595,"line_end":595,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/hex.rs","byte_start":17688,"byte_end":17700,"line_start":27,"line_end":27,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/hex.rs","byte_start":19188,"byte_end":19200,"line_start":67,"line_end":67,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":20896,"byte_end":20908,"line_start":11,"line_end":11,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":21065,"byte_end":21077,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":21225,"byte_end":21237,"line_start":30,"line_end":30,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":21338,"byte_end":21350,"line_start":37,"line_end":37,"column_start":37,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":21485,"byte_end":21497,"line_start":45,"line_end":45,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":21570,"byte_end":21582,"line_start":47,"line_end":47,"column_start":39,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":21796,"byte_end":21808,"line_start":56,"line_end":56,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":21995,"byte_end":22007,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":22168,"byte_end":22180,"line_start":74,"line_end":74,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":22328,"byte_end":22340,"line_start":84,"line_end":84,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":22500,"byte_end":22512,"line_start":94,"line_end":94,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":22656,"byte_end":22668,"line_start":104,"line_end":104,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":22824,"byte_end":22836,"line_start":114,"line_end":114,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/arr.rs","byte_start":25915,"byte_end":25917,"line_start":13,"line_end":13,"column_start":38,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":33360,"byte_end":33376,"line_start":30,"line_end":30,"column_start":12,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":33836,"byte_end":33848,"line_start":47,"line_end":47,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":34223,"byte_end":34239,"line_start":64,"line_end":64,"column_start":39,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":34466,"byte_end":34482,"line_start":75,"line_end":75,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":34805,"byte_end":34821,"line_start":91,"line_end":91,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":35449,"byte_end":35465,"line_start":116,"line_end":116,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":37153,"byte_end":37169,"line_start":195,"line_end":195,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":320},{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":38117,"byte_end":38133,"line_start":238,"line_end":238,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":38275,"byte_end":38291,"line_start":247,"line_end":247,"column_start":30,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43780,"byte_end":43792,"line_start":177,"line_end":177,"column_start":51,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":44640,"byte_end":44652,"line_start":211,"line_end":211,"column_start":50,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":45981,"byte_end":45993,"line_start":259,"line_end":259,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":47008,"byte_end":47020,"line_start":297,"line_end":297,"column_start":39,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":1845,"byte_end":1850,"line_start":80,"line_end":80,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":2149,"byte_end":2169,"line_start":95,"line_end":95,"column_start":36,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":2432,"byte_end":2452,"line_start":105,"line_end":105,"column_start":33,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":2695,"byte_end":2714,"line_start":117,"line_end":117,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":2978,"byte_end":2997,"line_start":127,"line_end":127,"column_start":33,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":3061,"byte_end":3065,"line_start":129,"line_end":129,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":3210,"byte_end":3214,"line_start":134,"line_end":134,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":3551,"byte_end":3563,"line_start":146,"line_end":146,"column_start":50,"column_end":62},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":3622,"byte_end":3634,"line_start":147,"line_end":147,"column_start":50,"column_end":62},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":3666,"byte_end":3678,"line_start":149,"line_end":149,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":490},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":3914,"byte_end":3926,"line_start":161,"line_end":161,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":4529,"byte_end":4541,"line_start":182,"line_end":182,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":5501,"byte_end":5513,"line_start":215,"line_end":215,"column_start":37,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":6005,"byte_end":6018,"line_start":235,"line_end":235,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":6651,"byte_end":6664,"line_start":256,"line_end":256,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":7440,"byte_end":7452,"line_start":290,"line_end":290,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":8457,"byte_end":8469,"line_start":331,"line_end":331,"column_start":42,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":11089,"byte_end":11101,"line_start":420,"line_end":420,"column_start":54,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":11297,"byte_end":11309,"line_start":428,"line_end":428,"column_start":45,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":577},{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":12769,"byte_end":12781,"line_start":486,"line_end":486,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":14489,"byte_end":14501,"line_start":543,"line_end":543,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":14903,"byte_end":14915,"line_start":557,"line_end":557,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":1447,"byte_end":1450,"line_start":65,"line_end":65,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":173}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":1460,"byte_end":1470,"line_start":66,"line_end":66,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":199}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":1480,"byte_end":1484,"line_start":67,"line_end":67,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":248}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":1494,"byte_end":1502,"line_start":68,"line_end":68,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":332}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/hex.rs","byte_start":17688,"byte_end":17700,"line_start":27,"line_end":27,"column_start":44,"column_end":56},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":8900}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/hex.rs","byte_start":19188,"byte_end":19200,"line_start":67,"line_end":67,"column_start":44,"column_end":56},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":8902}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":20896,"byte_end":20908,"line_start":11,"line_end":11,"column_start":33,"column_end":45},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":21065,"byte_end":21077,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":21225,"byte_end":21237,"line_start":30,"line_end":30,"column_start":27,"column_end":39},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":21338,"byte_end":21350,"line_start":37,"line_end":37,"column_start":37,"column_end":49},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":21485,"byte_end":21497,"line_start":45,"line_end":45,"column_start":23,"column_end":35},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":21570,"byte_end":21582,"line_start":47,"line_end":47,"column_start":39,"column_end":51},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":2551}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":21796,"byte_end":21808,"line_start":56,"line_end":56,"column_start":25,"column_end":37},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":2540}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":21995,"byte_end":22007,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":22168,"byte_end":22180,"line_start":74,"line_end":74,"column_start":28,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":2452}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":22328,"byte_end":22340,"line_start":84,"line_end":84,"column_start":31,"column_end":43},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":2455}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":22500,"byte_end":22512,"line_start":94,"line_end":94,"column_start":27,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":2750}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":22656,"byte_end":22668,"line_start":104,"line_end":104,"column_start":27,"column_end":39},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":2753}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/impls.rs","byte_start":22824,"byte_end":22836,"line_start":114,"line_end":114,"column_start":27,"column_end":39},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/arr.rs","byte_start":25800,"byte_end":25811,"line_start":8,"line_end":8,"column_start":44,"column_end":55},"kind":"SuperTrait","from":{"krate":0,"index":437},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/arr.rs","byte_start":25915,"byte_end":25917,"line_start":13,"line_end":13,"column_start":38,"column_end":40},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":189},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":29631,"byte_end":29646,"line_start":12,"line_end":12,"column_start":47,"column_end":62},"kind":"SuperTrait","from":{"krate":0,"index":349},"to":{"krate":0,"index":207}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/functional.rs","byte_start":30719,"byte_end":30734,"line_start":43,"line_end":43,"column_start":41,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":349},"to":{"krate":0,"index":227}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":33360,"byte_end":33376,"line_start":30,"line_end":30,"column_start":12,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":33836,"byte_end":33848,"line_start":47,"line_end":47,"column_start":29,"column_end":41},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":7147}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":34223,"byte_end":34239,"line_start":64,"line_end":64,"column_start":39,"column_end":55},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":275},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":34466,"byte_end":34482,"line_start":75,"line_end":75,"column_start":21,"column_end":37},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":275},"to":{"krate":1,"index":3088}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":34805,"byte_end":34821,"line_start":91,"line_end":91,"column_start":29,"column_end":45},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":275},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":35449,"byte_end":35465,"line_start":116,"line_end":116,"column_start":25,"column_end":41},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":275},"to":{"krate":1,"index":7310}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":37153,"byte_end":37169,"line_start":195,"line_end":195,"column_start":36,"column_end":52},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":275},"to":{"krate":1,"index":7174}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":38117,"byte_end":38133,"line_start":238,"line_end":238,"column_start":34,"column_end":50},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":275},"to":{"krate":1,"index":7199}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/iter.rs","byte_start":38275,"byte_end":38291,"line_start":247,"line_end":247,"column_start":30,"column_end":46},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":275},"to":{"krate":1,"index":7586}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":38748,"byte_end":38753,"line_start":11,"line_end":11,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":1,"index":2858},"to":{"krate":0,"index":349}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":38756,"byte_end":38768,"line_start":11,"line_end":11,"column_start":46,"column_end":58},"kind":"SuperTrait","from":{"krate":1,"index":7147},"to":{"krate":0,"index":349}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":41860,"byte_end":41865,"line_start":110,"line_end":110,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":2858},"to":{"krate":0,"index":384}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":41868,"byte_end":41883,"line_start":110,"line_end":110,"column_start":39,"column_end":54},"kind":"SuperTrait","from":{"krate":0,"index":349},"to":{"krate":0,"index":384}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42880,"byte_end":42885,"line_start":145,"line_end":145,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2858},"to":{"krate":0,"index":389}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":42888,"byte_end":42903,"line_start":145,"line_end":145,"column_start":38,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":349},"to":{"krate":0,"index":389}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":43780,"byte_end":43792,"line_start":177,"line_end":177,"column_start":51,"column_end":63},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":477},"to":{"krate":0,"index":384}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":44640,"byte_end":44652,"line_start":211,"line_end":211,"column_start":50,"column_end":62},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":477},"to":{"krate":0,"index":389}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":45582,"byte_end":45597,"line_start":246,"line_end":246,"column_start":31,"column_end":46},"kind":"SuperTrait","from":{"krate":0,"index":349},"to":{"krate":0,"index":406}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":45981,"byte_end":45993,"line_start":259,"line_end":259,"column_start":38,"column_end":50},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":477},"to":{"krate":0,"index":406}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":46627,"byte_end":46642,"line_start":283,"line_end":283,"column_start":32,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":349},"to":{"krate":0,"index":419}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/sequence.rs","byte_start":47008,"byte_end":47020,"line_start":297,"line_end":297,"column_start":39,"column_end":51},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":477},"to":{"krate":0,"index":419}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":1710,"byte_end":1718,"line_start":75,"line_end":75,"column_start":34,"column_end":42},"kind":"SuperTrait","from":{"krate":4,"index":716},"to":{"krate":0,"index":437}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":1845,"byte_end":1850,"line_start":80,"line_end":80,"column_start":35,"column_end":40},"kind":{"Impl":{"id":29}},"from":{"krate":4,"index":6711},"to":{"krate":0,"index":437}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":2149,"byte_end":2169,"line_start":95,"line_end":95,"column_start":36,"column_end":56},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":443},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":2432,"byte_end":2452,"line_start":105,"line_end":105,"column_start":33,"column_end":53},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":443},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":2695,"byte_end":2714,"line_start":117,"line_end":117,"column_start":36,"column_end":55},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":456},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":2978,"byte_end":2997,"line_start":127,"line_end":127,"column_start":33,"column_end":52},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":456},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":3061,"byte_end":3065,"line_start":129,"line_end":129,"column_start":54,"column_end":58},"kind":{"Impl":{"id":34}},"from":{"krate":4,"index":6663},"to":{"krate":0,"index":437}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":3210,"byte_end":3214,"line_start":134,"line_end":134,"column_start":54,"column_end":58},"kind":{"Impl":{"id":35}},"from":{"krate":4,"index":6663},"to":{"krate":0,"index":437}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":3551,"byte_end":3563,"line_start":146,"line_end":146,"column_start":50,"column_end":62},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":2853}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":3622,"byte_end":3634,"line_start":147,"line_end":147,"column_start":50,"column_end":62},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":2865}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":3666,"byte_end":3678,"line_start":149,"line_end":149,"column_start":22,"column_end":34},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":3064}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":3914,"byte_end":3926,"line_start":161,"line_end":161,"column_start":25,"column_end":37},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":3077}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":4529,"byte_end":4541,"line_start":182,"line_end":182,"column_start":28,"column_end":40},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":496},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":5501,"byte_end":5513,"line_start":215,"line_end":215,"column_start":37,"column_end":49},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":496},"to":{"krate":1,"index":3088}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":6005,"byte_end":6018,"line_start":235,"line_end":235,"column_start":28,"column_end":41},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":6651,"byte_end":6664,"line_start":256,"line_end":256,"column_start":37,"column_end":50},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":511},"to":{"krate":1,"index":3088}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":7440,"byte_end":7452,"line_start":290,"line_end":290,"column_start":32,"column_end":44},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":7143}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":8457,"byte_end":8469,"line_start":331,"line_end":331,"column_start":42,"column_end":54},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":477},"to":{"krate":0,"index":349}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":11089,"byte_end":11101,"line_start":420,"line_end":420,"column_start":54,"column_end":66},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":477},"to":{"krate":0,"index":207}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":11297,"byte_end":11309,"line_start":428,"line_end":428,"column_start":45,"column_end":57},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":477},"to":{"krate":0,"index":227}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":12769,"byte_end":12781,"line_start":486,"line_end":486,"column_start":12,"column_end":24},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":14489,"byte_end":14501,"line_start":543,"line_end":543,"column_start":19,"column_end":31},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.13.3/src/lib.rs","byte_start":14903,"byte_end":14915,"line_start":557,"line_end":557,"column_start":12,"column_end":24},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":477},"to":{"krate":4294967295,"index":4294967295}}]}