{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2","program":"/home/strelda/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rulinalg","/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=d4653154ae614563","-C","extra-filename=-d4653154ae614563","--out-dir","/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps","-L","dependency=/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps","--extern","matrixmultiply=/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps/libmatrixmultiply-5dcc098b5f031d42.rmeta","--extern","num=/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps/libnum-7b2a48adaa3f948c.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/strelda/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/strelda/Documents/mff/dp/code/spectrum_degeneracy/target/rls/debug/deps/librulinalg-d4653154ae614563.rmeta"},"prelude":{"crate_id":{"name":"rulinalg","disambiguator":[11684227599758175795,2890247312199256747]},"crate_root":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src","external_crates":[{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15256637969148649584,12170509131058075833]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2572959971889902175,17506693968225989007]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7380289047210505863,13821127130725723065]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15494144285296940423,1517275930380298805]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16074686111301742862,11174094882134223101]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9848143689052418189,5596786287495938678]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4765876764407181064,11122159180720543906]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3249135693812064660,5763443684941168569]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17048817722375060837,16920886256309599893]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13552797903376776722,10482089333731059857]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5989449439605467183,7256304997069434828]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13279369789493161905,12463804053127379464]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[295047501211602818,3843164955111373824]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[14781020588812023641,7393321088923443539]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[1927264790928947756,6617054577979570835]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[7597657085106642381,11470551509849691989]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[2355022556203982070,155364045674250901]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[3046834347757213021,4625500188193743608]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":19,"id":{"name":"num","disambiguator":[12824580876738112150,4390485764055933933]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":20,"id":{"name":"num_traits","disambiguator":[10284253721885457307,1990790614041994762]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":21,"id":{"name":"num_integer","disambiguator":[18255558270116433409,1148331923128513254]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":22,"id":{"name":"num_iter","disambiguator":[14614664619725400237,4627620022974986020]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":23,"id":{"name":"matrixmultiply","disambiguator":[17929618142235640279,5036438003980311142]}},{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","num":24,"id":{"name":"rawpointer","disambiguator":[1511843138874150877,8446366201479112217]}}],"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":0,"byte_end":3435,"line_start":1,"line_end":124,"column_start":1,"column_end":12}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":56},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/mod.rs","byte_start":3593,"byte_end":3622,"line_start":13,"line_end":13,"column_start":5,"column_end":34},"alias_span":null,"name":"elementwise_matrix_comparison","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":61},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/mod.rs","byte_start":3628,"byte_end":3657,"line_start":14,"line_end":14,"column_start":5,"column_end":34},"alias_span":null,"name":"elementwise_vector_comparison","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":2080},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/mod.rs","byte_start":3663,"byte_end":3692,"line_start":15,"line_end":15,"column_start":5,"column_end":34},"alias_span":null,"name":"AbsoluteElementwiseComparator","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":2097},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/mod.rs","byte_start":3698,"byte_end":3724,"line_start":16,"line_end":16,"column_start":5,"column_end":31},"alias_span":null,"name":"ExactElementwiseComparator","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":2098},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/mod.rs","byte_start":3698,"byte_end":3724,"line_start":16,"line_end":16,"column_start":5,"column_end":31},"alias_span":null,"name":"ExactElementwiseComparator","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":2117},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/mod.rs","byte_start":3730,"byte_end":3754,"line_start":17,"line_end":17,"column_start":5,"column_end":29},"alias_span":null,"name":"UlpElementwiseComparator","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":2140},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/mod.rs","byte_start":3760,"byte_end":3786,"line_start":18,"line_end":18,"column_start":5,"column_end":31},"alias_span":null,"name":"FloatElementwiseComparator","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":37},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/mod.rs","byte_start":3899,"byte_end":3920,"line_start":22,"line_end":22,"column_start":5,"column_end":26},"alias_span":null,"name":"ElementwiseComparator","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":2175},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77859,"byte_end":77871,"line_start":112,"line_end":112,"column_start":20,"column_end":32},"alias_span":null,"name":"PartialPivLu","value":"","parent":{"krate":0,"index":143}},{"kind":"Use","ref_id":{"krate":0,"index":2164},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77873,"byte_end":77876,"line_start":112,"line_end":112,"column_start":34,"column_end":37},"alias_span":null,"name":"LUP","value":"","parent":{"krate":0,"index":143}},{"kind":"Use","ref_id":{"krate":0,"index":716},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65352,"byte_end":65362,"line_start":28,"line_end":28,"column_start":22,"column_end":32},"alias_span":null,"name":"BaseMatrix","value":"","parent":{"krate":0,"index":120}},{"kind":"Use","ref_id":{"krate":0,"index":778},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65364,"byte_end":65377,"line_start":28,"line_end":28,"column_start":34,"column_end":47},"alias_span":null,"name":"BaseMatrixMut","value":"","parent":{"krate":0,"index":120}},{"kind":"Use","ref_id":{"krate":0,"index":3482},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65415,"byte_end":65432,"line_start":29,"line_end":29,"column_start":36,"column_end":53},"alias_span":null,"name":"PermutationMatrix","value":"","parent":{"krate":0,"index":120}},{"kind":"Use","ref_id":{"krate":0,"index":3503},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65434,"byte_end":65440,"line_start":29,"line_end":29,"column_start":55,"column_end":61},"alias_span":null,"name":"Parity","value":"","parent":{"krate":0,"index":120}},{"kind":"Use","ref_id":{"krate":0,"index":1894},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":3225,"byte_end":3235,"line_start":114,"line_end":114,"column_start":16,"column_end":26},"alias_span":null,"name":"VectorNorm","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1900},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":3237,"byte_end":3247,"line_start":114,"line_end":114,"column_start":28,"column_end":38},"alias_span":null,"name":"MatrixNorm","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1897},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":3265,"byte_end":3277,"line_start":115,"line_end":115,"column_start":16,"column_end":28},"alias_span":null,"name":"VectorMetric","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1904},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":3279,"byte_end":3291,"line_start":115,"line_end":115,"column_start":30,"column_end":42},"alias_span":null,"name":"MatrixMetric","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":0,"byte_end":3435,"line_start":1,"line_end":124,"column_start":1,"column_end":12},"name":"","qualname":"::","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":120},{"krate":0,"index":1514},{"krate":0,"index":1586},{"krate":0,"index":1614},{"krate":0,"index":1662},{"krate":0,"index":1871},{"krate":0,"index":1878},{"krate":0,"index":1939},{"krate":0,"index":1940},{"krate":0,"index":1943},{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1950}],"decl_id":null,"docs":" # The rulinalg crate.","sig":null,"attributes":[{"value":"/ # The rulinalg crate.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":26,"byte_end":29,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ A crate that provides high-dimensional linear algebra","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":30,"byte_end":87,"line_start":3,"line_end":3,"column_start":1,"column_end":58}},{"value":"/ implemented entirely in Rust.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":88,"byte_end":121,"line_start":4,"line_end":4,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":122,"byte_end":125,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ ---","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":126,"byte_end":133,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":134,"byte_end":137,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This crate provides two core data structures: `Matrix` and","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":138,"byte_end":200,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/ `Vector`. These structs are designed to behave as you would expect","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":201,"byte_end":271,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"/ with relevant operator overloading.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":272,"byte_end":311,"line_start":10,"line_end":10,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":312,"byte_end":315,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The library currently contains (at least) the following linear algebra","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":316,"byte_end":390,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ methods:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":391,"byte_end":403,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":404,"byte_end":407,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ - Matrix inversion","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":408,"byte_end":430,"line_start":15,"line_end":15,"column_start":1,"column_end":23}},{"value":"/ - LUP decomposition","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":431,"byte_end":454,"line_start":16,"line_end":16,"column_start":1,"column_end":24}},{"value":"/ - QR decomposition","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":455,"byte_end":477,"line_start":17,"line_end":17,"column_start":1,"column_end":23}},{"value":"/ - SVD decomposition","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":478,"byte_end":501,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"/ - Cholesky decomposition","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":502,"byte_end":530,"line_start":19,"line_end":19,"column_start":1,"column_end":29}},{"value":"/ - Eigenvalue decomposition","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":531,"byte_end":561,"line_start":20,"line_end":20,"column_start":1,"column_end":31}},{"value":"/ - Upper Hessenberg decomposition","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":562,"byte_end":598,"line_start":21,"line_end":21,"column_start":1,"column_end":37}},{"value":"/ - Linear system solver","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":599,"byte_end":625,"line_start":22,"line_end":22,"column_start":1,"column_end":27}},{"value":"/ - Other standard transformations, e.g. Transposing, concatenation, etc.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":626,"byte_end":701,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":702,"byte_end":705,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ---","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":706,"byte_end":713,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":714,"byte_end":717,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":718,"byte_end":730,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":731,"byte_end":734,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Specific usage of modules is described within the modules themselves. This section","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":735,"byte_end":821,"line_start":29,"line_end":29,"column_start":1,"column_end":87}},{"value":"/ will highlight the basic usage.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":822,"byte_end":857,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":858,"byte_end":861,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ We can create new matrices.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":862,"byte_end":893,"line_start":32,"line_end":32,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":894,"byte_end":897,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":898,"byte_end":905,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":906,"byte_end":939,"line_start":35,"line_end":35,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":940,"byte_end":943,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ // A new matrix with 3 rows and 2 columns.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":944,"byte_end":990,"line_start":37,"line_end":37,"column_start":1,"column_end":47}},{"value":"/ let a = Matrix::new(3, 2, vec![1.0, 2.0, 3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":991,"byte_end":1057,"line_start":38,"line_end":38,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1058,"byte_end":1065,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1066,"byte_end":1069,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ The matrices are stored in row-major order. This means in the example above the top","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1070,"byte_end":1157,"line_start":41,"line_end":41,"column_start":1,"column_end":88}},{"value":"/ row will be [1,2,3].","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1158,"byte_end":1182,"line_start":42,"line_end":42,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1183,"byte_end":1186,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ We can perform operations on matrices.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1187,"byte_end":1229,"line_start":44,"line_end":44,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1230,"byte_end":1233,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1234,"byte_end":1241,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1242,"byte_end":1275,"line_start":47,"line_end":47,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1276,"byte_end":1279,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ // A new matrix with 3 rows and 2 columns.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1280,"byte_end":1326,"line_start":49,"line_end":49,"column_start":1,"column_end":47}},{"value":"/ let a = Matrix::new(3, 2, vec![1.0, 2.0, 3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1327,"byte_end":1393,"line_start":50,"line_end":50,"column_start":1,"column_end":67}},{"value":"/ let b = Matrix::new(3, 2, vec![6.0, 5.0, 4.0, 3.0, 2.0, 1.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1394,"byte_end":1460,"line_start":51,"line_end":51,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1461,"byte_end":1464,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ // Produces a 3x2 matrix filled with sevens.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1465,"byte_end":1513,"line_start":53,"line_end":53,"column_start":1,"column_end":49}},{"value":"/ let c = a + b;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1514,"byte_end":1532,"line_start":54,"line_end":54,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1533,"byte_end":1540,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1541,"byte_end":1544,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Sometimes we want to construct small matrices by hand, usually for writing unit tests","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1545,"byte_end":1634,"line_start":57,"line_end":57,"column_start":1,"column_end":90}},{"value":"/ or examples. For this purpose, `rulinalg` provides the `matrix!` macro:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1635,"byte_end":1710,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1711,"byte_end":1714,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1715,"byte_end":1722,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ // Remember to enable macro usage in rulinalg!","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1723,"byte_end":1773,"line_start":61,"line_end":61,"column_start":1,"column_end":51}},{"value":"/ #[macro_use]","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1774,"byte_end":1790,"line_start":62,"line_end":62,"column_start":1,"column_end":17}},{"value":"/ extern crate rulinalg;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1791,"byte_end":1817,"line_start":63,"line_end":63,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1818,"byte_end":1821,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1822,"byte_end":1839,"line_start":65,"line_end":65,"column_start":1,"column_end":18}},{"value":"/ // Construct a 3x3 matrix of f64","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1840,"byte_end":1876,"line_start":66,"line_end":66,"column_start":1,"column_end":37}},{"value":"/ // Commas separate columns and semi-colons separate rows","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1877,"byte_end":1937,"line_start":67,"line_end":67,"column_start":1,"column_end":61}},{"value":"/ let mat = matrix![1.0, 2.0, 3.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1938,"byte_end":1974,"line_start":68,"line_end":68,"column_start":1,"column_end":37}},{"value":"/                   4.0, 5.0, 6.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":1975,"byte_end":2011,"line_start":69,"line_end":69,"column_start":1,"column_end":37}},{"value":"/                   7.0, 8.0, 9.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2012,"byte_end":2049,"line_start":70,"line_end":70,"column_start":1,"column_end":38}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2050,"byte_end":2057,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2058,"byte_end":2065,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2066,"byte_end":2069,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ Of course the library can support more complex operations but you should check the individual","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2070,"byte_end":2167,"line_start":74,"line_end":74,"column_start":1,"column_end":98}},{"value":"/ modules for more information.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2168,"byte_end":2201,"line_start":75,"line_end":75,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2202,"byte_end":2205,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ # Matrix Slices","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2206,"byte_end":2225,"line_start":77,"line_end":77,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2226,"byte_end":2229,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ Often times it is desirable to operate on only a sub-section of a `Matrix` without copying this block.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2230,"byte_end":2336,"line_start":79,"line_end":79,"column_start":1,"column_end":107}},{"value":"/ Rulinalg allows this via the `MatrixSlice` and `MatrixSliceMut` structs. These structs can be created","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2337,"byte_end":2442,"line_start":80,"line_end":80,"column_start":1,"column_end":106}},{"value":"/ from `Matrix` structs and follow all of the borrowing rules of Rust.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2443,"byte_end":2515,"line_start":81,"line_end":81,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2516,"byte_end":2519,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ Note finally that much of the `Matrix`/`MatrixSlice`/`MatrixSliceMut` functionality is contained behind","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2520,"byte_end":2627,"line_start":83,"line_end":83,"column_start":1,"column_end":108}},{"value":"/ the `BaseMatrix`/`BaseMatrixMut` traits. This allows us to be generic over matrices or slices.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2628,"byte_end":2726,"line_start":84,"line_end":84,"column_start":1,"column_end":99}},{"value":"deny(missing_docs)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2728,"byte_end":2750,"line_start":86,"line_end":86,"column_start":1,"column_end":23}},{"value":"warn(missing_debug_implementations)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2751,"byte_end":2790,"line_start":87,"line_end":87,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/mod.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":117}],"decl_id":null,"docs":" Macros for the linear algebra modules.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2940,"byte_end":2952,"line_start":93,"line_end":93,"column_start":1,"column_end":13}},{"value":"/ Macros for the linear algebra modules.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/mod.rs","byte_start":3437,"byte_end":3479,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":31},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":9787,"byte_end":9804,"line_start":12,"line_end":12,"column_start":11,"column_end":28},"name":"ComparisonFailure","qualname":"::macros::matrix_eq::ComparisonFailure","value":"ComparisonFailure","parent":null,"children":[{"krate":0,"index":32}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":9814,"byte_end":9828,"line_start":13,"line_end":13,"column_start":8,"column_end":22},"name":"failure_reason","qualname":"::macros::matrix_eq::ComparisonFailure::failure_reason","value":"pub fn failure_reason(&Self) -> Option<String>","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1953},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":9925,"byte_end":9955,"line_start":18,"line_end":18,"column_start":12,"column_end":42},"name":"MatrixElementComparisonFailure","qualname":"::macros::matrix_eq::MatrixElementComparisonFailure","value":"MatrixElementComparisonFailure { x, y, error, row, col }","parent":null,"children":[{"krate":0,"index":1956},{"krate":0,"index":1957},{"krate":0,"index":1958},{"krate":0,"index":1959},{"krate":0,"index":1960}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1956},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":9999,"byte_end":10000,"line_start":19,"line_end":19,"column_start":9,"column_end":10},"name":"x","qualname":"::macros::matrix_eq::MatrixElementComparisonFailure::x","value":"T","parent":{"krate":0,"index":1953},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1957},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":10013,"byte_end":10014,"line_start":20,"line_end":20,"column_start":9,"column_end":10},"name":"y","qualname":"::macros::matrix_eq::MatrixElementComparisonFailure::y","value":"T","parent":{"krate":0,"index":1953},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1958},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":10027,"byte_end":10032,"line_start":21,"line_end":21,"column_start":9,"column_end":14},"name":"error","qualname":"::macros::matrix_eq::MatrixElementComparisonFailure::error","value":"E","parent":{"krate":0,"index":1953},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1959},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":10045,"byte_end":10048,"line_start":22,"line_end":22,"column_start":9,"column_end":12},"name":"row","qualname":"::macros::matrix_eq::MatrixElementComparisonFailure::row","value":"usize","parent":{"krate":0,"index":1953},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1960},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":10065,"byte_end":10068,"line_start":23,"line_end":23,"column_start":9,"column_end":12},"name":"col","qualname":"::macros::matrix_eq::MatrixElementComparisonFailure::col","value":"usize","parent":{"krate":0,"index":1953},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1985},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":10882,"byte_end":10887,"line_start":49,"line_end":49,"column_start":5,"column_end":10},"name":"Match","qualname":"::macros::matrix_eq::MatrixComparisonResult::Match","value":"MatrixComparisonResult::Match","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1987},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":10893,"byte_end":10913,"line_start":50,"line_end":50,"column_start":5,"column_end":25},"name":"MismatchedDimensions","qualname":"::macros::matrix_eq::MatrixComparisonResult::MismatchedDimensions","value":"MatrixComparisonResult::MismatchedDimensions { dim_x, dim_y }","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1990},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":10968,"byte_end":10986,"line_start":51,"line_end":51,"column_start":5,"column_end":23},"name":"MismatchedElements","qualname":"::macros::matrix_eq::MatrixComparisonResult::MismatchedElements","value":"MatrixComparisonResult::MismatchedElements { comparator, mismatches }","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1981},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":10752,"byte_end":10774,"line_start":45,"line_end":45,"column_start":10,"column_end":32},"name":"MatrixComparisonResult","qualname":"::macros::matrix_eq::MatrixComparisonResult","value":"pub enum MatrixComparisonResult<T, C, E> where T: Copy,\n         C: ElementwiseComparator<T, E>, E: ComparisonFailure {\n    Match,\n    MismatchedDimensions {\n        dim_x: (usize, usize),\n        dim_y: (usize, usize),\n    },\n    MismatchedElements {\n        comparator: C,\n        mismatches: Vec<MatrixElementComparisonFailure<T, E>>,\n    },\n}","parent":null,"children":[{"krate":0,"index":1985},{"krate":0,"index":1987},{"krate":0,"index":1990}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":37},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":11360,"byte_end":11381,"line_start":58,"line_end":58,"column_start":11,"column_end":32},"name":"ElementwiseComparator","qualname":"::macros::matrix_eq::ElementwiseComparator","value":"ElementwiseComparator<T, E>","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41}],"decl_id":null,"docs":" Trait that describes elementwise comparators for [assert_matrix_eq!](../macro.assert_matrix_eq!.html).","sig":null,"attributes":[{"value":"/ Trait that describes elementwise comparators for [assert_matrix_eq!](../macro.assert_matrix_eq!.html).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":11063,"byte_end":11169,"line_start":54,"line_end":54,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":11170,"byte_end":11173,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Usually you should not need to interface with this trait directly. It is a part of the documentation","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":11174,"byte_end":11278,"line_start":56,"line_end":56,"column_start":1,"column_end":105}},{"value":"/ only so that the trait bounds for the comparators are made public.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":11279,"byte_end":11349,"line_start":57,"line_end":57,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":11543,"byte_end":11550,"line_start":62,"line_end":62,"column_start":8,"column_end":15},"name":"compare","qualname":"::macros::matrix_eq::ElementwiseComparator::compare","value":"pub fn compare(&Self, T, T) -> Result<(), E>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Compares two elements.","sig":null,"attributes":[{"value":"/ Compares two elements.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":11430,"byte_end":11456,"line_start":59,"line_end":59,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":11461,"byte_end":11464,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Returns the error associated with the comparison if it failed.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":11469,"byte_end":11535,"line_start":61,"line_end":61,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":11637,"byte_end":11648,"line_start":65,"line_end":65,"column_start":8,"column_end":19},"name":"description","qualname":"::macros::matrix_eq::ElementwiseComparator::description","value":"pub fn description(&Self) -> String","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" A description of the comparator.\n","sig":null,"attributes":[{"value":"/ A description of the comparator.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":11593,"byte_end":11629,"line_start":64,"line_end":64,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":11836,"byte_end":11849,"line_start":72,"line_end":72,"column_start":12,"column_end":25},"name":"panic_message","qualname":"<MatrixComparisonResult<T, C, E>>::panic_message","value":"pub fn panic_message(&Self) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2008},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":13879,"byte_end":13909,"line_start":126,"line_end":126,"column_start":12,"column_end":42},"name":"VectorElementComparisonFailure","qualname":"::macros::matrix_eq::VectorElementComparisonFailure","value":"VectorElementComparisonFailure { x, y, error, index }","parent":null,"children":[{"krate":0,"index":2011},{"krate":0,"index":2012},{"krate":0,"index":2013},{"krate":0,"index":2014}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2011},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":13953,"byte_end":13954,"line_start":127,"line_end":127,"column_start":9,"column_end":10},"name":"x","qualname":"::macros::matrix_eq::VectorElementComparisonFailure::x","value":"T","parent":{"krate":0,"index":2008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2012},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":13967,"byte_end":13968,"line_start":128,"line_end":128,"column_start":9,"column_end":10},"name":"y","qualname":"::macros::matrix_eq::VectorElementComparisonFailure::y","value":"T","parent":{"krate":0,"index":2008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2013},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":13981,"byte_end":13986,"line_start":129,"line_end":129,"column_start":9,"column_end":14},"name":"error","qualname":"::macros::matrix_eq::VectorElementComparisonFailure::error","value":"E","parent":{"krate":0,"index":2008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2014},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":13999,"byte_end":14004,"line_start":130,"line_end":130,"column_start":9,"column_end":14},"name":"index","qualname":"::macros::matrix_eq::VectorElementComparisonFailure::index","value":"usize","parent":{"krate":0,"index":2008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2039},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":14783,"byte_end":14788,"line_start":154,"line_end":154,"column_start":5,"column_end":10},"name":"Match","qualname":"::macros::matrix_eq::VectorComparisonResult::Match","value":"VectorComparisonResult::Match","parent":{"krate":0,"index":2035},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2041},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":14794,"byte_end":14814,"line_start":155,"line_end":155,"column_start":5,"column_end":25},"name":"MismatchedDimensions","qualname":"::macros::matrix_eq::VectorComparisonResult::MismatchedDimensions","value":"VectorComparisonResult::MismatchedDimensions { dim_x, dim_y }","parent":{"krate":0,"index":2035},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2044},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":14871,"byte_end":14889,"line_start":159,"line_end":159,"column_start":5,"column_end":23},"name":"MismatchedElements","qualname":"::macros::matrix_eq::VectorComparisonResult::MismatchedElements","value":"VectorComparisonResult::MismatchedElements { comparator, mismatches }","parent":{"krate":0,"index":2035},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2035},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":14653,"byte_end":14675,"line_start":150,"line_end":150,"column_start":10,"column_end":32},"name":"VectorComparisonResult","qualname":"::macros::matrix_eq::VectorComparisonResult","value":"pub enum VectorComparisonResult<T, C, E> where T: Copy,\n         C: ElementwiseComparator<T, E>, E: ComparisonFailure {\n    Match,\n    MismatchedDimensions {\n        dim_x: usize,\n        dim_y: usize,\n    },\n    MismatchedElements {\n        comparator: C,\n        mismatches: Vec<VectorElementComparisonFailure<T, E>>,\n    },\n}","parent":null,"children":[{"krate":0,"index":2039},{"krate":0,"index":2041},{"krate":0,"index":2044}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":15133,"byte_end":15146,"line_start":167,"line_end":167,"column_start":12,"column_end":25},"name":"panic_message","qualname":"<VectorComparisonResult<T, C, E>>::panic_message","value":"pub fn panic_message(&Self) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":56},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":17008,"byte_end":17037,"line_start":218,"line_end":218,"column_start":8,"column_end":37},"name":"elementwise_matrix_comparison","qualname":"::macros::matrix_eq::elementwise_matrix_comparison","value":"pub fn elementwise_matrix_comparison<T, M, C, E>(&M, &M, C)\n-> MatrixComparisonResult<T, C, E> where M: BaseMatrix<T>, T: Copy,\nC: ElementwiseComparator<T, E>, E: ComparisonFailure","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":18464,"byte_end":18493,"line_start":261,"line_end":261,"column_start":8,"column_end":37},"name":"elementwise_vector_comparison","qualname":"::macros::matrix_eq::elementwise_vector_comparison","value":"pub fn elementwise_vector_comparison<T, C, E>(&[T], &[T], C)\n-> VectorComparisonResult<T, C, E> where T: Copy,\nC: ElementwiseComparator<T, E>, E: ComparisonFailure","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2080},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":20021,"byte_end":20050,"line_start":307,"line_end":307,"column_start":12,"column_end":41},"name":"AbsoluteElementwiseComparator","qualname":"::macros::matrix_eq::AbsoluteElementwiseComparator","value":"AbsoluteElementwiseComparator { tol }","parent":null,"children":[{"krate":0,"index":2082}],"decl_id":null,"docs":" The `abs` comparator used with [assert_matrix_eq!](../macro.assert_matrix_eq!.html).\n","sig":null,"attributes":[{"value":"/ The `abs` comparator used with [assert_matrix_eq!](../macro.assert_matrix_eq!.html).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":19880,"byte_end":19968,"line_start":305,"line_end":305,"column_start":1,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":2082},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":20127,"byte_end":20130,"line_start":309,"line_end":309,"column_start":9,"column_end":12},"name":"tol","qualname":"::macros::matrix_eq::AbsoluteElementwiseComparator::tol","value":"T","parent":{"krate":0,"index":2080},"children":[],"decl_id":null,"docs":" The maximum absolute difference tolerated (inclusive).\n","sig":null,"attributes":[{"value":"/ The maximum absolute difference tolerated (inclusive).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":20060,"byte_end":20118,"line_start":308,"line_end":308,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":2097},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":21328,"byte_end":21354,"line_start":349,"line_end":349,"column_start":12,"column_end":38},"name":"ExactElementwiseComparator","qualname":"::macros::matrix_eq::ExactElementwiseComparator","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `exact` comparator used with [assert_matrix_eq!](../macro.assert_matrix_eq!.html).\n","sig":null,"attributes":[{"value":"/ The `exact` comparator used with [assert_matrix_eq!](../macro.assert_matrix_eq!.html).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":21185,"byte_end":21275,"line_start":347,"line_end":347,"column_start":1,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":2107},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":21424,"byte_end":21434,"line_start":353,"line_end":353,"column_start":12,"column_end":22},"name":"ExactError","qualname":"::macros::matrix_eq::ExactError","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2117},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":22056,"byte_end":22080,"line_start":377,"line_end":377,"column_start":12,"column_end":36},"name":"UlpElementwiseComparator","qualname":"::macros::matrix_eq::UlpElementwiseComparator","value":"UlpElementwiseComparator { tol }","parent":null,"children":[{"krate":0,"index":2118}],"decl_id":null,"docs":" The `ulp` comparator used with [assert_matrix_eq!](../macro.assert_matrix_eq!.html).\n","sig":null,"attributes":[{"value":"/ The `ulp` comparator used with [assert_matrix_eq!](../macro.assert_matrix_eq!.html).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":21915,"byte_end":22003,"line_start":375,"line_end":375,"column_start":1,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":2118},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":22158,"byte_end":22161,"line_start":379,"line_end":379,"column_start":9,"column_end":12},"name":"tol","qualname":"::macros::matrix_eq::UlpElementwiseComparator::tol","value":"u64","parent":{"krate":0,"index":2117},"children":[],"decl_id":null,"docs":" The maximum difference in ULP units tolerated (inclusive).\n","sig":null,"attributes":[{"value":"/ The maximum difference in ULP units tolerated (inclusive).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":22087,"byte_end":22149,"line_start":378,"line_end":378,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2128},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":22237,"byte_end":22245,"line_start":384,"line_end":384,"column_start":12,"column_end":20},"name":"UlpError","qualname":"::macros::matrix_eq::UlpError","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2130},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":22246,"byte_end":22274,"line_start":384,"line_end":384,"column_start":21,"column_end":49},"name":"0","qualname":"::macros::matrix_eq::UlpError::0","value":"ulp::UlpComparisonResult","parent":{"krate":0,"index":2128},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2140},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":23448,"byte_end":23474,"line_start":419,"line_end":419,"column_start":12,"column_end":38},"name":"FloatElementwiseComparator","qualname":"::macros::matrix_eq::FloatElementwiseComparator","value":"FloatElementwiseComparator {  }","parent":null,"children":[{"krate":0,"index":2142},{"krate":0,"index":2143}],"decl_id":null,"docs":" The `float` comparator used with [assert_matrix_eq!](../macro.assert_matrix_eq!.html).\n","sig":null,"attributes":[{"value":"/ The `float` comparator used with [assert_matrix_eq!](../macro.assert_matrix_eq!.html).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":23305,"byte_end":23395,"line_start":417,"line_end":417,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":23667,"byte_end":23674,"line_start":427,"line_end":427,"column_start":12,"column_end":19},"name":"default","qualname":"<FloatElementwiseComparator<T>>::default","value":"pub fn default() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":23875,"byte_end":23878,"line_start":434,"line_end":434,"column_start":12,"column_end":15},"name":"eps","qualname":"<FloatElementwiseComparator<T>>::eps","value":"pub fn eps(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":24055,"byte_end":24058,"line_start":441,"line_end":441,"column_start":12,"column_end":15},"name":"ulp","qualname":"<FloatElementwiseComparator<T>>::ulp","value":"pub fn ulp(Self, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":120},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"matrix","qualname":"::matrix","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":485},{"krate":0,"index":803},{"krate":0,"index":859},{"krate":0,"index":938},{"krate":0,"index":1101},{"krate":0,"index":1224},{"krate":0,"index":1285},{"krate":0,"index":1311},{"krate":0,"index":1397},{"krate":0,"index":1485},{"krate":0,"index":1486},{"krate":0,"index":1489},{"krate":0,"index":1492},{"krate":0,"index":1493},{"krate":0,"index":1496},{"krate":0,"index":3649},{"krate":0,"index":3654},{"krate":0,"index":3656},{"krate":0,"index":3658},{"krate":0,"index":3659},{"krate":0,"index":3664},{"krate":0,"index":3667},{"krate":0,"index":3670},{"krate":0,"index":3672},{"krate":0,"index":3676},{"krate":0,"index":3678},{"krate":0,"index":3681},{"krate":0,"index":3685},{"krate":0,"index":3693},{"krate":0,"index":3697},{"krate":0,"index":3701},{"krate":0,"index":3704},{"krate":0,"index":3712},{"krate":0,"index":3716},{"krate":0,"index":3720},{"krate":0,"index":3724},{"krate":0,"index":3728},{"krate":0,"index":3731},{"krate":0,"index":3735},{"krate":0,"index":3739},{"krate":0,"index":3748},{"krate":0,"index":3752},{"krate":0,"index":3761},{"krate":0,"index":1499},{"krate":0,"index":1503},{"krate":0,"index":3765},{"krate":0,"index":3769},{"krate":0,"index":3773},{"krate":0,"index":3777},{"krate":0,"index":3780},{"krate":0,"index":3784},{"krate":0,"index":3788},{"krate":0,"index":3797},{"krate":0,"index":3801},{"krate":0,"index":3810},{"krate":0,"index":3814},{"krate":0,"index":3823},{"krate":0,"index":3825},{"krate":0,"index":3826},{"krate":0,"index":3829},{"krate":0,"index":3837},{"krate":0,"index":3842},{"krate":0,"index":3850},{"krate":0,"index":3855},{"krate":0,"index":3865},{"krate":0,"index":3869},{"krate":0,"index":3879},{"krate":0,"index":1508},{"krate":0,"index":1511}],"decl_id":null,"docs":" The matrix module.","sig":null,"attributes":[{"value":"/ The matrix module.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":64807,"byte_end":64829,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":64830,"byte_end":64833,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Currently contains all code","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":64834,"byte_end":64865,"line_start":3,"line_end":3,"column_start":1,"column_end":32}},{"value":"/ relating to the matrix linear algebra struct.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":64866,"byte_end":64915,"line_start":4,"line_end":4,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":64916,"byte_end":64919,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Most of the logic for manipulating matrices is generically implemented","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":64920,"byte_end":64994,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/ via `BaseMatrix` and `BaseMatrixMut` trait.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":64995,"byte_end":65042,"line_start":7,"line_end":7,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":143},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"decomposition","qualname":"::matrix::decomposition","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":171},{"krate":0,"index":195},{"krate":0,"index":231},{"krate":0,"index":281},{"krate":0,"index":316},{"krate":0,"index":385},{"krate":0,"index":438},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":451},{"krate":0,"index":454},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":461},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":468},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":475},{"krate":0,"index":478}],"decl_id":null,"docs":" Decompositions for matrices.","sig":null,"attributes":[{"value":"/ Decompositions for matrices.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":73810,"byte_end":73842,"line_start":1,"line_end":1,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":73843,"byte_end":73846,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module houses the decomposition API of `rulinalg`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":73847,"byte_end":73906,"line_start":3,"line_end":3,"column_start":1,"column_end":60}},{"value":"/ A decomposition - or factorization - of a matrix is an","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":73907,"byte_end":73965,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/ ordered set of *factors* such that when multiplied reconstructs","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":73966,"byte_end":74033,"line_start":5,"line_end":5,"column_start":1,"column_end":68}},{"value":"/ the original matrix. The [Decomposition](trait.Decomposition.html)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74034,"byte_end":74104,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"/ trait encodes this property.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74105,"byte_end":74137,"line_start":7,"line_end":7,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74138,"byte_end":74141,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # The decomposition API","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74142,"byte_end":74169,"line_start":9,"line_end":9,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74170,"byte_end":74173,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Decompositions in `rulinalg` are in general modeled after","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74174,"byte_end":74235,"line_start":11,"line_end":11,"column_start":1,"column_end":62}},{"value":"/ the following:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74236,"byte_end":74254,"line_start":12,"line_end":12,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74255,"byte_end":74258,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ 1. Given an appropriate matrix, an opaque decomposition object","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74259,"byte_end":74325,"line_start":14,"line_end":14,"column_start":1,"column_end":67}},{"value":"/    may be computed which internally stores the factors","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74326,"byte_end":74384,"line_start":15,"line_end":15,"column_start":1,"column_end":59}},{"value":"/    in an efficient and appropriate format.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74385,"byte_end":74431,"line_start":16,"line_end":16,"column_start":1,"column_end":47}},{"value":"/ 2. In general, the factors may not be immediately available","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74432,"byte_end":74495,"line_start":17,"line_end":17,"column_start":1,"column_end":64}},{"value":"/    as distinct matrices after decomposition. If the user","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74496,"byte_end":74556,"line_start":18,"line_end":18,"column_start":1,"column_end":61}},{"value":"/    desires the explicit matrix factors involved in the","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74557,"byte_end":74615,"line_start":19,"line_end":19,"column_start":1,"column_end":59}},{"value":"/    decomposition, the user must `unpack` the decomposition.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74616,"byte_end":74679,"line_start":20,"line_end":20,"column_start":1,"column_end":64}},{"value":"/ 3. Before unpacking the decomposition, the decomposition","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74680,"byte_end":74740,"line_start":21,"line_end":21,"column_start":1,"column_end":61}},{"value":"/    data structure in question may offer an API that provides","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74741,"byte_end":74805,"line_start":22,"line_end":22,"column_start":1,"column_end":65}},{"value":"/    efficient implementations for some of the most common","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74806,"byte_end":74866,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/    applications of the decomposition. The user is encouraged","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74867,"byte_end":74931,"line_start":24,"line_end":24,"column_start":1,"column_end":65}},{"value":"/    to use the decomposition-specific API rather than unpacking","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74932,"byte_end":74998,"line_start":25,"line_end":25,"column_start":1,"column_end":67}},{"value":"/    the decompositions whenever possible.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":74999,"byte_end":75043,"line_start":26,"line_end":26,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75044,"byte_end":75047,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ For a motivating example that explains the rationale behind","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75048,"byte_end":75111,"line_start":28,"line_end":28,"column_start":1,"column_end":64}},{"value":"/ this design, let us consider the typical LU decomposition with","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75112,"byte_end":75178,"line_start":29,"line_end":29,"column_start":1,"column_end":67}},{"value":"/ partial pivoting. In this case, given a square invertible matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75179,"byte_end":75247,"line_start":30,"line_end":30,"column_start":1,"column_end":69}},{"value":"/ `A`, one may find matrices `P`, `L` and `U` such that","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75248,"byte_end":75305,"line_start":31,"line_end":31,"column_start":1,"column_end":58}},{"value":"/ `PA = LU`. Here `P` is a permutation matrix, `L` is a lower","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75306,"byte_end":75369,"line_start":32,"line_end":32,"column_start":1,"column_end":64}},{"value":"/ triangular matrix and `U` is an upper triangular matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75370,"byte_end":75430,"line_start":33,"line_end":33,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75431,"byte_end":75434,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Once the decomposition has been obtained, one of its applications","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75435,"byte_end":75504,"line_start":35,"line_end":35,"column_start":1,"column_end":70}},{"value":"/ is the efficient solution of multiple similar linear systems.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75505,"byte_end":75570,"line_start":36,"line_end":36,"column_start":1,"column_end":66}},{"value":"/ Consider that while computing the LU decomposition requires","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75571,"byte_end":75634,"line_start":37,"line_end":37,"column_start":1,"column_end":64}},{"value":"/ O(n<sup>3</sup>) floating point operations, the solution to","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75635,"byte_end":75698,"line_start":38,"line_end":38,"column_start":1,"column_end":64}},{"value":"/ the system `Ax = b` can be computed in O(n<sup>2</sup>) floating","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75699,"byte_end":75767,"line_start":39,"line_end":39,"column_start":1,"column_end":69}},{"value":"/ point operations if the LU decomposition has already been obtained.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75768,"byte_end":75839,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ Since the right-hand side `b` has no bearing on the LU decomposition,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75840,"byte_end":75913,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ it follows that one can efficiently solve this system for any `b`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75914,"byte_end":75984,"line_start":42,"line_end":42,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75985,"byte_end":75988,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ It turns out that the matrices `L` and `U` can be stored compactly","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":75989,"byte_end":76059,"line_start":44,"line_end":44,"column_start":1,"column_end":71}},{"value":"/ in the space of a single matrix. Indeed, this is how `PartialPivLu`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76060,"byte_end":76131,"line_start":45,"line_end":45,"column_start":1,"column_end":72}},{"value":"/ stores the LU decomposition internally. This allows `rulinalg` to","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76132,"byte_end":76201,"line_start":46,"line_end":46,"column_start":1,"column_end":70}},{"value":"/ provide the user with efficient implementations of common applications","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76202,"byte_end":76276,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/ for the LU decomposition. However, the full matrix factors are easily","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76277,"byte_end":76350,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/ available to the user by unpacking the decomposition.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76351,"byte_end":76408,"line_start":49,"line_end":49,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76409,"byte_end":76412,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Available decompositions","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76413,"byte_end":76443,"line_start":51,"line_end":51,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76444,"byte_end":76447,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ **The decompositions API is a work in progress.**","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76448,"byte_end":76501,"line_start":53,"line_end":53,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76502,"byte_end":76505,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ Currently, only a portion of the available decompositions in `rulinalg`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76506,"byte_end":76581,"line_start":55,"line_end":55,"column_start":1,"column_end":76}},{"value":"/ are available through the decomposition API. Please see the","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76582,"byte_end":76645,"line_start":56,"line_end":56,"column_start":1,"column_end":64}},{"value":"/ [Matrix](../struct.Matrix.html) API for the old decomposition","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76646,"byte_end":76711,"line_start":57,"line_end":57,"column_start":1,"column_end":66}},{"value":"/ implementations that have yet not been implemented within","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76712,"byte_end":76773,"line_start":58,"line_end":58,"column_start":1,"column_end":62}},{"value":"/ this framework.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76774,"byte_end":76793,"line_start":59,"line_end":59,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76794,"byte_end":76797,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ <table>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76798,"byte_end":76809,"line_start":61,"line_end":61,"column_start":1,"column_end":12}},{"value":"/ <thead>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76810,"byte_end":76821,"line_start":62,"line_end":62,"column_start":1,"column_end":12}},{"value":"/ <tr>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76822,"byte_end":76830,"line_start":63,"line_end":63,"column_start":1,"column_end":9}},{"value":"/ <th>Decomposition</th>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76831,"byte_end":76857,"line_start":64,"line_end":64,"column_start":1,"column_end":27}},{"value":"/ <th>Applicable to</th>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76858,"byte_end":76884,"line_start":65,"line_end":65,"column_start":1,"column_end":27}},{"value":"/ <th>Supported features</th>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76885,"byte_end":76916,"line_start":66,"line_end":66,"column_start":1,"column_end":32}},{"value":"/ </tr>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76917,"byte_end":76926,"line_start":67,"line_end":67,"column_start":1,"column_end":10}},{"value":"/ <tbody>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76927,"byte_end":76938,"line_start":68,"line_end":68,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76939,"byte_end":76942,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ <tr>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76943,"byte_end":76951,"line_start":70,"line_end":70,"column_start":1,"column_end":9}},{"value":"/ <td><a href=\"struct.PartialPivLu.html\">PartialPivLu</a></td>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":76952,"byte_end":77016,"line_start":71,"line_end":71,"column_start":1,"column_end":65}},{"value":"/ <td>Square, invertible matrices</td>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77017,"byte_end":77057,"line_start":72,"line_end":72,"column_start":1,"column_end":41}},{"value":"/ <td>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77058,"byte_end":77066,"line_start":73,"line_end":73,"column_start":1,"column_end":9}},{"value":"/     <ul>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77067,"byte_end":77079,"line_start":74,"line_end":74,"column_start":1,"column_end":13}},{"value":"/     <li>Linear system solving</li>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77080,"byte_end":77118,"line_start":75,"line_end":75,"column_start":1,"column_end":39}},{"value":"/     <li>Matrix inverse</li>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77119,"byte_end":77150,"line_start":76,"line_end":76,"column_start":1,"column_end":32}},{"value":"/     <li>Determinant computation</li>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77151,"byte_end":77191,"line_start":77,"line_end":77,"column_start":1,"column_end":41}},{"value":"/     </ul>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77192,"byte_end":77205,"line_start":78,"line_end":78,"column_start":1,"column_end":14}},{"value":"/ </td>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77206,"byte_end":77215,"line_start":79,"line_end":79,"column_start":1,"column_end":10}},{"value":"/ </tr>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77216,"byte_end":77225,"line_start":80,"line_end":80,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77226,"byte_end":77229,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ </tbody>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77230,"byte_end":77242,"line_start":82,"line_end":82,"column_start":1,"column_end":13}},{"value":"/ </table>","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77243,"byte_end":77255,"line_start":83,"line_end":83,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":81270,"byte_end":81279,"line_start":32,"line_end":32,"column_start":12,"column_end":21},"name":"qr_decomp","qualname":"<Matrix<T>>::qr_decomp","value":"pub fn qr_decomp(Self) -> Result<(Matrix<T>, Matrix<T>), Error>","parent":null,"children":[],"decl_id":null,"docs":" Compute the QR decomposition of the matrix.","sig":null,"attributes":[{"value":"/ Compute the QR decomposition of the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":80742,"byte_end":80789,"line_start":11,"line_end":11,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":80794,"byte_end":80797,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ Returns the tuple (Q,R).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":80802,"byte_end":80830,"line_start":13,"line_end":13,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":80835,"byte_end":80838,"line_start":14,"line_end":14,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":80843,"byte_end":80857,"line_start":15,"line_end":15,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":80862,"byte_end":80865,"line_start":16,"line_end":16,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":80870,"byte_end":80877,"line_start":17,"line_end":17,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":80882,"byte_end":80935,"line_start":18,"line_end":18,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":80940,"byte_end":80973,"line_start":19,"line_end":19,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":80978,"byte_end":80981,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ let m = matrix![1.0, 0.5, 0.5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":80986,"byte_end":81020,"line_start":21,"line_end":21,"column_start":5,"column_end":39}},{"value":"/                 0.5, 1.0, 0.5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":81025,"byte_end":81059,"line_start":22,"line_end":22,"column_start":5,"column_end":39}},{"value":"/                 0.5, 0.5, 1.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":81064,"byte_end":81099,"line_start":23,"line_end":23,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":81104,"byte_end":81107,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ let (q, r) = m.qr_decomp().unwrap();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":81112,"byte_end":81152,"line_start":25,"line_end":25,"column_start":5,"column_end":45}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":81157,"byte_end":81164,"line_start":26,"line_end":26,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":81169,"byte_end":81176,"line_start":27,"line_end":27,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":81181,"byte_end":81184,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":81189,"byte_end":81203,"line_start":29,"line_end":29,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":81208,"byte_end":81211,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ - Cannot compute the QR decomposition.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":81216,"byte_end":81258,"line_start":31,"line_end":31,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83706,"byte_end":83714,"line_start":36,"line_end":36,"column_start":12,"column_end":20},"name":"cholesky","qualname":"<Matrix<T>>::cholesky","value":"pub fn cholesky(&Self) -> Result<Matrix<T>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Cholesky decomposition","sig":null,"attributes":[{"value":"/ Cholesky decomposition","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83108,"byte_end":83134,"line_start":11,"line_end":11,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83139,"byte_end":83142,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ Returns the cholesky decomposition of a positive definite matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83147,"byte_end":83216,"line_start":13,"line_end":13,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83221,"byte_end":83224,"line_start":14,"line_end":14,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83229,"byte_end":83243,"line_start":15,"line_end":15,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83248,"byte_end":83251,"line_start":16,"line_end":16,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83256,"byte_end":83263,"line_start":17,"line_end":17,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83268,"byte_end":83321,"line_start":18,"line_end":18,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83326,"byte_end":83359,"line_start":19,"line_end":19,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83364,"byte_end":83367,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ let m = matrix![1.0, 0.5, 0.5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83372,"byte_end":83406,"line_start":21,"line_end":21,"column_start":5,"column_end":39}},{"value":"/                 0.5, 1.0, 0.5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83411,"byte_end":83445,"line_start":22,"line_end":22,"column_start":5,"column_end":39}},{"value":"/                 0.5, 0.5, 1.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83450,"byte_end":83485,"line_start":23,"line_end":23,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83490,"byte_end":83493,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ let l = m.cholesky();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83498,"byte_end":83523,"line_start":25,"line_end":25,"column_start":5,"column_end":30}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83528,"byte_end":83535,"line_start":26,"line_end":26,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83540,"byte_end":83547,"line_start":27,"line_end":27,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83552,"byte_end":83555,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83560,"byte_end":83572,"line_start":29,"line_end":29,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83577,"byte_end":83580,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ - The matrix is not square.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83585,"byte_end":83616,"line_start":31,"line_end":31,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83621,"byte_end":83624,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83629,"byte_end":83643,"line_start":33,"line_end":33,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83648,"byte_end":83651,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ - Matrix is not positive definite.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83656,"byte_end":83694,"line_start":35,"line_end":35,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/bidiagonal.rs","byte_start":85810,"byte_end":85827,"line_start":23,"line_end":23,"column_start":12,"column_end":29},"name":"bidiagonal_decomp","qualname":"<Matrix<T>>::bidiagonal_decomp","value":"pub fn bidiagonal_decomp(Self)\n-> Result<(Matrix<T>, Matrix<T>, Matrix<T>), Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts matrix to bidiagonal form","sig":null,"attributes":[{"value":"/ Converts matrix to bidiagonal form","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/bidiagonal.rs","byte_start":85394,"byte_end":85432,"line_start":12,"line_end":12,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/bidiagonal.rs","byte_start":85437,"byte_end":85440,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ Returns (B, U, V), where B is bidiagonal and `self = U B V_T`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/bidiagonal.rs","byte_start":85445,"byte_end":85511,"line_start":14,"line_end":14,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/bidiagonal.rs","byte_start":85516,"byte_end":85519,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ Note that if `self` has `self.rows() > self.cols()` the matrix will","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/bidiagonal.rs","byte_start":85524,"byte_end":85595,"line_start":16,"line_end":16,"column_start":5,"column_end":76}},{"value":"/ be transposed and then reduced - this will lead to a sub-diagonal instead","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/bidiagonal.rs","byte_start":85600,"byte_end":85677,"line_start":17,"line_end":17,"column_start":5,"column_end":82}},{"value":"/ of super-diagonal.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/bidiagonal.rs","byte_start":85682,"byte_end":85704,"line_start":18,"line_end":18,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/bidiagonal.rs","byte_start":85709,"byte_end":85712,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/bidiagonal.rs","byte_start":85717,"byte_end":85731,"line_start":20,"line_end":20,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/bidiagonal.rs","byte_start":85736,"byte_end":85739,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ - The matrix cannot be reduced to bidiagonal form.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/bidiagonal.rs","byte_start":85744,"byte_end":85798,"line_start":22,"line_end":22,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95723,"byte_end":95726,"line_start":123,"line_end":123,"column_start":12,"column_end":15},"name":"svd","qualname":"<Matrix<T>>::svd","value":"pub fn svd(Self) -> Result<(Matrix<T>, Matrix<T>, Matrix<T>), Error>","parent":null,"children":[],"decl_id":null,"docs":" Singular Value Decomposition","sig":null,"attributes":[{"value":"/ Singular Value Decomposition","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":94572,"byte_end":94604,"line_start":93,"line_end":93,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":94609,"byte_end":94612,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Computes the SVD using the Golub-Reinsch algorithm.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":94617,"byte_end":94672,"line_start":95,"line_end":95,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":94677,"byte_end":94680,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ Returns Σ, U, V, such that `self` = U Σ V<sup>T</sup>. Σ is a diagonal matrix whose elements","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":94685,"byte_end":94784,"line_start":97,"line_end":97,"column_start":5,"column_end":101}},{"value":"/ correspond to the non-negative singular values of the matrix. The singular values are ordered in","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":94789,"byte_end":94889,"line_start":98,"line_end":98,"column_start":5,"column_end":105}},{"value":"/ non-increasing order. U and V have orthonormal columns, and each column represents the","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":94894,"byte_end":94984,"line_start":99,"line_end":99,"column_start":5,"column_end":95}},{"value":"/ left and right singular vectors for the corresponding singular value in Σ, respectively.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":94989,"byte_end":95082,"line_start":100,"line_end":100,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95087,"byte_end":95090,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ If `self` has M rows and N columns, the dimensions of the returned matrices","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95095,"byte_end":95174,"line_start":102,"line_end":102,"column_start":5,"column_end":84}},{"value":"/ are as follows.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95179,"byte_end":95198,"line_start":103,"line_end":103,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95203,"byte_end":95206,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ If M >= N:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95211,"byte_end":95225,"line_start":105,"line_end":105,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95230,"byte_end":95233,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ - `Σ`: N x N","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95238,"byte_end":95255,"line_start":107,"line_end":107,"column_start":5,"column_end":21}},{"value":"/ - `U`: M x N","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95260,"byte_end":95276,"line_start":108,"line_end":108,"column_start":5,"column_end":21}},{"value":"/ - `V`: N x N","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95281,"byte_end":95297,"line_start":109,"line_end":109,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95302,"byte_end":95305,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ If M < N:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95310,"byte_end":95323,"line_start":111,"line_end":111,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95328,"byte_end":95331,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ - `Σ`: M x M","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95336,"byte_end":95353,"line_start":113,"line_end":113,"column_start":5,"column_end":21}},{"value":"/ - `U`: M x M","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95358,"byte_end":95374,"line_start":114,"line_end":114,"column_start":5,"column_end":21}},{"value":"/ - `V`: N x M","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95379,"byte_end":95395,"line_start":115,"line_end":115,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95400,"byte_end":95403,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ Note: This version of the SVD is sometimes referred to as the 'economy SVD'.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95408,"byte_end":95488,"line_start":117,"line_end":117,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95493,"byte_end":95496,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95501,"byte_end":95515,"line_start":119,"line_end":119,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95520,"byte_end":95523,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ This function may fail in some cases. The current decomposition whilst being","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95528,"byte_end":95608,"line_start":121,"line_end":121,"column_start":5,"column_end":85}},{"value":"/ efficient is fairly basic. Hopefully the algorithm can be made not to fail in the near future.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":95613,"byte_end":95711,"line_start":122,"line_end":122,"column_start":5,"column_end":103}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":110114,"byte_end":110130,"line_start":37,"line_end":37,"column_start":12,"column_end":28},"name":"upper_hessenberg","qualname":"<Matrix<T>>::upper_hessenberg","value":"pub fn upper_hessenberg(Self) -> Result<Matrix<T>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns H, where H is the upper hessenberg form.","sig":null,"attributes":[{"value":"/ Returns H, where H is the upper hessenberg form.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109317,"byte_end":109369,"line_start":9,"line_end":9,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109374,"byte_end":109377,"line_start":10,"line_end":10,"column_start":5,"column_end":8}},{"value":"/ If the transformation matrix is also required, you should","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109382,"byte_end":109443,"line_start":11,"line_end":11,"column_start":5,"column_end":66}},{"value":"/ use `upper_hess_decomp`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109448,"byte_end":109476,"line_start":12,"line_end":12,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109481,"byte_end":109484,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109489,"byte_end":109503,"line_start":14,"line_end":14,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109508,"byte_end":109511,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109516,"byte_end":109523,"line_start":16,"line_end":16,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109528,"byte_end":109581,"line_start":17,"line_end":17,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109586,"byte_end":109619,"line_start":18,"line_end":18,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109624,"byte_end":109627,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![2., 0., 1., 1.;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109632,"byte_end":109667,"line_start":20,"line_end":20,"column_start":5,"column_end":40}},{"value":"/                 2., 0., 1., 2.;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109672,"byte_end":109707,"line_start":21,"line_end":21,"column_start":5,"column_end":40}},{"value":"/                 1., 2., 0., 0.;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109712,"byte_end":109747,"line_start":22,"line_end":22,"column_start":5,"column_end":40}},{"value":"/                 2., 0., 1., 1.];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109752,"byte_end":109788,"line_start":23,"line_end":23,"column_start":5,"column_end":41}},{"value":"/ let h = a.upper_hessenberg();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109793,"byte_end":109826,"line_start":24,"line_end":24,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109831,"byte_end":109834,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ println!(\"{:}\", h.expect(\"Could not get upper Hessenberg form.\"));","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109839,"byte_end":109909,"line_start":26,"line_end":26,"column_start":5,"column_end":75}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109914,"byte_end":109921,"line_start":27,"line_end":27,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109926,"byte_end":109933,"line_start":28,"line_end":28,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109938,"byte_end":109941,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109946,"byte_end":109958,"line_start":30,"line_end":30,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109963,"byte_end":109966,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ - The matrix is not square.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109971,"byte_end":110002,"line_start":32,"line_end":32,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":110007,"byte_end":110010,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":110015,"byte_end":110029,"line_start":34,"line_end":34,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":110034,"byte_end":110037,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ - The matrix cannot be reduced to upper hessenberg form.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":110042,"byte_end":110102,"line_start":36,"line_end":36,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112734,"byte_end":112751,"line_start":114,"line_end":114,"column_start":12,"column_end":29},"name":"upper_hess_decomp","qualname":"<Matrix<T>>::upper_hess_decomp","value":"pub fn upper_hess_decomp(Self) -> Result<(Matrix<T>, Matrix<T>), Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns (U,H), where H is the upper hessenberg form\n and U is the unitary transform matrix.","sig":null,"attributes":[{"value":"/ Returns (U,H), where H is the upper hessenberg form","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":111847,"byte_end":111902,"line_start":85,"line_end":85,"column_start":5,"column_end":60}},{"value":"/ and U is the unitary transform matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":111907,"byte_end":111949,"line_start":86,"line_end":86,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":111954,"byte_end":111957,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Note: The current transform matrix seems broken...","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":111962,"byte_end":112016,"line_start":88,"line_end":88,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112021,"byte_end":112024,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112029,"byte_end":112043,"line_start":90,"line_end":90,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112048,"byte_end":112051,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112056,"byte_end":112063,"line_start":92,"line_end":92,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112068,"byte_end":112121,"line_start":93,"line_end":93,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::BaseMatrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112126,"byte_end":112163,"line_start":94,"line_end":94,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112168,"byte_end":112171,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![1., 2., 3.;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112176,"byte_end":112207,"line_start":96,"line_end":96,"column_start":5,"column_end":36}},{"value":"/                 4., 5., 6.;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112212,"byte_end":112243,"line_start":97,"line_end":97,"column_start":5,"column_end":36}},{"value":"/                 7., 8., 9.];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112248,"byte_end":112280,"line_start":98,"line_end":98,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112285,"byte_end":112288,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ // u is the transform, h is the upper hessenberg form.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112293,"byte_end":112351,"line_start":100,"line_end":100,"column_start":5,"column_end":63}},{"value":"/ let (u, h) = a.clone().upper_hess_decomp().expect(\"This matrix should decompose!\");","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112356,"byte_end":112443,"line_start":101,"line_end":101,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112448,"byte_end":112451,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ assert_matrix_eq!(h, u.transpose() * a * u, comp = abs, tol = 1e-12);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112456,"byte_end":112529,"line_start":103,"line_end":103,"column_start":5,"column_end":78}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112534,"byte_end":112541,"line_start":104,"line_end":104,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112546,"byte_end":112553,"line_start":105,"line_end":105,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112558,"byte_end":112561,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112566,"byte_end":112578,"line_start":107,"line_end":107,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112583,"byte_end":112586,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ - The matrix is not square.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112591,"byte_end":112622,"line_start":109,"line_end":109,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112627,"byte_end":112630,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112635,"byte_end":112649,"line_start":111,"line_end":111,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112654,"byte_end":112657,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ - The matrix cannot be reduced to upper hessenberg form.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":112662,"byte_end":112722,"line_start":113,"line_end":113,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":2164},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":114713,"byte_end":114716,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"LUP","qualname":"::matrix::decomposition::lu::LUP","value":"LUP { l, u, p }","parent":null,"children":[{"krate":0,"index":2166},{"krate":0,"index":2167},{"krate":0,"index":2168}],"decl_id":null,"docs":" Result of unpacking an instance of\n [PartialPivLu](struct.PartialPivLu.html).\n","sig":null,"attributes":[{"value":"/ Result of unpacking an instance of","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":114593,"byte_end":114631,"line_start":13,"line_end":13,"column_start":1,"column_end":39}},{"value":"/ [PartialPivLu](struct.PartialPivLu.html).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":114632,"byte_end":114677,"line_start":14,"line_end":14,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":2166},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":114788,"byte_end":114789,"line_start":18,"line_end":18,"column_start":9,"column_end":10},"name":"l","qualname":"::matrix::decomposition::lu::LUP::l","value":"matrix::Matrix<T>","parent":{"krate":0,"index":2164},"children":[],"decl_id":null,"docs":" The lower triangular matrix in the decomposition.\n","sig":null,"attributes":[{"value":"/ The lower triangular matrix in the decomposition.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":114726,"byte_end":114779,"line_start":17,"line_end":17,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2167},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":114868,"byte_end":114869,"line_start":20,"line_end":20,"column_start":9,"column_end":10},"name":"u","qualname":"::matrix::decomposition::lu::LUP::u","value":"matrix::Matrix<T>","parent":{"krate":0,"index":2164},"children":[],"decl_id":null,"docs":" The upper triangular matrix in the decomposition.\n","sig":null,"attributes":[{"value":"/ The upper triangular matrix in the decomposition.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":114806,"byte_end":114859,"line_start":19,"line_end":19,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2168},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":114943,"byte_end":114944,"line_start":22,"line_end":22,"column_start":9,"column_end":10},"name":"p","qualname":"::matrix::decomposition::lu::LUP::p","value":"matrix::permutation_matrix::PermutationMatrix<T>","parent":{"krate":0,"index":2164},"children":[],"decl_id":null,"docs":" The permutation matrix in the decomposition.\n","sig":null,"attributes":[{"value":"/ The permutation matrix in the decomposition.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":114886,"byte_end":114934,"line_start":21,"line_end":21,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":2175},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118564,"byte_end":118576,"line_start":129,"line_end":129,"column_start":12,"column_end":24},"name":"PartialPivLu","qualname":"::matrix::decomposition::lu::PartialPivLu","value":"PartialPivLu {  }","parent":null,"children":[{"krate":0,"index":2177},{"krate":0,"index":2178}],"decl_id":null,"docs":" LU decomposition with partial pivoting.","sig":null,"attributes":[{"value":"/ LU decomposition with partial pivoting.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":114970,"byte_end":115013,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115014,"byte_end":115017,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ For any square matrix A, there exist a permutation matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115018,"byte_end":115079,"line_start":27,"line_end":27,"column_start":1,"column_end":62}},{"value":"/ `P`, a lower triangular matrix `L` and an upper triangular","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115080,"byte_end":115142,"line_start":28,"line_end":28,"column_start":1,"column_end":63}},{"value":"/ matrix `U` such that","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115143,"byte_end":115167,"line_start":29,"line_end":29,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115168,"byte_end":115171,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115172,"byte_end":115183,"line_start":31,"line_end":31,"column_start":1,"column_end":12}},{"value":"/ PA = LU.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115184,"byte_end":115196,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115197,"byte_end":115204,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115205,"byte_end":115208,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ However, due to the way partial pivoting algorithms work,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115209,"byte_end":115270,"line_start":35,"line_end":35,"column_start":1,"column_end":62}},{"value":"/ LU decomposition with partial pivoting is in general","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115271,"byte_end":115327,"line_start":36,"line_end":36,"column_start":1,"column_end":57}},{"value":"/ *only numerically stable for well-conditioned invertible matrices*.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115328,"byte_end":115399,"line_start":37,"line_end":37,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115400,"byte_end":115403,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ That said, partial pivoting is sufficient in the vast majority","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115404,"byte_end":115470,"line_start":39,"line_end":39,"column_start":1,"column_end":67}},{"value":"/ of practical applications, and it is also the fastest of the","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115471,"byte_end":115535,"line_start":40,"line_end":40,"column_start":1,"column_end":65}},{"value":"/ pivoting schemes in existence.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115536,"byte_end":115570,"line_start":41,"line_end":41,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115571,"byte_end":115574,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115575,"byte_end":115578,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Applications","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115579,"byte_end":115597,"line_start":44,"line_end":44,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115598,"byte_end":115601,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Given a matrix `x`, computing the LU(P) decomposition is simple:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115602,"byte_end":115670,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115671,"byte_end":115674,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115675,"byte_end":115682,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ use rulinalg::matrix::decomposition::{PartialPivLu, LUP, Decomposition};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115683,"byte_end":115759,"line_start":49,"line_end":49,"column_start":1,"column_end":77}},{"value":"/ use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115760,"byte_end":115793,"line_start":50,"line_end":50,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115794,"byte_end":115797,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ let x = Matrix::<f64>::identity(4);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115798,"byte_end":115837,"line_start":52,"line_end":52,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115838,"byte_end":115841,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // The matrix is consumed and its memory","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115842,"byte_end":115886,"line_start":54,"line_end":54,"column_start":1,"column_end":45}},{"value":"/ // re-purposed for the decomposition","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115887,"byte_end":115927,"line_start":55,"line_end":55,"column_start":1,"column_end":41}},{"value":"/ let lu = PartialPivLu::decompose(x).expect(\"Matrix is invertible.\");","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":115928,"byte_end":116000,"line_start":56,"line_end":56,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116001,"byte_end":116004,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ // See below for applications","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116005,"byte_end":116038,"line_start":58,"line_end":58,"column_start":1,"column_end":34}},{"value":"/ // ...","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116039,"byte_end":116049,"line_start":59,"line_end":59,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116050,"byte_end":116053,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ // The factors L, U and P can be obtained by unpacking the","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116054,"byte_end":116116,"line_start":61,"line_end":61,"column_start":1,"column_end":63}},{"value":"/ // decomposition, for example by destructuring as seen here","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116117,"byte_end":116180,"line_start":62,"line_end":62,"column_start":1,"column_end":64}},{"value":"/ let LUP { l, u, p } = lu.unpack();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116181,"byte_end":116219,"line_start":63,"line_end":63,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116220,"byte_end":116223,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116224,"byte_end":116231,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116232,"byte_end":116235,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ## Solving linear systems","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116236,"byte_end":116265,"line_start":67,"line_end":67,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116266,"byte_end":116269,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ Arguably the most common use case of LU decomposition","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116270,"byte_end":116327,"line_start":69,"line_end":69,"column_start":1,"column_end":58}},{"value":"/ is the computation of solutions to (multiple) linear systems","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116328,"byte_end":116392,"line_start":70,"line_end":70,"column_start":1,"column_end":65}},{"value":"/ that share the same coefficient matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116393,"byte_end":116436,"line_start":71,"line_end":71,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116437,"byte_end":116440,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116441,"byte_end":116448,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use] extern crate rulinalg;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116449,"byte_end":116490,"line_start":74,"line_end":74,"column_start":1,"column_end":42}},{"value":"/ # use rulinalg::matrix::decomposition::PartialPivLu;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116491,"byte_end":116547,"line_start":75,"line_end":75,"column_start":1,"column_end":57}},{"value":"/ # use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116548,"byte_end":116583,"line_start":76,"line_end":76,"column_start":1,"column_end":36}},{"value":"/ # fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116584,"byte_end":116601,"line_start":77,"line_end":77,"column_start":1,"column_end":18}},{"value":"/ # let x = Matrix::identity(4);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116602,"byte_end":116636,"line_start":78,"line_end":78,"column_start":1,"column_end":35}},{"value":"/ # let lu = PartialPivLu::decompose(x).unwrap();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116637,"byte_end":116688,"line_start":79,"line_end":79,"column_start":1,"column_end":52}},{"value":"/ let b = vector![3.0, 4.0, 2.0, 1.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116689,"byte_end":116729,"line_start":80,"line_end":80,"column_start":1,"column_end":41}},{"value":"/ let y = lu.solve(b)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116730,"byte_end":116753,"line_start":81,"line_end":81,"column_start":1,"column_end":24}},{"value":"/           .expect(\"Matrix is invertible.\");","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116754,"byte_end":116801,"line_start":82,"line_end":82,"column_start":1,"column_end":48}},{"value":"/ assert_vector_eq!(y, vector![3.0, 4.0, 2.0, 1.0], comp = float);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116802,"byte_end":116870,"line_start":83,"line_end":83,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116871,"byte_end":116874,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ // We can efficiently solve multiple such systems","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116875,"byte_end":116928,"line_start":85,"line_end":85,"column_start":1,"column_end":54}},{"value":"/ let c = vector![0.0, 0.0, 0.0, 0.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116929,"byte_end":116969,"line_start":86,"line_end":86,"column_start":1,"column_end":41}},{"value":"/ let z = lu.solve(c).unwrap();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":116970,"byte_end":117003,"line_start":87,"line_end":87,"column_start":1,"column_end":34}},{"value":"/ assert_vector_eq!(z, vector![0.0, 0.0, 0.0, 0.0], comp = float);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117004,"byte_end":117072,"line_start":88,"line_end":88,"column_start":1,"column_end":69}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117073,"byte_end":117080,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117081,"byte_end":117088,"line_start":90,"line_end":90,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117089,"byte_end":117092,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ## Computing the inverse of a matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117093,"byte_end":117133,"line_start":92,"line_end":92,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117134,"byte_end":117137,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ The LU decomposition provides a convenient way to obtain","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117138,"byte_end":117198,"line_start":94,"line_end":94,"column_start":1,"column_end":61}},{"value":"/ the inverse of the decomposed matrix. However, please keep","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117199,"byte_end":117261,"line_start":95,"line_end":95,"column_start":1,"column_end":63}},{"value":"/ in mind that explicitly computing the inverse of a matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117262,"byte_end":117323,"line_start":96,"line_end":96,"column_start":1,"column_end":62}},{"value":"/ is *usually* a bad idea. In many cases, one might instead simply","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117324,"byte_end":117392,"line_start":97,"line_end":97,"column_start":1,"column_end":69}},{"value":"/ solve multiple systems using `solve`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117393,"byte_end":117434,"line_start":98,"line_end":98,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117435,"byte_end":117438,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ For example, a common misconception is that when one needs","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117439,"byte_end":117501,"line_start":100,"line_end":100,"column_start":1,"column_end":63}},{"value":"/ to solve multiple linear systems `Ax = b` for different `b`,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117502,"byte_end":117566,"line_start":101,"line_end":101,"column_start":1,"column_end":65}},{"value":"/ one should pre-compute the inverse of the matrix for efficiency.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117567,"byte_end":117635,"line_start":102,"line_end":102,"column_start":1,"column_end":69}},{"value":"/ In fact, this is practically never a good idea! A far more efficient","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117636,"byte_end":117708,"line_start":103,"line_end":103,"column_start":1,"column_end":73}},{"value":"/ and accurate method is to perform the LU decomposition once, and","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117709,"byte_end":117777,"line_start":104,"line_end":104,"column_start":1,"column_end":69}},{"value":"/ then solve each system as shown in the examples of the previous","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117778,"byte_end":117845,"line_start":105,"line_end":105,"column_start":1,"column_end":68}},{"value":"/ subsection.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117846,"byte_end":117861,"line_start":106,"line_end":106,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117862,"byte_end":117865,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ That said, there are definitely cases where an explicit inverse is","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117866,"byte_end":117936,"line_start":108,"line_end":108,"column_start":1,"column_end":71}},{"value":"/ needed. In these cases, the inverse can easily be obtained","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":117937,"byte_end":117999,"line_start":109,"line_end":109,"column_start":1,"column_end":63}},{"value":"/ through the `inverse()` method.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118000,"byte_end":118035,"line_start":110,"line_end":110,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118036,"byte_end":118039,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ # Computing the determinant of a matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118040,"byte_end":118083,"line_start":112,"line_end":112,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118084,"byte_end":118087,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ Once the LU decomposition has been obtained, computing","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118088,"byte_end":118146,"line_start":114,"line_end":114,"column_start":1,"column_end":59}},{"value":"/ the determinant of the decomposed matrix is a very cheap","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118147,"byte_end":118207,"line_start":115,"line_end":115,"column_start":1,"column_end":61}},{"value":"/ operation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118208,"byte_end":118222,"line_start":116,"line_end":116,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118223,"byte_end":118226,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118227,"byte_end":118234,"line_start":118,"line_end":118,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use] extern crate rulinalg;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118235,"byte_end":118276,"line_start":119,"line_end":119,"column_start":1,"column_end":42}},{"value":"/ # use rulinalg::matrix::decomposition::PartialPivLu;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118277,"byte_end":118333,"line_start":120,"line_end":120,"column_start":1,"column_end":57}},{"value":"/ # use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118334,"byte_end":118369,"line_start":121,"line_end":121,"column_start":1,"column_end":36}},{"value":"/ # fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118370,"byte_end":118387,"line_start":122,"line_end":122,"column_start":1,"column_end":18}},{"value":"/ # let x = Matrix::<f64>::identity(4);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118388,"byte_end":118429,"line_start":123,"line_end":123,"column_start":1,"column_end":42}},{"value":"/ # let lu = PartialPivLu::decompose(x).unwrap();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118430,"byte_end":118481,"line_start":124,"line_end":124,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(lu.det(), 1.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118482,"byte_end":118512,"line_start":125,"line_end":125,"column_start":1,"column_end":31}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118513,"byte_end":118520,"line_start":126,"line_end":126,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118521,"byte_end":118528,"line_start":127,"line_end":127,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":119259,"byte_end":119268,"line_start":160,"line_end":160,"column_start":12,"column_end":21},"name":"decompose","qualname":"<PartialPivLu<T>>::decompose","value":"pub fn decompose(Matrix<T>) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Performs the decomposition.","sig":null,"attributes":[{"value":"/ Performs the decomposition.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":119005,"byte_end":119036,"line_start":150,"line_end":150,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":119041,"byte_end":119044,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":119049,"byte_end":119061,"line_start":152,"line_end":152,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":119066,"byte_end":119069,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ The matrix must be square.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":119074,"byte_end":119104,"line_start":154,"line_end":154,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":119109,"byte_end":119112,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":119117,"byte_end":119129,"line_start":156,"line_end":156,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":119134,"byte_end":119137,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ An error will be returned if the matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":119142,"byte_end":119185,"line_start":158,"line_end":158,"column_start":5,"column_end":48}},{"value":"/ is singular to working precision (badly conditioned).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":119190,"byte_end":119247,"line_start":159,"line_end":159,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121775,"byte_end":121780,"line_start":233,"line_end":233,"column_start":12,"column_end":17},"name":"solve","qualname":"<PartialPivLu<T>>::solve","value":"pub fn solve(&Self, Vector<T>) -> Result<Vector<T>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Solves the linear system `Ax = b`.","sig":null,"attributes":[{"value":"/ Solves the linear system `Ax = b`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":120718,"byte_end":120756,"line_start":202,"line_end":202,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":120761,"byte_end":120764,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Here, `A` is the decomposed matrix satisfying","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":120769,"byte_end":120818,"line_start":204,"line_end":204,"column_start":5,"column_end":54}},{"value":"/ `PA = LU`. Note that this method is particularly","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":120823,"byte_end":120875,"line_start":205,"line_end":205,"column_start":5,"column_end":57}},{"value":"/ well suited to solving multiple such linear systems","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":120880,"byte_end":120935,"line_start":206,"line_end":206,"column_start":5,"column_end":60}},{"value":"/ involving the same `A` but different `b`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":120940,"byte_end":120985,"line_start":207,"line_end":207,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":120990,"byte_end":120993,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":120998,"byte_end":121010,"line_start":209,"line_end":209,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121015,"byte_end":121018,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ If the matrix is very ill-conditioned, the function","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121023,"byte_end":121078,"line_start":211,"line_end":211,"column_start":5,"column_end":60}},{"value":"/ might fail to obtain the solution to the system.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121083,"byte_end":121135,"line_start":212,"line_end":212,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121140,"byte_end":121143,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121148,"byte_end":121160,"line_start":214,"line_end":214,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121165,"byte_end":121168,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ The right-hand side vector `b` must have compatible size.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121173,"byte_end":121234,"line_start":216,"line_end":216,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121239,"byte_end":121242,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121247,"byte_end":121261,"line_start":218,"line_end":218,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121266,"byte_end":121269,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121274,"byte_end":121281,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121286,"byte_end":121327,"line_start":221,"line_end":221,"column_start":5,"column_end":46}},{"value":"/ # use rulinalg::matrix::decomposition::PartialPivLu;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121332,"byte_end":121388,"line_start":222,"line_end":222,"column_start":5,"column_end":61}},{"value":"/ # use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121393,"byte_end":121428,"line_start":223,"line_end":223,"column_start":5,"column_end":40}},{"value":"/ # fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121433,"byte_end":121450,"line_start":224,"line_end":224,"column_start":5,"column_end":22}},{"value":"/ let x = Matrix::identity(4);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121455,"byte_end":121487,"line_start":225,"line_end":225,"column_start":5,"column_end":37}},{"value":"/ let lu = PartialPivLu::decompose(x).unwrap();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121492,"byte_end":121541,"line_start":226,"line_end":226,"column_start":5,"column_end":54}},{"value":"/ let b = vector![3.0, 4.0, 2.0, 1.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121546,"byte_end":121586,"line_start":227,"line_end":227,"column_start":5,"column_end":45}},{"value":"/ let y = lu.solve(b)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121591,"byte_end":121614,"line_start":228,"line_end":228,"column_start":5,"column_end":28}},{"value":"/           .expect(\"Matrix is invertible.\");","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121619,"byte_end":121666,"line_start":229,"line_end":229,"column_start":5,"column_end":52}},{"value":"/ assert_vector_eq!(y, vector![3.0, 4.0, 2.0, 1.0], comp = float);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121671,"byte_end":121739,"line_start":230,"line_end":230,"column_start":5,"column_end":73}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121744,"byte_end":121751,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":121756,"byte_end":121763,"line_start":232,"line_end":232,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":122741,"byte_end":122748,"line_start":253,"line_end":253,"column_start":12,"column_end":19},"name":"inverse","qualname":"<PartialPivLu<T>>::inverse","value":"pub fn inverse(&Self) -> Result<Matrix<T>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Computes the inverse of the matrix which this LUP decomposition\n represents.","sig":null,"attributes":[{"value":"/ Computes the inverse of the matrix which this LUP decomposition","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":122545,"byte_end":122612,"line_start":248,"line_end":248,"column_start":5,"column_end":72}},{"value":"/ represents.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":122617,"byte_end":122632,"line_start":249,"line_end":249,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":122637,"byte_end":122640,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":122645,"byte_end":122657,"line_start":251,"line_end":251,"column_start":5,"column_end":17}},{"value":"/ The inversion might fail if the matrix is very ill-conditioned.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":122662,"byte_end":122729,"line_start":252,"line_end":252,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":123984,"byte_end":123987,"line_start":290,"line_end":290,"column_start":12,"column_end":15},"name":"det","qualname":"<PartialPivLu<T>>::det","value":"pub fn det(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the determinant of the decomposed matrix.\n","sig":null,"attributes":[{"value":"/ Computes the determinant of the decomposed matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":123918,"byte_end":123972,"line_start":289,"line_end":289,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":127076,"byte_end":127086,"line_start":392,"line_end":392,"column_start":12,"column_end":22},"name":"lup_decomp","qualname":"<Matrix<T>>::lup_decomp","value":"pub fn lup_decomp(Self) -> Result<(Matrix<T>, Matrix<T>, Matrix<T>), Error>","parent":null,"children":[],"decl_id":null,"docs":" Computes L, U, and P for LUP decomposition.","sig":null,"attributes":[{"value":"/ Computes L, U, and P for LUP decomposition.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126280,"byte_end":126327,"line_start":362,"line_end":362,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126332,"byte_end":126335,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ Returns L,U, and P respectively.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126340,"byte_end":126376,"line_start":364,"line_end":364,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126381,"byte_end":126384,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ This function is deprecated.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126389,"byte_end":126421,"line_start":366,"line_end":366,"column_start":5,"column_end":37}},{"value":"/ Please see [PartialPivLu](decomposition/struct.PartialPivLu.html)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126426,"byte_end":126495,"line_start":367,"line_end":367,"column_start":5,"column_end":74}},{"value":"/ for a replacement.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126500,"byte_end":126522,"line_start":368,"line_end":368,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126527,"byte_end":126530,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126535,"byte_end":126549,"line_start":370,"line_end":370,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126554,"byte_end":126557,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126562,"byte_end":126569,"line_start":372,"line_end":372,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126574,"byte_end":126627,"line_start":373,"line_end":373,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126632,"byte_end":126665,"line_start":374,"line_end":374,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126670,"byte_end":126673,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![1.0, 2.0, 0.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126678,"byte_end":126712,"line_start":376,"line_end":376,"column_start":5,"column_end":39}},{"value":"/                 0.0, 3.0, 4.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126717,"byte_end":126751,"line_start":377,"line_end":377,"column_start":5,"column_end":39}},{"value":"/                 5.0, 1.0, 2.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126756,"byte_end":126791,"line_start":378,"line_end":378,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126796,"byte_end":126799,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ let (l, u, p) = a.lup_decomp().expect(\"This matrix should decompose!\");","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126804,"byte_end":126879,"line_start":380,"line_end":380,"column_start":5,"column_end":80}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126884,"byte_end":126891,"line_start":381,"line_end":381,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126896,"byte_end":126903,"line_start":382,"line_end":382,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126908,"byte_end":126911,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126916,"byte_end":126928,"line_start":384,"line_end":384,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126933,"byte_end":126936,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ - Matrix is not square.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126941,"byte_end":126968,"line_start":386,"line_end":386,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126973,"byte_end":126976,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126981,"byte_end":126995,"line_start":388,"line_end":388,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":127000,"byte_end":127003,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ - Matrix cannot be LUP decomposed.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":127008,"byte_end":127046,"line_start":390,"line_end":390,"column_start":5,"column_end":43}},{"value":"deprecated","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":127051,"byte_end":127064,"line_start":391,"line_end":391,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139961,"byte_end":139972,"line_start":186,"line_end":186,"column_start":12,"column_end":23},"name":"eigenvalues","qualname":"<Matrix<T>>::eigenvalues","value":"pub fn eigenvalues(Self) -> Result<Vec<T>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Eigenvalues of a square matrix.","sig":null,"attributes":[{"value":"/ Eigenvalues of a square matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139414,"byte_end":139449,"line_start":165,"line_end":165,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139454,"byte_end":139457,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Returns a Vec of eigenvalues.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139462,"byte_end":139495,"line_start":167,"line_end":167,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139500,"byte_end":139503,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139508,"byte_end":139522,"line_start":169,"line_end":169,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139527,"byte_end":139530,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139535,"byte_end":139542,"line_start":171,"line_end":171,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139547,"byte_end":139580,"line_start":172,"line_end":172,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139585,"byte_end":139588,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ let a = Matrix::new(4,4, (1..17).map(|v| v as f64).collect::<Vec<f64>>());","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139593,"byte_end":139671,"line_start":174,"line_end":174,"column_start":5,"column_end":83}},{"value":"/ let e = a.eigenvalues().expect(\"We should be able to compute these eigenvalues!\");","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139676,"byte_end":139762,"line_start":175,"line_end":175,"column_start":5,"column_end":91}},{"value":"/ println!(\"{:?}\", e);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139767,"byte_end":139791,"line_start":176,"line_end":176,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139796,"byte_end":139803,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139808,"byte_end":139811,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139816,"byte_end":139828,"line_start":179,"line_end":179,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139833,"byte_end":139836,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ - The matrix is not square.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139841,"byte_end":139872,"line_start":181,"line_end":181,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139877,"byte_end":139880,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139885,"byte_end":139899,"line_start":183,"line_end":183,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139904,"byte_end":139907,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ - Eigenvalues cannot be computed.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":139912,"byte_end":139949,"line_start":185,"line_end":185,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146478,"byte_end":146489,"line_start":353,"line_end":353,"column_start":12,"column_end":23},"name":"eigendecomp","qualname":"<Matrix<T>>::eigendecomp","value":"pub fn eigendecomp(Self) -> Result<(Vec<T>, Matrix<T>), Error>","parent":null,"children":[],"decl_id":null,"docs":" Eigendecomposition of a square matrix.","sig":null,"attributes":[{"value":"/ Eigendecomposition of a square matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":145620,"byte_end":145662,"line_start":324,"line_end":324,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":145667,"byte_end":145670,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ Returns a Vec of eigenvalues, and a matrix with eigenvectors as the columns.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":145675,"byte_end":145755,"line_start":326,"line_end":326,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":145760,"byte_end":145763,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ The eigenvectors are only gauranteed to be correct if the matrix is real-symmetric.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":145768,"byte_end":145855,"line_start":328,"line_end":328,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":145860,"byte_end":145863,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":145868,"byte_end":145882,"line_start":330,"line_end":330,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":145887,"byte_end":145890,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":145895,"byte_end":145902,"line_start":332,"line_end":332,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":145907,"byte_end":145960,"line_start":333,"line_end":333,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":145965,"byte_end":145998,"line_start":334,"line_end":334,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146003,"byte_end":146006,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![3., 2., 4.;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146011,"byte_end":146042,"line_start":336,"line_end":336,"column_start":5,"column_end":36}},{"value":"/                 2., 0., 2.;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146047,"byte_end":146078,"line_start":337,"line_end":337,"column_start":5,"column_end":36}},{"value":"/                 4., 2., 3.];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146083,"byte_end":146115,"line_start":338,"line_end":338,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146120,"byte_end":146123,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ let (e, m) = a.eigendecomp().expect(\"We should be able to compute this eigendecomp!\");","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146128,"byte_end":146218,"line_start":340,"line_end":340,"column_start":5,"column_end":95}},{"value":"/ println!(\"{:?}\", e);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146223,"byte_end":146247,"line_start":341,"line_end":341,"column_start":5,"column_end":29}},{"value":"/ println!(\"{:?}\", m.data());","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146252,"byte_end":146283,"line_start":342,"line_end":342,"column_start":5,"column_end":36}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146288,"byte_end":146295,"line_start":343,"line_end":343,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146300,"byte_end":146307,"line_start":344,"line_end":344,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146312,"byte_end":146315,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146320,"byte_end":146332,"line_start":346,"line_end":346,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146337,"byte_end":146340,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ - The matrix is not square.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146345,"byte_end":146376,"line_start":348,"line_end":348,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146381,"byte_end":146384,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146389,"byte_end":146403,"line_start":350,"line_end":350,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146408,"byte_end":146411,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ - The eigen decomposition can not be computed.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":146416,"byte_end":146466,"line_start":352,"line_end":352,"column_start":5,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":475},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":78142,"byte_end":78155,"line_start":122,"line_end":122,"column_start":11,"column_end":24},"name":"Decomposition","qualname":"::matrix::decomposition::Decomposition","value":"Decomposition","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":477}],"decl_id":null,"docs":" Base trait for decompositions.","sig":null,"attributes":[{"value":"/ Base trait for decompositions.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77902,"byte_end":77936,"line_start":116,"line_end":116,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77937,"byte_end":77940,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ A matrix decomposition, or factorization,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77941,"byte_end":77986,"line_start":118,"line_end":118,"column_start":1,"column_end":46}},{"value":"/ is a procedure which takes a matrix `X` and returns","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":77987,"byte_end":78042,"line_start":119,"line_end":119,"column_start":1,"column_end":56}},{"value":"/ a set of `k` factors `X_1, X_2, ..., X_k` such that","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":78043,"byte_end":78098,"line_start":120,"line_end":120,"column_start":1,"column_end":56}},{"value":"/ `X = X_1 * X_2 * ... * X_k`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":78099,"byte_end":78131,"line_start":121,"line_end":121,"column_start":1,"column_end":33}}]},{"kind":"Type","id":{"krate":0,"index":476},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":78283,"byte_end":78290,"line_start":125,"line_end":125,"column_start":10,"column_end":17},"name":"Factors","qualname":"::matrix::decomposition::Decomposition::Factors","value":"type Factors;","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":" The type representing the ordered set of factors\n that when multiplied yields the decomposed matrix.\n","sig":null,"attributes":[{"value":"/ The type representing the ordered set of factors","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":78162,"byte_end":78214,"line_start":123,"line_end":123,"column_start":5,"column_end":57}},{"value":"/ that when multiplied yields the decomposed matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":78219,"byte_end":78273,"line_start":124,"line_end":124,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":78364,"byte_end":78370,"line_start":128,"line_end":128,"column_start":8,"column_end":14},"name":"unpack","qualname":"::matrix::decomposition::Decomposition::unpack","value":"pub fn unpack(Self) -> Self::Factors","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":" Extract the individual factors from this decomposition.\n","sig":null,"attributes":[{"value":"/ Extract the individual factors from this decomposition.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":78297,"byte_end":78356,"line_start":127,"line_end":127,"column_start":5,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":716},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151407,"byte_end":151417,"line_start":44,"line_end":44,"column_start":11,"column_end":21},"name":"BaseMatrix","qualname":"::matrix::base::BaseMatrix","value":"BaseMatrix<T>: Sized","parent":null,"children":[{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":737},{"krate":0,"index":739},{"krate":0,"index":741},{"krate":0,"index":746},{"krate":0,"index":748},{"krate":0,"index":751},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":758},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775}],"decl_id":null,"docs":" Trait for immutable matrix structs.\n","sig":null,"attributes":[{"value":"/ Trait for immutable matrix structs.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151357,"byte_end":151396,"line_start":43,"line_end":43,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151465,"byte_end":151469,"line_start":46,"line_end":46,"column_start":8,"column_end":12},"name":"rows","qualname":"::matrix::base::BaseMatrix::rows","value":"pub fn rows(&Self) -> usize","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Rows in the matrix.\n","sig":null,"attributes":[{"value":"/ Rows in the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151434,"byte_end":151457,"line_start":45,"line_end":45,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151526,"byte_end":151530,"line_start":49,"line_end":49,"column_start":8,"column_end":12},"name":"cols","qualname":"::matrix::base::BaseMatrix::cols","value":"pub fn cols(&Self) -> usize","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Columns in the matrix.\n","sig":null,"attributes":[{"value":"/ Columns in the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151492,"byte_end":151518,"line_start":48,"line_end":48,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151590,"byte_end":151600,"line_start":52,"line_end":52,"column_start":8,"column_end":18},"name":"row_stride","qualname":"::matrix::base::BaseMatrix::row_stride","value":"pub fn row_stride(&Self) -> usize","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Row stride in the matrix.\n","sig":null,"attributes":[{"value":"/ Row stride in the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151553,"byte_end":151582,"line_start":51,"line_end":51,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151681,"byte_end":151689,"line_start":55,"line_end":55,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::matrix::base::BaseMatrix::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Returns true if the matrix contais no elements\n","sig":null,"attributes":[{"value":"/ Returns true if the matrix contais no elements","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151623,"byte_end":151673,"line_start":54,"line_end":54,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151804,"byte_end":151810,"line_start":60,"line_end":60,"column_start":8,"column_end":14},"name":"as_ptr","qualname":"::matrix::base::BaseMatrix::as_ptr","value":"pub fn as_ptr(&Self) -> *const T","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Top left index of the matrix.\n","sig":null,"attributes":[{"value":"/ Top left index of the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151763,"byte_end":151796,"line_start":59,"line_end":59,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152092,"byte_end":152100,"line_start":72,"line_end":72,"column_start":8,"column_end":16},"name":"as_slice","qualname":"::matrix::base::BaseMatrix::as_slice","value":"pub fn as_slice(&Self) -> MatrixSlice<, T>","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Returns a `MatrixSlice` over the whole matrix.","sig":null,"attributes":[{"value":"/ Returns a `MatrixSlice` over the whole matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151836,"byte_end":151886,"line_start":62,"line_end":62,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151891,"byte_end":151894,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151899,"byte_end":151913,"line_start":64,"line_end":64,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151918,"byte_end":151921,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151926,"byte_end":151933,"line_start":66,"line_end":66,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151938,"byte_end":151985,"line_start":67,"line_end":67,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151990,"byte_end":151993,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ let a = Matrix::new(3, 3, vec![2.0; 9]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151998,"byte_end":152042,"line_start":69,"line_end":69,"column_start":5,"column_end":49}},{"value":"/ let b = a.as_slice();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152047,"byte_end":152072,"line_start":70,"line_end":70,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152077,"byte_end":152084,"line_start":71,"line_end":71,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152350,"byte_end":152363,"line_start":79,"line_end":79,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::matrix::base::BaseMatrix::get_unchecked","value":"pub unsafe fn get_unchecked(&Self, [usize; ]) -> &T","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Get a reference to a point in the matrix without bounds checking.\n","sig":null,"attributes":[{"value":"/ Get a reference to a point in the matrix without bounds checking.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152266,"byte_end":152335,"line_start":78,"line_end":78,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153106,"byte_end":153109,"line_start":104,"line_end":104,"column_start":8,"column_end":11},"name":"col","qualname":"::matrix::base::BaseMatrix::col","value":"pub fn col(&Self, usize) -> Column<, T>","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Returns the column of a matrix at the given index.\n `None` if the index is out of bounds.","sig":null,"attributes":[{"value":"/ Returns the column of a matrix at the given index.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152494,"byte_end":152548,"line_start":83,"line_end":83,"column_start":5,"column_end":59}},{"value":"/ `None` if the index is out of bounds.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152553,"byte_end":152594,"line_start":84,"line_end":84,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152599,"byte_end":152602,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152607,"byte_end":152621,"line_start":86,"line_end":86,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152626,"byte_end":152629,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152634,"byte_end":152641,"line_start":88,"line_end":88,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152646,"byte_end":152699,"line_start":89,"line_end":89,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152704,"byte_end":152751,"line_start":90,"line_end":90,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152756,"byte_end":152759,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ let mat = matrix![0, 1, 2;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152764,"byte_end":152794,"line_start":92,"line_end":92,"column_start":5,"column_end":35}},{"value":"/                   3, 4, 5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152799,"byte_end":152829,"line_start":93,"line_end":93,"column_start":5,"column_end":35}},{"value":"/                   6, 7, 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152834,"byte_end":152865,"line_start":94,"line_end":94,"column_start":5,"column_end":36}},{"value":"/ let col = mat.col(1);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152870,"byte_end":152895,"line_start":95,"line_end":95,"column_start":5,"column_end":30}},{"value":"/ let expected = matrix![1usize; 4; 7];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152900,"byte_end":152941,"line_start":96,"line_end":96,"column_start":5,"column_end":46}},{"value":"/ assert_matrix_eq!(*col, expected);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152946,"byte_end":152984,"line_start":97,"line_end":97,"column_start":5,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":152989,"byte_end":152996,"line_start":98,"line_end":98,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153001,"byte_end":153008,"line_start":99,"line_end":99,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153013,"byte_end":153016,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153021,"byte_end":153033,"line_start":101,"line_end":101,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153038,"byte_end":153041,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Will panic if the column index is out of bounds.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153046,"byte_end":153098,"line_start":103,"line_end":103,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153857,"byte_end":153870,"line_start":129,"line_end":129,"column_start":15,"column_end":28},"name":"col_unchecked","qualname":"::matrix::base::BaseMatrix::col_unchecked","value":"pub unsafe fn col_unchecked(&Self, usize) -> Column<, T>","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Returns the column of a matrix at the given\n index without doing a bounds check.","sig":null,"attributes":[{"value":"/ Returns the column of a matrix at the given","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153316,"byte_end":153363,"line_start":112,"line_end":112,"column_start":5,"column_end":52}},{"value":"/ index without doing a bounds check.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153368,"byte_end":153407,"line_start":113,"line_end":113,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153412,"byte_end":153415,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153420,"byte_end":153434,"line_start":115,"line_end":115,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153439,"byte_end":153442,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153447,"byte_end":153454,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153459,"byte_end":153512,"line_start":118,"line_end":118,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153517,"byte_end":153564,"line_start":119,"line_end":119,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153569,"byte_end":153572,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ let mat = matrix![0, 1, 2;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153577,"byte_end":153607,"line_start":121,"line_end":121,"column_start":5,"column_end":35}},{"value":"/                   3, 4, 5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153612,"byte_end":153642,"line_start":122,"line_end":122,"column_start":5,"column_end":35}},{"value":"/                   6, 7, 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153647,"byte_end":153678,"line_start":123,"line_end":123,"column_start":5,"column_end":36}},{"value":"/ let col = unsafe { mat.col_unchecked(2) };","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153683,"byte_end":153729,"line_start":124,"line_end":124,"column_start":5,"column_end":51}},{"value":"/ let expected = matrix![2usize; 5; 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153734,"byte_end":153775,"line_start":125,"line_end":125,"column_start":5,"column_end":46}},{"value":"/ assert_matrix_eq!(*col, expected);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153780,"byte_end":153818,"line_start":126,"line_end":126,"column_start":5,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153823,"byte_end":153830,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":153835,"byte_end":153842,"line_start":128,"line_end":128,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154626,"byte_end":154629,"line_start":154,"line_end":154,"column_start":8,"column_end":11},"name":"row","qualname":"::matrix::base::BaseMatrix::row","value":"pub fn row(&Self, usize) -> Row<, T>","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Returns the row of a matrix at the given index.","sig":null,"attributes":[{"value":"/ Returns the row of a matrix at the given index.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154066,"byte_end":154117,"line_start":134,"line_end":134,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154122,"byte_end":154125,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154130,"byte_end":154144,"line_start":136,"line_end":136,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154149,"byte_end":154152,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154157,"byte_end":154164,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154169,"byte_end":154222,"line_start":139,"line_end":139,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154227,"byte_end":154274,"line_start":140,"line_end":140,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154279,"byte_end":154282,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ let mat = matrix![0, 1, 2;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154287,"byte_end":154317,"line_start":142,"line_end":142,"column_start":5,"column_end":35}},{"value":"/                   3, 4, 5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154322,"byte_end":154352,"line_start":143,"line_end":143,"column_start":5,"column_end":35}},{"value":"/                   6, 7, 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154357,"byte_end":154388,"line_start":144,"line_end":144,"column_start":5,"column_end":36}},{"value":"/ let row = mat.row(1);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154393,"byte_end":154418,"line_start":145,"line_end":145,"column_start":5,"column_end":30}},{"value":"/ let expected = matrix![3usize, 4, 5];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154423,"byte_end":154464,"line_start":146,"line_end":146,"column_start":5,"column_end":46}},{"value":"/ assert_matrix_eq!(*row, expected);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154469,"byte_end":154507,"line_start":147,"line_end":147,"column_start":5,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154512,"byte_end":154519,"line_start":148,"line_end":148,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154524,"byte_end":154531,"line_start":149,"line_end":149,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154536,"byte_end":154539,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154544,"byte_end":154556,"line_start":151,"line_end":151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154561,"byte_end":154564,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Will panic if the row index is out of bounds.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154569,"byte_end":154618,"line_start":153,"line_end":153,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155362,"byte_end":155375,"line_start":178,"line_end":178,"column_start":15,"column_end":28},"name":"row_unchecked","qualname":"::matrix::base::BaseMatrix::row_unchecked","value":"pub unsafe fn row_unchecked(&Self, usize) -> Row<, T>","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Returns the row of a matrix at the given index without doing unbounds checking","sig":null,"attributes":[{"value":"/ Returns the row of a matrix at the given index without doing unbounds checking","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154830,"byte_end":154912,"line_start":162,"line_end":162,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154917,"byte_end":154920,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154925,"byte_end":154939,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154944,"byte_end":154947,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154952,"byte_end":154959,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":154964,"byte_end":155017,"line_start":167,"line_end":167,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155022,"byte_end":155069,"line_start":168,"line_end":168,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155074,"byte_end":155077,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ let mat = matrix![0, 1, 2;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155082,"byte_end":155112,"line_start":170,"line_end":170,"column_start":5,"column_end":35}},{"value":"/                   3, 4, 5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155117,"byte_end":155147,"line_start":171,"line_end":171,"column_start":5,"column_end":35}},{"value":"/                   6, 7, 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155152,"byte_end":155183,"line_start":172,"line_end":172,"column_start":5,"column_end":36}},{"value":"/ let row = unsafe { mat.row_unchecked(2) };","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155188,"byte_end":155234,"line_start":173,"line_end":173,"column_start":5,"column_end":51}},{"value":"/ let expected = matrix![6usize, 7, 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155239,"byte_end":155280,"line_start":174,"line_end":174,"column_start":5,"column_end":46}},{"value":"/ assert_matrix_eq!(*row, expected);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155285,"byte_end":155323,"line_start":175,"line_end":175,"column_start":5,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155328,"byte_end":155335,"line_start":176,"line_end":176,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155340,"byte_end":155347,"line_start":177,"line_end":177,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156117,"byte_end":156121,"line_start":200,"line_end":200,"column_start":8,"column_end":12},"name":"iter","qualname":"::matrix::base::BaseMatrix::iter","value":"pub fn iter<'a>(&Self) -> SliceIter where T: 'a","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Returns an iterator over the matrix data.","sig":null,"attributes":[{"value":"/ Returns an iterator over the matrix data.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155587,"byte_end":155632,"line_start":183,"line_end":183,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155637,"byte_end":155640,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155645,"byte_end":155659,"line_start":185,"line_end":185,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155664,"byte_end":155667,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155672,"byte_end":155679,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155684,"byte_end":155737,"line_start":188,"line_end":188,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155742,"byte_end":155789,"line_start":189,"line_end":189,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155794,"byte_end":155797,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ let mat = matrix![0, 1, 2;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155802,"byte_end":155832,"line_start":191,"line_end":191,"column_start":5,"column_end":35}},{"value":"/                   3, 4, 5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155837,"byte_end":155867,"line_start":192,"line_end":192,"column_start":5,"column_end":35}},{"value":"/                   6, 7, 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155872,"byte_end":155903,"line_start":193,"line_end":193,"column_start":5,"column_end":36}},{"value":"/ let slice = mat.sub_slice([1, 1], 2, 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155908,"byte_end":155952,"line_start":194,"line_end":194,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155957,"byte_end":155960,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ let slice_data = slice.iter().map(|v| *v).collect::<Vec<usize>>();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":155965,"byte_end":156035,"line_start":196,"line_end":196,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(slice_data, vec![4, 5, 7, 8]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156040,"byte_end":156085,"line_start":197,"line_end":197,"column_start":5,"column_end":50}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156090,"byte_end":156097,"line_start":198,"line_end":198,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156102,"byte_end":156109,"line_start":199,"line_end":199,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157029,"byte_end":157037,"line_start":233,"line_end":233,"column_start":8,"column_end":16},"name":"col_iter","qualname":"::matrix::base::BaseMatrix::col_iter","value":"pub fn col_iter(&Self) -> Cols<, T>","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Iterate over the columns of the matrix.","sig":null,"attributes":[{"value":"/ Iterate over the columns of the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156465,"byte_end":156508,"line_start":214,"line_end":214,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156513,"byte_end":156516,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156521,"byte_end":156535,"line_start":216,"line_end":216,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156540,"byte_end":156543,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156548,"byte_end":156555,"line_start":218,"line_end":218,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156560,"byte_end":156613,"line_start":219,"line_end":219,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156618,"byte_end":156665,"line_start":220,"line_end":220,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156670,"byte_end":156673,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![0, 1;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156678,"byte_end":156703,"line_start":222,"line_end":222,"column_start":5,"column_end":30}},{"value":"/                 2, 3;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156708,"byte_end":156733,"line_start":223,"line_end":223,"column_start":5,"column_end":30}},{"value":"/                 4, 5];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156738,"byte_end":156764,"line_start":224,"line_end":224,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156769,"byte_end":156772,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ let mut iter = a.col_iter();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156777,"byte_end":156809,"line_start":226,"line_end":226,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156814,"byte_end":156817,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ assert_matrix_eq!(*iter.next().unwrap(), matrix![ 0; 2; 4 ]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156822,"byte_end":156887,"line_start":228,"line_end":228,"column_start":5,"column_end":70}},{"value":"/ assert_matrix_eq!(*iter.next().unwrap(), matrix![ 1; 3; 5 ]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156892,"byte_end":156957,"line_start":229,"line_end":229,"column_start":5,"column_end":70}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":156962,"byte_end":156997,"line_start":230,"line_end":230,"column_start":5,"column_end":40}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157002,"byte_end":157009,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157014,"byte_end":157021,"line_start":232,"line_end":232,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157956,"byte_end":157964,"line_start":263,"line_end":263,"column_start":8,"column_end":16},"name":"row_iter","qualname":"::matrix::base::BaseMatrix::row_iter","value":"pub fn row_iter(&Self) -> Rows<, T>","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Iterate over the rows of the matrix.","sig":null,"attributes":[{"value":"/ Iterate over the rows of the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157324,"byte_end":157364,"line_start":244,"line_end":244,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157369,"byte_end":157372,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157377,"byte_end":157391,"line_start":246,"line_end":246,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157396,"byte_end":157399,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157404,"byte_end":157411,"line_start":248,"line_end":248,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157416,"byte_end":157469,"line_start":249,"line_end":249,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157474,"byte_end":157521,"line_start":250,"line_end":250,"column_start":5,"column_end":52}},{"value":"/ let a = matrix![0, 1, 2;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157526,"byte_end":157554,"line_start":251,"line_end":251,"column_start":5,"column_end":33}},{"value":"/                 3, 4, 5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157559,"byte_end":157587,"line_start":252,"line_end":252,"column_start":5,"column_end":33}},{"value":"/                 6, 7, 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157592,"byte_end":157621,"line_start":253,"line_end":253,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157626,"byte_end":157629,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ let mut iter = a.row_iter();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157634,"byte_end":157666,"line_start":255,"line_end":255,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157671,"byte_end":157674,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ assert_matrix_eq!(*iter.next().unwrap(), matrix![ 0, 1, 2 ]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157679,"byte_end":157744,"line_start":257,"line_end":257,"column_start":5,"column_end":70}},{"value":"/ assert_matrix_eq!(*iter.next().unwrap(), matrix![ 3, 4, 5 ]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157749,"byte_end":157814,"line_start":258,"line_end":258,"column_start":5,"column_end":70}},{"value":"/ assert_matrix_eq!(*iter.next().unwrap(), matrix![ 6, 7, 8 ]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157819,"byte_end":157884,"line_start":259,"line_end":259,"column_start":5,"column_end":70}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157889,"byte_end":157924,"line_start":260,"line_end":260,"column_start":5,"column_end":40}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157929,"byte_end":157936,"line_start":261,"line_end":261,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":157941,"byte_end":157948,"line_start":262,"line_end":262,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":159164,"byte_end":159173,"line_start":307,"line_end":307,"column_start":8,"column_end":17},"name":"diag_iter","qualname":"::matrix::base::BaseMatrix::diag_iter","value":"pub fn diag_iter(&Self, DiagOffset) -> Diagonal<, T, Self>","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Iterate over diagonal entries","sig":null,"attributes":[{"value":"/ Iterate over diagonal entries","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158251,"byte_end":158284,"line_start":274,"line_end":274,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158289,"byte_end":158292,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158297,"byte_end":158311,"line_start":276,"line_end":276,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158316,"byte_end":158319,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158324,"byte_end":158331,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158336,"byte_end":158377,"line_start":279,"line_end":279,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158382,"byte_end":158385,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158390,"byte_end":158407,"line_start":281,"line_end":281,"column_start":5,"column_end":22}},{"value":"/ use rulinalg::matrix::{DiagOffset, Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158412,"byte_end":158471,"line_start":282,"line_end":282,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158476,"byte_end":158479,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![0, 1, 2;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158484,"byte_end":158512,"line_start":284,"line_end":284,"column_start":5,"column_end":33}},{"value":"/                 3, 4, 5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158517,"byte_end":158545,"line_start":285,"line_end":285,"column_start":5,"column_end":33}},{"value":"/                 6, 7, 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158550,"byte_end":158579,"line_start":286,"line_end":286,"column_start":5,"column_end":34}},{"value":"/ // Print super diag [1, 5]","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158584,"byte_end":158614,"line_start":287,"line_end":287,"column_start":5,"column_end":35}},{"value":"/ for d in a.diag_iter(DiagOffset::Above(1)) {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158619,"byte_end":158667,"line_start":288,"line_end":288,"column_start":5,"column_end":53}},{"value":"/     println!(\"{}\", d);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158672,"byte_end":158698,"line_start":289,"line_end":289,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158703,"byte_end":158708,"line_start":290,"line_end":290,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158713,"byte_end":158716,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ // Print sub diag [3, 7]","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158721,"byte_end":158749,"line_start":292,"line_end":292,"column_start":5,"column_end":33}},{"value":"/ // Equivalent to `diag_iter(DiagOffset::Below(1))`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158754,"byte_end":158808,"line_start":293,"line_end":293,"column_start":5,"column_end":59}},{"value":"/ for d in a.diag_iter(DiagOffset::from(-1)) {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158813,"byte_end":158861,"line_start":294,"line_end":294,"column_start":5,"column_end":53}},{"value":"/     println!(\"{}\", d);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158866,"byte_end":158892,"line_start":295,"line_end":295,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158897,"byte_end":158902,"line_start":296,"line_end":296,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158907,"byte_end":158914,"line_start":297,"line_end":297,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158919,"byte_end":158926,"line_start":298,"line_end":298,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158931,"byte_end":158934,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158939,"byte_end":158951,"line_start":300,"line_end":300,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158956,"byte_end":158959,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ If using an `Above` or `Below` offset which is","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":158964,"byte_end":159014,"line_start":302,"line_end":302,"column_start":5,"column_end":55}},{"value":"/ out-of-bounds this function will panic.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":159019,"byte_end":159062,"line_start":303,"line_end":303,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":159067,"byte_end":159070,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ This function will never panic if the `Main` diagonal","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":159075,"byte_end":159132,"line_start":305,"line_end":305,"column_start":5,"column_end":62}},{"value":"/ offset is used.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":159137,"byte_end":159156,"line_start":306,"line_end":306,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160653,"byte_end":160661,"line_start":350,"line_end":350,"column_start":8,"column_end":16},"name":"sum_rows","qualname":"::matrix::base::BaseMatrix::sum_rows","value":"pub fn sum_rows(&Self) -> Vector<T> where T: Copy + Zero + Add<T, Output = T>","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" The sum of the rows of the matrix.","sig":null,"attributes":[{"value":"/ The sum of the rows of the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160057,"byte_end":160095,"line_start":330,"line_end":330,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160100,"byte_end":160103,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ Returns a Vector equal to the sums of elements over the matrices rows.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160108,"byte_end":160182,"line_start":332,"line_end":332,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160187,"byte_end":160190,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ Note that the resulting vector is identical to the sums of","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160195,"byte_end":160257,"line_start":334,"line_end":334,"column_start":5,"column_end":67}},{"value":"/ elements along each column of the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160262,"byte_end":160307,"line_start":335,"line_end":335,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160312,"byte_end":160315,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160320,"byte_end":160334,"line_start":337,"line_end":337,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160339,"byte_end":160342,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160347,"byte_end":160354,"line_start":339,"line_end":339,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160359,"byte_end":160412,"line_start":340,"line_end":340,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160417,"byte_end":160464,"line_start":341,"line_end":341,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160469,"byte_end":160472,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160477,"byte_end":160506,"line_start":343,"line_end":343,"column_start":5,"column_end":34}},{"value":"/                 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160511,"byte_end":160541,"line_start":344,"line_end":344,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160546,"byte_end":160549,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ let c = a.sum_rows();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160554,"byte_end":160579,"line_start":346,"line_end":346,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(c, vector![4.0, 6.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160584,"byte_end":160621,"line_start":347,"line_end":347,"column_start":5,"column_end":42}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160626,"byte_end":160633,"line_start":348,"line_end":348,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160638,"byte_end":160645,"line_start":349,"line_end":349,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161581,"byte_end":161589,"line_start":380,"line_end":380,"column_start":8,"column_end":16},"name":"sum_cols","qualname":"::matrix::base::BaseMatrix::sum_cols","value":"pub fn sum_cols(&Self) -> Vector<T> where T: Copy + Zero + Add<T, Output = T>","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" The sum of the columns of the matrix.","sig":null,"attributes":[{"value":"/ The sum of the columns of the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":160982,"byte_end":161023,"line_start":360,"line_end":360,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161028,"byte_end":161031,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ Returns a Vector equal to the sums of elements over the matrices columns.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161036,"byte_end":161113,"line_start":362,"line_end":362,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161118,"byte_end":161121,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ Note that the resulting vector is identical to the sums of","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161126,"byte_end":161188,"line_start":364,"line_end":364,"column_start":5,"column_end":67}},{"value":"/ elements along each row of the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161193,"byte_end":161235,"line_start":365,"line_end":365,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161240,"byte_end":161243,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161248,"byte_end":161262,"line_start":367,"line_end":367,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161267,"byte_end":161270,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161275,"byte_end":161282,"line_start":369,"line_end":369,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161287,"byte_end":161340,"line_start":370,"line_end":370,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161345,"byte_end":161392,"line_start":371,"line_end":371,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161397,"byte_end":161400,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161405,"byte_end":161434,"line_start":373,"line_end":373,"column_start":5,"column_end":34}},{"value":"/                 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161439,"byte_end":161469,"line_start":374,"line_end":374,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161474,"byte_end":161477,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ let c = a.sum_cols();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161482,"byte_end":161507,"line_start":376,"line_end":376,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(c, vector![3.0, 7.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161512,"byte_end":161549,"line_start":377,"line_end":377,"column_start":5,"column_end":42}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161554,"byte_end":161561,"line_start":378,"line_end":378,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161566,"byte_end":161573,"line_start":379,"line_end":379,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162227,"byte_end":162231,"line_start":403,"line_end":403,"column_start":8,"column_end":12},"name":"norm","qualname":"::matrix::base::BaseMatrix::norm","value":"pub fn norm<N: MatrixNorm<T, Self>>(&Self, N) -> T where T: Float","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Compute given matrix norm for matrix.","sig":null,"attributes":[{"value":"/ Compute given matrix norm for matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161854,"byte_end":161895,"line_start":388,"line_end":388,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161900,"byte_end":161903,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161908,"byte_end":161922,"line_start":390,"line_end":390,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161927,"byte_end":161930,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161935,"byte_end":161942,"line_start":392,"line_end":392,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":161947,"byte_end":162000,"line_start":393,"line_end":393,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::BaseMatrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162005,"byte_end":162042,"line_start":394,"line_end":394,"column_start":5,"column_end":42}},{"value":"/ use rulinalg::norm::Euclidean;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162047,"byte_end":162081,"line_start":395,"line_end":395,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162086,"byte_end":162089,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162094,"byte_end":162124,"line_start":397,"line_end":397,"column_start":5,"column_end":35}},{"value":"/ let c = a.norm(Euclidean);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162129,"byte_end":162159,"line_start":398,"line_end":398,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162164,"byte_end":162167,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(c, 5.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162172,"byte_end":162195,"line_start":400,"line_end":400,"column_start":5,"column_end":28}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162200,"byte_end":162207,"line_start":401,"line_end":401,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162212,"byte_end":162219,"line_start":402,"line_end":402,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162935,"byte_end":162941,"line_start":430,"line_end":430,"column_start":8,"column_end":14},"name":"metric","qualname":"::matrix::base::BaseMatrix::metric","value":"pub fn metric<'a, 'b, B, M>(&'a Self, &'b B, M) -> T where B: 'b +\nBaseMatrix<T>, M: MatrixMetric","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Compute the metric distance between two matrices.","sig":null,"attributes":[{"value":"/ Compute the metric distance between two matrices.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162341,"byte_end":162394,"line_start":409,"line_end":409,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162399,"byte_end":162402,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162407,"byte_end":162421,"line_start":411,"line_end":411,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162426,"byte_end":162429,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162434,"byte_end":162441,"line_start":413,"line_end":413,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162446,"byte_end":162499,"line_start":414,"line_end":414,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::BaseMatrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162504,"byte_end":162541,"line_start":415,"line_end":415,"column_start":5,"column_end":42}},{"value":"/ use rulinalg::norm::Euclidean;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162546,"byte_end":162580,"line_start":416,"line_end":416,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162585,"byte_end":162588,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![3.0, 4.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162593,"byte_end":162622,"line_start":418,"line_end":418,"column_start":5,"column_end":34}},{"value":"/                 1.0, 2.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162627,"byte_end":162657,"line_start":419,"line_end":419,"column_start":5,"column_end":35}},{"value":"/ let b = matrix![2.0, 5.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162662,"byte_end":162691,"line_start":420,"line_end":420,"column_start":5,"column_end":34}},{"value":"/                 0.0, 3.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162696,"byte_end":162726,"line_start":421,"line_end":421,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162731,"byte_end":162734,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ // Compute the square root of the sum of","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162739,"byte_end":162783,"line_start":423,"line_end":423,"column_start":5,"column_end":49}},{"value":"/ // elementwise squared-differences","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162788,"byte_end":162826,"line_start":424,"line_end":424,"column_start":5,"column_end":43}},{"value":"/ let c = a.metric(&b, Euclidean);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162831,"byte_end":162867,"line_start":425,"line_end":425,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162872,"byte_end":162875,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(c, 2.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162880,"byte_end":162903,"line_start":427,"line_end":427,"column_start":5,"column_end":28}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162908,"byte_end":162915,"line_start":428,"line_end":428,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":162920,"byte_end":162927,"line_start":429,"line_end":429,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163490,"byte_end":163493,"line_start":452,"line_end":452,"column_start":8,"column_end":11},"name":"sum","qualname":"::matrix::base::BaseMatrix::sum","value":"pub fn sum(&Self) -> T where T: Copy + Zero + Add<T, Output = T>","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" The sum of all elements in the matrix","sig":null,"attributes":[{"value":"/ The sum of all elements in the matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163131,"byte_end":163172,"line_start":437,"line_end":437,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163177,"byte_end":163180,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163185,"byte_end":163199,"line_start":439,"line_end":439,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163204,"byte_end":163207,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163212,"byte_end":163219,"line_start":441,"line_end":441,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163224,"byte_end":163277,"line_start":442,"line_end":442,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::BaseMatrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163282,"byte_end":163319,"line_start":443,"line_end":443,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163324,"byte_end":163327,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163332,"byte_end":163361,"line_start":445,"line_end":445,"column_start":5,"column_end":34}},{"value":"/                 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163366,"byte_end":163396,"line_start":446,"line_end":446,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163401,"byte_end":163404,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ let c = a.sum();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163409,"byte_end":163429,"line_start":448,"line_end":448,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(c, 10.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163434,"byte_end":163458,"line_start":449,"line_end":449,"column_start":5,"column_end":29}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163463,"byte_end":163470,"line_start":450,"line_end":450,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163475,"byte_end":163482,"line_start":451,"line_end":451,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":164199,"byte_end":164202,"line_start":478,"line_end":478,"column_start":8,"column_end":11},"name":"min","qualname":"::matrix::base::BaseMatrix::min","value":"pub fn min(&Self, Axes) -> Vector<T> where T: Copy + PartialOrd","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" The min of the specified axis of the matrix.","sig":null,"attributes":[{"value":"/ The min of the specified axis of the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163699,"byte_end":163747,"line_start":460,"line_end":460,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163752,"byte_end":163755,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163760,"byte_end":163774,"line_start":462,"line_end":462,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163779,"byte_end":163782,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163787,"byte_end":163794,"line_start":464,"line_end":464,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163799,"byte_end":163852,"line_start":465,"line_end":465,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix, Axes};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163857,"byte_end":163910,"line_start":466,"line_end":466,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163915,"byte_end":163918,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163923,"byte_end":163952,"line_start":468,"line_end":468,"column_start":5,"column_end":34}},{"value":"/                 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163957,"byte_end":163987,"line_start":469,"line_end":469,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":163992,"byte_end":163995,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ let cmin = a.min(Axes::Col);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":164000,"byte_end":164032,"line_start":471,"line_end":471,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(cmin, vector![1.0, 3.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":164037,"byte_end":164077,"line_start":472,"line_end":472,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":164082,"byte_end":164085,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ let rmin = a.min(Axes::Row);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":164090,"byte_end":164122,"line_start":474,"line_end":474,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(rmin, vector![1.0, 2.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":164127,"byte_end":164167,"line_start":475,"line_end":475,"column_start":5,"column_end":45}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":164172,"byte_end":164179,"line_start":476,"line_end":476,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":164184,"byte_end":164191,"line_start":477,"line_end":477,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165578,"byte_end":165581,"line_start":522,"line_end":522,"column_start":8,"column_end":11},"name":"max","qualname":"::matrix::base::BaseMatrix::max","value":"pub fn max(&Self, Axes) -> Vector<T> where T: Copy + PartialOrd","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" The max of the specified axis of the matrix.","sig":null,"attributes":[{"value":"/ The max of the specified axis of the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165086,"byte_end":165134,"line_start":504,"line_end":504,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165139,"byte_end":165142,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165147,"byte_end":165161,"line_start":506,"line_end":506,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165166,"byte_end":165169,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165174,"byte_end":165181,"line_start":508,"line_end":508,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165186,"byte_end":165239,"line_start":509,"line_end":509,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{BaseMatrix, Axes};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165244,"byte_end":165289,"line_start":510,"line_end":510,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165294,"byte_end":165297,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165302,"byte_end":165331,"line_start":512,"line_end":512,"column_start":5,"column_end":34}},{"value":"/                 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165336,"byte_end":165366,"line_start":513,"line_end":513,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165371,"byte_end":165374,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ let cmax = a.max(Axes::Col);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165379,"byte_end":165411,"line_start":515,"line_end":515,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(cmax, vector![2.0, 4.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165416,"byte_end":165456,"line_start":516,"line_end":516,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165461,"byte_end":165464,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ let rmax = a.max(Axes::Row);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165469,"byte_end":165501,"line_start":518,"line_end":518,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(rmax, vector![3.0, 4.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165506,"byte_end":165546,"line_start":519,"line_end":519,"column_start":5,"column_end":45}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165551,"byte_end":165558,"line_start":520,"line_end":520,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":165563,"byte_end":165570,"line_start":521,"line_end":521,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":166523,"byte_end":166534,"line_start":549,"line_end":549,"column_start":8,"column_end":19},"name":"into_matrix","qualname":"::matrix::base::BaseMatrix::into_matrix","value":"pub fn into_matrix(Self) -> Matrix<T> where T: Copy","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Convert the matrix struct into a owned Matrix.\n","sig":null,"attributes":[{"value":"/ Convert the matrix struct into a owned Matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":166465,"byte_end":166515,"line_start":548,"line_end":548,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":167144,"byte_end":167155,"line_start":576,"line_end":576,"column_start":8,"column_end":19},"name":"select_rows","qualname":"::matrix::base::BaseMatrix::select_rows","value":"pub fn select_rows<'a, I>(&Self, I) -> Matrix<T> where T: Copy,\nI: IntoIterator<Item = &'a usize>, I::IntoIter: ExactSizeIterator + Clone","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Select rows from matrix","sig":null,"attributes":[{"value":"/ Select rows from matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":166627,"byte_end":166654,"line_start":555,"line_end":555,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":166659,"byte_end":166662,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":166667,"byte_end":166681,"line_start":557,"line_end":557,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":166686,"byte_end":166689,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":166694,"byte_end":166701,"line_start":559,"line_end":559,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":166706,"byte_end":166753,"line_start":560,"line_end":560,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":166758,"byte_end":166761,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ let a = Matrix::<f64>::ones(3,3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":166766,"byte_end":166803,"line_start":562,"line_end":562,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":166808,"byte_end":166811,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ let b = &a.select_rows(&[2]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":166816,"byte_end":166849,"line_start":564,"line_end":564,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(b.rows(), 1);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":166854,"byte_end":166882,"line_start":565,"line_end":565,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(b.cols(), 3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":166887,"byte_end":166915,"line_start":566,"line_end":566,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":166920,"byte_end":166923,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ let c = &a.select_rows(&[1,2]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":166928,"byte_end":166963,"line_start":568,"line_end":568,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(c.rows(), 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":166968,"byte_end":166996,"line_start":569,"line_end":569,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(c.cols(), 3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":167001,"byte_end":167029,"line_start":570,"line_end":570,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":167034,"byte_end":167041,"line_start":571,"line_end":571,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":167046,"byte_end":167049,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":167054,"byte_end":167066,"line_start":573,"line_end":573,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":167071,"byte_end":167074,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ - Panics if row indices exceed the matrix dimensions.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":167079,"byte_end":167136,"line_start":575,"line_end":575,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":168445,"byte_end":168456,"line_start":623,"line_end":623,"column_start":8,"column_end":19},"name":"select_cols","qualname":"::matrix::base::BaseMatrix::select_cols","value":"pub fn select_cols<'a, I>(&Self, I) -> Matrix<T> where T: Copy,\nI: IntoIterator<Item = &'a usize>, I::IntoIter: ExactSizeIterator + Clone","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Select columns from matrix","sig":null,"attributes":[{"value":"/ Select columns from matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":167930,"byte_end":167960,"line_start":603,"line_end":603,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":167965,"byte_end":167968,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":167973,"byte_end":167987,"line_start":605,"line_end":605,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":167992,"byte_end":167995,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":168000,"byte_end":168007,"line_start":607,"line_end":607,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":168012,"byte_end":168059,"line_start":608,"line_end":608,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":168064,"byte_end":168067,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ let a = Matrix::<f64>::ones(3,3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":168072,"byte_end":168109,"line_start":610,"line_end":610,"column_start":5,"column_end":42}},{"value":"/ let b = &a.select_cols(&[2]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":168114,"byte_end":168147,"line_start":611,"line_end":611,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(b.rows(), 3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":168152,"byte_end":168180,"line_start":612,"line_end":612,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(b.cols(), 1);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":168185,"byte_end":168213,"line_start":613,"line_end":613,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":168218,"byte_end":168221,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ let c = &a.select_cols(&[1,2]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":168226,"byte_end":168261,"line_start":615,"line_end":615,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(c.rows(), 3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":168266,"byte_end":168294,"line_start":616,"line_end":616,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(c.cols(), 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":168299,"byte_end":168327,"line_start":617,"line_end":617,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":168332,"byte_end":168339,"line_start":618,"line_end":618,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":168344,"byte_end":168347,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":168352,"byte_end":168364,"line_start":620,"line_end":620,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":168369,"byte_end":168372,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ - Panics if column indices exceed the matrix dimensions.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":168377,"byte_end":168437,"line_start":622,"line_end":622,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169856,"byte_end":169862,"line_start":673,"line_end":673,"column_start":8,"column_end":14},"name":"elemul","qualname":"::matrix::base::BaseMatrix::elemul","value":"pub fn elemul(&Self, &Self) -> Matrix<T> where T: Copy + Mul<T, Output = T>","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" The elementwise product of two matrices.","sig":null,"attributes":[{"value":"/ The elementwise product of two matrices.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169243,"byte_end":169287,"line_start":651,"line_end":651,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169292,"byte_end":169295,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169300,"byte_end":169314,"line_start":653,"line_end":653,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169319,"byte_end":169322,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169327,"byte_end":169334,"line_start":655,"line_end":655,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169339,"byte_end":169392,"line_start":656,"line_end":656,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169397,"byte_end":169444,"line_start":657,"line_end":657,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169449,"byte_end":169452,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169457,"byte_end":169486,"line_start":659,"line_end":659,"column_start":5,"column_end":34}},{"value":"/                 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169491,"byte_end":169521,"line_start":660,"line_end":660,"column_start":5,"column_end":35}},{"value":"/ let b = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169526,"byte_end":169555,"line_start":661,"line_end":661,"column_start":5,"column_end":34}},{"value":"/                 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169560,"byte_end":169590,"line_start":662,"line_end":662,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169595,"byte_end":169598,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ let c = &a.elemul(&b);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169603,"byte_end":169629,"line_start":664,"line_end":664,"column_start":5,"column_end":31}},{"value":"/ assert_matrix_eq!(c, &matrix![1.0, 4.0; 9.0, 16.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169634,"byte_end":169690,"line_start":665,"line_end":665,"column_start":5,"column_end":61}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169695,"byte_end":169700,"line_start":666,"line_end":666,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169705,"byte_end":169712,"line_start":667,"line_end":667,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169717,"byte_end":169720,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169725,"byte_end":169737,"line_start":669,"line_end":669,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169742,"byte_end":169745,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ - The matrices have different row counts.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169750,"byte_end":169795,"line_start":671,"line_end":671,"column_start":5,"column_end":50}},{"value":"/ - The matrices have different column counts.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":169800,"byte_end":169848,"line_start":672,"line_end":672,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":171018,"byte_end":171024,"line_start":708,"line_end":708,"column_start":8,"column_end":14},"name":"elediv","qualname":"::matrix::base::BaseMatrix::elediv","value":"pub fn elediv(&Self, &Self) -> Matrix<T> where T: Copy + Div<T, Output = T>","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" The elementwise division of two matrices.","sig":null,"attributes":[{"value":"/ The elementwise division of two matrices.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170403,"byte_end":170448,"line_start":686,"line_end":686,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170453,"byte_end":170456,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170461,"byte_end":170475,"line_start":688,"line_end":688,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170480,"byte_end":170483,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170488,"byte_end":170495,"line_start":690,"line_end":690,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170500,"byte_end":170553,"line_start":691,"line_end":691,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170558,"byte_end":170605,"line_start":692,"line_end":692,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170610,"byte_end":170613,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170618,"byte_end":170647,"line_start":694,"line_end":694,"column_start":5,"column_end":34}},{"value":"/                 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170652,"byte_end":170682,"line_start":695,"line_end":695,"column_start":5,"column_end":35}},{"value":"/ let b = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170687,"byte_end":170716,"line_start":696,"line_end":696,"column_start":5,"column_end":34}},{"value":"/                 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170721,"byte_end":170751,"line_start":697,"line_end":697,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170756,"byte_end":170759,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ let c = &a.elediv(&b);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170764,"byte_end":170790,"line_start":699,"line_end":699,"column_start":5,"column_end":31}},{"value":"/ assert_matrix_eq!(c, &matrix![1.0, 1.0; 1.0, 1.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170795,"byte_end":170850,"line_start":700,"line_end":700,"column_start":5,"column_end":60}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170855,"byte_end":170862,"line_start":701,"line_end":701,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170867,"byte_end":170874,"line_start":702,"line_end":702,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170879,"byte_end":170882,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170887,"byte_end":170899,"line_start":704,"line_end":704,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170904,"byte_end":170907,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ - The matrices have different row counts.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170912,"byte_end":170957,"line_start":706,"line_end":706,"column_start":5,"column_end":50}},{"value":"/ - The matrices have different column counts.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":170962,"byte_end":171010,"line_start":707,"line_end":707,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":172132,"byte_end":172138,"line_start":742,"line_end":742,"column_start":8,"column_end":14},"name":"select","qualname":"::matrix::base::BaseMatrix::select","value":"pub fn select(&Self, &[usize], &[usize]) -> Matrix<T> where T: Copy","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Select block matrix from matrix","sig":null,"attributes":[{"value":"/ Select block matrix from matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":171565,"byte_end":171600,"line_start":721,"line_end":721,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":171605,"byte_end":171608,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":171613,"byte_end":171627,"line_start":723,"line_end":723,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":171632,"byte_end":171635,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":171640,"byte_end":171647,"line_start":725,"line_end":725,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":171652,"byte_end":171699,"line_start":726,"line_end":726,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":171704,"byte_end":171707,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ let a = Matrix::<f64>::identity(3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":171712,"byte_end":171751,"line_start":728,"line_end":728,"column_start":5,"column_end":44}},{"value":"/ let b = &a.select(&[0,1], &[1,2]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":171756,"byte_end":171794,"line_start":729,"line_end":729,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":171799,"byte_end":171802,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ // We get the 2x2 block matrix in the upper right corner.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":171807,"byte_end":171868,"line_start":731,"line_end":731,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(b.rows(), 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":171873,"byte_end":171901,"line_start":732,"line_end":732,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(b.cols(), 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":171906,"byte_end":171934,"line_start":733,"line_end":733,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":171939,"byte_end":171942,"line_start":734,"line_end":734,"column_start":5,"column_end":8}},{"value":"/ // Prints [0,0, 1,0]","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":171947,"byte_end":171971,"line_start":735,"line_end":735,"column_start":5,"column_end":29}},{"value":"/ println!(\"{:?}\", b.data());","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":171976,"byte_end":172007,"line_start":736,"line_end":736,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":172012,"byte_end":172019,"line_start":737,"line_end":737,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":172024,"byte_end":172027,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":172032,"byte_end":172044,"line_start":739,"line_end":739,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":172049,"byte_end":172052,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ - Panics if row or column indices exceed the matrix dimensions.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":172057,"byte_end":172124,"line_start":741,"line_end":741,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173564,"byte_end":173568,"line_start":797,"line_end":797,"column_start":8,"column_end":12},"name":"hcat","qualname":"::matrix::base::BaseMatrix::hcat","value":"pub fn hcat<S>(&Self, &S) -> Matrix<T> where T: Copy, S: BaseMatrix<T>","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Horizontally concatenates two matrices. With self on the left.","sig":null,"attributes":[{"value":"/ Horizontally concatenates two matrices. With self on the left.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":172905,"byte_end":172971,"line_start":773,"line_end":773,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":172976,"byte_end":172979,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":172984,"byte_end":172998,"line_start":775,"line_end":775,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173003,"byte_end":173006,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173011,"byte_end":173018,"line_start":777,"line_end":777,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173023,"byte_end":173076,"line_start":778,"line_end":778,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173081,"byte_end":173128,"line_start":779,"line_end":779,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173133,"byte_end":173136,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173141,"byte_end":173170,"line_start":781,"line_end":781,"column_start":5,"column_end":34}},{"value":"/                 3.0, 4.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173175,"byte_end":173204,"line_start":782,"line_end":782,"column_start":5,"column_end":34}},{"value":"/                 5.0, 6.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173209,"byte_end":173239,"line_start":783,"line_end":783,"column_start":5,"column_end":35}},{"value":"/ let b = matrix![4.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173244,"byte_end":173268,"line_start":784,"line_end":784,"column_start":5,"column_end":29}},{"value":"/                 5.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173273,"byte_end":173297,"line_start":785,"line_end":785,"column_start":5,"column_end":29}},{"value":"/                 6.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173302,"byte_end":173327,"line_start":786,"line_end":786,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173332,"byte_end":173335,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ let c = &a.hcat(&b);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173340,"byte_end":173364,"line_start":788,"line_end":788,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(c.cols(), a.cols() + b.cols());","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173369,"byte_end":173415,"line_start":789,"line_end":789,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(c[[1, 2]], 5.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173420,"byte_end":173451,"line_start":790,"line_end":790,"column_start":5,"column_end":36}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173456,"byte_end":173463,"line_start":791,"line_end":791,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173468,"byte_end":173475,"line_start":792,"line_end":792,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173480,"byte_end":173483,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173488,"byte_end":173500,"line_start":794,"line_end":794,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173505,"byte_end":173508,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ - Self and m have different row counts.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":173513,"byte_end":173556,"line_start":796,"line_end":796,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174752,"byte_end":174756,"line_start":838,"line_end":838,"column_start":8,"column_end":12},"name":"vcat","qualname":"::matrix::base::BaseMatrix::vcat","value":"pub fn vcat<S>(&Self, &S) -> Matrix<T> where T: Copy, S: BaseMatrix<T>","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Vertically concatenates two matrices. With self on top.","sig":null,"attributes":[{"value":"/ Vertically concatenates two matrices. With self on top.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174168,"byte_end":174227,"line_start":817,"line_end":817,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174232,"byte_end":174235,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174240,"byte_end":174254,"line_start":819,"line_end":819,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174259,"byte_end":174262,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174267,"byte_end":174274,"line_start":821,"line_end":821,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174279,"byte_end":174332,"line_start":822,"line_end":822,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174337,"byte_end":174384,"line_start":823,"line_end":823,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174389,"byte_end":174392,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![1.0, 2.0, 3.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174397,"byte_end":174431,"line_start":825,"line_end":825,"column_start":5,"column_end":39}},{"value":"/                 4.0, 5.0, 6.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174436,"byte_end":174471,"line_start":826,"line_end":826,"column_start":5,"column_end":40}},{"value":"/ let b = matrix![4.0, 5.0, 6.0];;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174476,"byte_end":174512,"line_start":827,"line_end":827,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174517,"byte_end":174520,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ let c = &a.vcat(&b);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174525,"byte_end":174549,"line_start":829,"line_end":829,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(c.rows(), a.rows() + b.rows());","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174554,"byte_end":174600,"line_start":830,"line_end":830,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(c[[2, 2]], 6.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174605,"byte_end":174636,"line_start":831,"line_end":831,"column_start":5,"column_end":36}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174641,"byte_end":174648,"line_start":832,"line_end":832,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174653,"byte_end":174660,"line_start":833,"line_end":833,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174665,"byte_end":174668,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174673,"byte_end":174685,"line_start":835,"line_end":835,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174690,"byte_end":174693,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ - Self and m have different column counts.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":174698,"byte_end":174744,"line_start":837,"line_end":837,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175894,"byte_end":175898,"line_start":880,"line_end":880,"column_start":8,"column_end":12},"name":"diag","qualname":"::matrix::base::BaseMatrix::diag","value":"pub fn diag(&Self) -> Diagonal<, T, Self>","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Extract the diagonal of the matrix","sig":null,"attributes":[{"value":"/ Extract the diagonal of the matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175299,"byte_end":175337,"line_start":858,"line_end":858,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175342,"byte_end":175345,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175350,"byte_end":175362,"line_start":860,"line_end":860,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175367,"byte_end":175370,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175375,"byte_end":175382,"line_start":862,"line_end":862,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175387,"byte_end":175405,"line_start":863,"line_end":863,"column_start":5,"column_end":23}},{"value":"/ # extern crate rulinalg;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175410,"byte_end":175438,"line_start":864,"line_end":864,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175443,"byte_end":175446,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ use rulinalg::matrix::BaseMatrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175451,"byte_end":175488,"line_start":866,"line_end":866,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175493,"byte_end":175496,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175501,"byte_end":175518,"line_start":868,"line_end":868,"column_start":5,"column_end":22}},{"value":"/ let a = matrix![1, 2, 3;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175523,"byte_end":175551,"line_start":869,"line_end":869,"column_start":5,"column_end":33}},{"value":"/                 4, 5, 6;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175556,"byte_end":175584,"line_start":870,"line_end":870,"column_start":5,"column_end":33}},{"value":"/                 7, 8, 9].diag().cloned().collect::<Vec<_>>();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175589,"byte_end":175654,"line_start":871,"line_end":871,"column_start":5,"column_end":70}},{"value":"/ let b = matrix![1, 2;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175659,"byte_end":175684,"line_start":872,"line_end":872,"column_start":5,"column_end":30}},{"value":"/                 3, 4;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175689,"byte_end":175714,"line_start":873,"line_end":873,"column_start":5,"column_end":30}},{"value":"/                 5, 6].diag().cloned().collect::<Vec<_>>();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175719,"byte_end":175781,"line_start":874,"line_end":874,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175786,"byte_end":175789,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a, vec![1, 5, 9]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175794,"byte_end":175827,"line_start":876,"line_end":876,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(b, vec![1, 4]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175832,"byte_end":175862,"line_start":877,"line_end":877,"column_start":5,"column_end":35}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175867,"byte_end":175874,"line_start":878,"line_end":878,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175879,"byte_end":175886,"line_start":879,"line_end":879,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":176477,"byte_end":176486,"line_start":901,"line_end":901,"column_start":8,"column_end":17},"name":"transpose","qualname":"::matrix::base::BaseMatrix::transpose","value":"pub fn transpose(&Self) -> Matrix<T> where T: Copy","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Tranposes the given matrix","sig":null,"attributes":[{"value":"/ Tranposes the given matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":175981,"byte_end":176011,"line_start":884,"line_end":884,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":176016,"byte_end":176019,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":176024,"byte_end":176038,"line_start":886,"line_end":886,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":176043,"byte_end":176046,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":176051,"byte_end":176058,"line_start":888,"line_end":888,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":176063,"byte_end":176116,"line_start":889,"line_end":889,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":176121,"byte_end":176168,"line_start":890,"line_end":890,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":176173,"byte_end":176176,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ let mat = matrix![1.0, 2.0, 3.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":176181,"byte_end":176217,"line_start":892,"line_end":892,"column_start":5,"column_end":41}},{"value":"/                   4.0, 5.0, 6.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":176222,"byte_end":176259,"line_start":893,"line_end":893,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":176264,"byte_end":176267,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ let expected = matrix![1.0, 4.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":176272,"byte_end":176308,"line_start":895,"line_end":895,"column_start":5,"column_end":41}},{"value":"/                        2.0, 5.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":176313,"byte_end":176349,"line_start":896,"line_end":896,"column_start":5,"column_end":41}},{"value":"/                        3.0, 6.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":176354,"byte_end":176391,"line_start":897,"line_end":897,"column_start":5,"column_end":42}},{"value":"/ assert_matrix_eq!(mat.transpose(), expected);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":176396,"byte_end":176445,"line_start":898,"line_end":898,"column_start":5,"column_end":54}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":176450,"byte_end":176457,"line_start":899,"line_end":899,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":176462,"byte_end":176469,"line_start":900,"line_end":900,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177564,"byte_end":177571,"line_start":943,"line_end":943,"column_start":8,"column_end":15},"name":"is_diag","qualname":"::matrix::base::BaseMatrix::is_diag","value":"pub fn is_diag(&Self) -> bool where T: Zero + PartialEq","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Checks if matrix is diagonal.","sig":null,"attributes":[{"value":"/ Checks if matrix is diagonal.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177035,"byte_end":177068,"line_start":922,"line_end":922,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177073,"byte_end":177076,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177081,"byte_end":177095,"line_start":924,"line_end":924,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177100,"byte_end":177103,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177108,"byte_end":177115,"line_start":926,"line_end":926,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177120,"byte_end":177173,"line_start":927,"line_end":927,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177178,"byte_end":177225,"line_start":928,"line_end":928,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177230,"byte_end":177233,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![1.0, 0.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177238,"byte_end":177267,"line_start":930,"line_end":930,"column_start":5,"column_end":34}},{"value":"/                 0.0, 1.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177272,"byte_end":177302,"line_start":931,"line_end":931,"column_start":5,"column_end":35}},{"value":"/ let a_diag = a.is_diag();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177307,"byte_end":177336,"line_start":932,"line_end":932,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177341,"byte_end":177344,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a_diag, true);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177349,"byte_end":177378,"line_start":934,"line_end":934,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177383,"byte_end":177386,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ let b = matrix![1.0, 0.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177391,"byte_end":177420,"line_start":936,"line_end":936,"column_start":5,"column_end":34}},{"value":"/                 1.0, 0.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177425,"byte_end":177455,"line_start":937,"line_end":937,"column_start":5,"column_end":35}},{"value":"/ let b_diag = b.is_diag();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177460,"byte_end":177489,"line_start":938,"line_end":938,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177494,"byte_end":177497,"line_start":939,"line_end":939,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b_diag, false);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177502,"byte_end":177532,"line_start":940,"line_end":940,"column_start":5,"column_end":35}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177537,"byte_end":177544,"line_start":941,"line_end":941,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177549,"byte_end":177556,"line_start":942,"line_end":942,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178819,"byte_end":178837,"line_start":986,"line_end":986,"column_start":8,"column_end":26},"name":"solve_u_triangular","qualname":"::matrix::base::BaseMatrix::solve_u_triangular","value":"pub fn solve_u_triangular(&Self, Vector<T>) -> Result<Vector<T>, Error> where\nT: Any + Float","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Solves an upper triangular linear system.","sig":null,"attributes":[{"value":"/ Solves an upper triangular linear system.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177860,"byte_end":177905,"line_start":955,"line_end":955,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177910,"byte_end":177913,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ Given a matrix `A` and a vector `b`, this function returns the","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177918,"byte_end":177984,"line_start":957,"line_end":957,"column_start":5,"column_end":71}},{"value":"/ solution of the upper triangular system `Ux = b`, where `U` is","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":177989,"byte_end":178055,"line_start":958,"line_end":958,"column_start":5,"column_end":71}},{"value":"/ the upper triangular part of `A`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178060,"byte_end":178097,"line_start":959,"line_end":959,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178102,"byte_end":178105,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178110,"byte_end":178124,"line_start":961,"line_end":961,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178129,"byte_end":178132,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178137,"byte_end":178144,"line_start":963,"line_end":963,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178149,"byte_end":178202,"line_start":964,"line_end":964,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::BaseMatrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178207,"byte_end":178244,"line_start":965,"line_end":965,"column_start":5,"column_end":42}},{"value":"/ use std::f32;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178249,"byte_end":178266,"line_start":966,"line_end":966,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178271,"byte_end":178274,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ let u = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178279,"byte_end":178308,"line_start":968,"line_end":968,"column_start":5,"column_end":34}},{"value":"/                 0.0, 1.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178313,"byte_end":178343,"line_start":969,"line_end":969,"column_start":5,"column_end":35}},{"value":"/ let y = vector![3.0, 1.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178348,"byte_end":178378,"line_start":970,"line_end":970,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178383,"byte_end":178386,"line_start":971,"line_end":971,"column_start":5,"column_end":8}},{"value":"/ let x = u.solve_u_triangular(y).expect(\"A solution should exist!\");","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178391,"byte_end":178462,"line_start":972,"line_end":972,"column_start":5,"column_end":76}},{"value":"/ assert!((x[0] - 1.0) < f32::EPSILON);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178467,"byte_end":178508,"line_start":973,"line_end":973,"column_start":5,"column_end":46}},{"value":"/ assert!((x[1] - 1.0) < f32::EPSILON);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178513,"byte_end":178554,"line_start":974,"line_end":974,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178559,"byte_end":178566,"line_start":975,"line_end":975,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178571,"byte_end":178578,"line_start":976,"line_end":976,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178583,"byte_end":178586,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178591,"byte_end":178603,"line_start":978,"line_end":978,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178608,"byte_end":178611,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ - Vector size and matrix column count are not equal.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178616,"byte_end":178672,"line_start":980,"line_end":980,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178677,"byte_end":178680,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178685,"byte_end":178699,"line_start":982,"line_end":982,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178704,"byte_end":178707,"line_start":983,"line_end":983,"column_start":5,"column_end":8}},{"value":"/ - There is no valid solution to the system (matrix is singular).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178712,"byte_end":178780,"line_start":984,"line_end":984,"column_start":5,"column_end":73}},{"value":"/ - The matrix is empty.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":178785,"byte_end":178811,"line_start":985,"line_end":985,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":180141,"byte_end":180159,"line_start":1029,"line_end":1029,"column_start":8,"column_end":26},"name":"solve_l_triangular","qualname":"::matrix::base::BaseMatrix::solve_l_triangular","value":"pub fn solve_l_triangular(&Self, Vector<T>) -> Result<Vector<T>, Error> where\nT: Any + Float","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Solves a lower triangular linear system.","sig":null,"attributes":[{"value":"/ Solves a lower triangular linear system.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179154,"byte_end":179198,"line_start":997,"line_end":997,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179203,"byte_end":179206,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ Given a matrix `A` and a vector `b`, this function returns the","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179211,"byte_end":179277,"line_start":999,"line_end":999,"column_start":5,"column_end":71}},{"value":"/ solution of the lower triangular system `Lx = b`, where `L` is","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179282,"byte_end":179348,"line_start":1000,"line_end":1000,"column_start":5,"column_end":71}},{"value":"/ the lower triangular part of `A`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179353,"byte_end":179390,"line_start":1001,"line_end":1001,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179395,"byte_end":179398,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179403,"byte_end":179417,"line_start":1003,"line_end":1003,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179422,"byte_end":179425,"line_start":1004,"line_end":1004,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179430,"byte_end":179437,"line_start":1005,"line_end":1005,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179442,"byte_end":179495,"line_start":1006,"line_end":1006,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::BaseMatrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179500,"byte_end":179537,"line_start":1007,"line_end":1007,"column_start":5,"column_end":42}},{"value":"/ use std::f32;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179542,"byte_end":179559,"line_start":1008,"line_end":1008,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179564,"byte_end":179567,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ let l = matrix![1.0, 0.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179572,"byte_end":179601,"line_start":1010,"line_end":1010,"column_start":5,"column_end":34}},{"value":"/                 2.0, 1.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179606,"byte_end":179636,"line_start":1011,"line_end":1011,"column_start":5,"column_end":35}},{"value":"/ let y = vector![1.0, 3.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179641,"byte_end":179671,"line_start":1012,"line_end":1012,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179676,"byte_end":179679,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ let x = l.solve_l_triangular(y).expect(\"A solution should exist!\");","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179684,"byte_end":179755,"line_start":1014,"line_end":1014,"column_start":5,"column_end":76}},{"value":"/ println!(\"{:?}\", x);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179760,"byte_end":179784,"line_start":1015,"line_end":1015,"column_start":5,"column_end":29}},{"value":"/ assert!((x[0] - 1.0) < f32::EPSILON);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179789,"byte_end":179830,"line_start":1016,"line_end":1016,"column_start":5,"column_end":46}},{"value":"/ assert!((x[1] - 1.0) < f32::EPSILON);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179835,"byte_end":179876,"line_start":1017,"line_end":1017,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179881,"byte_end":179888,"line_start":1018,"line_end":1018,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179893,"byte_end":179900,"line_start":1019,"line_end":1019,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179905,"byte_end":179908,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179913,"byte_end":179925,"line_start":1021,"line_end":1021,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179930,"byte_end":179933,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ - Vector size and matrix column count are not equal.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179938,"byte_end":179994,"line_start":1023,"line_end":1023,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":179999,"byte_end":180002,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":180007,"byte_end":180021,"line_start":1025,"line_end":1025,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":180026,"byte_end":180029,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ - There is no valid solution to the system (matrix is singular).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":180034,"byte_end":180102,"line_start":1027,"line_end":1027,"column_start":5,"column_end":73}},{"value":"/ - The matrix is empty.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":180107,"byte_end":180133,"line_start":1028,"line_end":1028,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":180778,"byte_end":180786,"line_start":1050,"line_end":1050,"column_start":8,"column_end":16},"name":"split_at","qualname":"::matrix::base::BaseMatrix::split_at","value":"pub fn split_at(&Self, usize, Axes) -> (MatrixSlice<, T>, MatrixSlice<, T>)","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Split the matrix at the specified axis returning two `MatrixSlice`s.","sig":null,"attributes":[{"value":"/ Split the matrix at the specified axis returning two `MatrixSlice`s.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":180479,"byte_end":180551,"line_start":1040,"line_end":1040,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":180556,"byte_end":180559,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":180564,"byte_end":180578,"line_start":1042,"line_end":1042,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":180583,"byte_end":180586,"line_start":1043,"line_end":1043,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":180591,"byte_end":180598,"line_start":1044,"line_end":1044,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::{Axes, Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":180603,"byte_end":180656,"line_start":1045,"line_end":1045,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":180661,"byte_end":180664,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ let a = Matrix::new(3,3, vec![2.0; 9]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":180669,"byte_end":180712,"line_start":1047,"line_end":1047,"column_start":5,"column_end":48}},{"value":"/ let (b,c) = a.split_at(1, Axes::Row);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":180717,"byte_end":180758,"line_start":1048,"line_end":1048,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":180763,"byte_end":180770,"line_start":1049,"line_end":1049,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":182997,"byte_end":183006,"line_start":1099,"line_end":1099,"column_start":8,"column_end":17},"name":"sub_slice","qualname":"::matrix::base::BaseMatrix::sub_slice","value":"pub fn sub_slice<'a>(&Self, [usize; ], usize, usize) -> MatrixSlice where\nT: 'a","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Produce a `MatrixSlice` from an existing matrix.","sig":null,"attributes":[{"value":"/ Produce a `MatrixSlice` from an existing matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":182622,"byte_end":182674,"line_start":1088,"line_end":1088,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":182679,"byte_end":182682,"line_start":1089,"line_end":1089,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":182687,"byte_end":182701,"line_start":1090,"line_end":1090,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":182706,"byte_end":182709,"line_start":1091,"line_end":1091,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":182714,"byte_end":182721,"line_start":1092,"line_end":1092,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix, MatrixSlice};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":182726,"byte_end":182786,"line_start":1093,"line_end":1093,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":182791,"byte_end":182794,"line_start":1094,"line_end":1094,"column_start":5,"column_end":8}},{"value":"/ let a = Matrix::new(3,3, (0..9).collect::<Vec<usize>>());","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":182799,"byte_end":182860,"line_start":1095,"line_end":1095,"column_start":5,"column_end":66}},{"value":"/ let slice = MatrixSlice::from_matrix(&a, [1,1], 2, 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":182865,"byte_end":182923,"line_start":1096,"line_end":1096,"column_start":5,"column_end":63}},{"value":"/ let new_slice = slice.sub_slice([0,0], 1, 1);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":182928,"byte_end":182977,"line_start":1097,"line_end":1097,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":182982,"byte_end":182989,"line_start":1098,"line_end":1098,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":778},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":183772,"byte_end":183785,"line_start":1119,"line_end":1119,"column_start":11,"column_end":24},"name":"BaseMatrixMut","qualname":"::matrix::base::BaseMatrixMut","value":"BaseMatrixMut<T>: BaseMatrix<T>","parent":null,"children":[{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800}],"decl_id":null,"docs":" Trait for mutable matrices.\n","sig":null,"attributes":[{"value":"/ Trait for mutable matrices.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":183730,"byte_end":183761,"line_start":1118,"line_end":1118,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":183850,"byte_end":183860,"line_start":1121,"line_end":1121,"column_start":8,"column_end":18},"name":"as_mut_ptr","qualname":"::matrix::base::BaseMatrixMut::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> *mut T","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Top left index of the slice.\n","sig":null,"attributes":[{"value":"/ Top left index of the slice.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":183810,"byte_end":183842,"line_start":1120,"line_end":1120,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":184158,"byte_end":184170,"line_start":1133,"line_end":1133,"column_start":8,"column_end":20},"name":"as_mut_slice","qualname":"::matrix::base::BaseMatrixMut::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> MatrixSliceMut<, T>","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Returns a `MatrixSliceMut` over the whole matrix.","sig":null,"attributes":[{"value":"/ Returns a `MatrixSliceMut` over the whole matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":183888,"byte_end":183941,"line_start":1123,"line_end":1123,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":183946,"byte_end":183949,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":183954,"byte_end":183968,"line_start":1125,"line_end":1125,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":183973,"byte_end":183976,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":183981,"byte_end":183988,"line_start":1127,"line_end":1127,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrixMut};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":183993,"byte_end":184043,"line_start":1128,"line_end":1128,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":184048,"byte_end":184051,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ let mut a = Matrix::new(3, 3, vec![2.0; 9]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":184056,"byte_end":184104,"line_start":1130,"line_end":1130,"column_start":5,"column_end":53}},{"value":"/ let b = a.as_mut_slice();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":184109,"byte_end":184138,"line_start":1131,"line_end":1131,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":184143,"byte_end":184150,"line_start":1132,"line_end":1132,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":184569,"byte_end":184586,"line_start":1143,"line_end":1143,"column_start":15,"column_end":32},"name":"get_unchecked_mut","qualname":"::matrix::base::BaseMatrixMut::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut(&mut Self, [usize; ]) -> &mut T","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Get a mutable reference to a point in the matrix without bounds checks.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to a point in the matrix without bounds checks.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":184479,"byte_end":184554,"line_start":1142,"line_end":1142,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185347,"byte_end":185355,"line_start":1169,"line_end":1169,"column_start":8,"column_end":16},"name":"iter_mut","qualname":"::matrix::base::BaseMatrixMut::iter_mut","value":"pub fn iter_mut<'a>(&mut Self) -> SliceIterMut where T: 'a","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Returns a mutable iterator over the matrix.","sig":null,"attributes":[{"value":"/ Returns a mutable iterator over the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":184733,"byte_end":184780,"line_start":1147,"line_end":1147,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":184785,"byte_end":184788,"line_start":1148,"line_end":1148,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":184793,"byte_end":184807,"line_start":1149,"line_end":1149,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":184812,"byte_end":184815,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":184820,"byte_end":184827,"line_start":1151,"line_end":1151,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":184832,"byte_end":184885,"line_start":1152,"line_end":1152,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrixMut};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":184890,"byte_end":184940,"line_start":1153,"line_end":1153,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":184945,"byte_end":184948,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ let mut a = Matrix::new(3,3, (0..9).collect::<Vec<usize>>());","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":184953,"byte_end":185018,"line_start":1155,"line_end":1155,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185023,"byte_end":185026,"line_start":1156,"line_end":1156,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185031,"byte_end":185036,"line_start":1157,"line_end":1157,"column_start":5,"column_end":10}},{"value":"/     let mut slice = a.sub_slice_mut([1,1], 2, 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185041,"byte_end":185094,"line_start":1158,"line_end":1158,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185099,"byte_end":185102,"line_start":1159,"line_end":1159,"column_start":5,"column_end":8}},{"value":"/     for d in slice.iter_mut() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185107,"byte_end":185142,"line_start":1160,"line_end":1160,"column_start":5,"column_end":40}},{"value":"/         *d = *d + 2;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185147,"byte_end":185171,"line_start":1161,"line_end":1161,"column_start":5,"column_end":29}},{"value":"/     }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185176,"byte_end":185185,"line_start":1162,"line_end":1162,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185190,"byte_end":185195,"line_start":1163,"line_end":1163,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185200,"byte_end":185203,"line_start":1164,"line_end":1164,"column_start":5,"column_end":8}},{"value":"/ // Only the matrix slice is updated.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185208,"byte_end":185248,"line_start":1165,"line_end":1165,"column_start":5,"column_end":45}},{"value":"/ assert_matrix_eq!(a, matrix![0, 1, 2; 3, 6, 7; 6, 9, 10]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185253,"byte_end":185315,"line_start":1166,"line_end":1166,"column_start":5,"column_end":67}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185320,"byte_end":185327,"line_start":1167,"line_end":1167,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185332,"byte_end":185339,"line_start":1168,"line_end":1168,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186490,"byte_end":186497,"line_start":1210,"line_end":1210,"column_start":8,"column_end":15},"name":"col_mut","qualname":"::matrix::base::BaseMatrixMut::col_mut","value":"pub fn col_mut(&mut Self, usize) -> ColumnMut<, T>","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the column of a matrix at the given index.\n `None` if the index is out of bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the column of a matrix at the given index.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185717,"byte_end":185794,"line_start":1183,"line_end":1183,"column_start":5,"column_end":82}},{"value":"/ `None` if the index is out of bounds.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185799,"byte_end":185840,"line_start":1184,"line_end":1184,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185845,"byte_end":185848,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185853,"byte_end":185867,"line_start":1186,"line_end":1186,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185872,"byte_end":185875,"line_start":1187,"line_end":1187,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185880,"byte_end":185887,"line_start":1188,"line_end":1188,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185892,"byte_end":185910,"line_start":1189,"line_end":1189,"column_start":5,"column_end":23}},{"value":"/ # extern crate rulinalg;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185915,"byte_end":185943,"line_start":1190,"line_end":1190,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185948,"byte_end":185951,"line_start":1191,"line_end":1191,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185956,"byte_end":185973,"line_start":1192,"line_end":1192,"column_start":5,"column_end":22}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrixMut};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":185978,"byte_end":186028,"line_start":1193,"line_end":1193,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186033,"byte_end":186036,"line_start":1194,"line_end":1194,"column_start":5,"column_end":8}},{"value":"/ let mut mat = matrix![0, 1, 2;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186041,"byte_end":186075,"line_start":1195,"line_end":1195,"column_start":5,"column_end":39}},{"value":"/                       3, 4, 5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186080,"byte_end":186114,"line_start":1196,"line_end":1196,"column_start":5,"column_end":39}},{"value":"/                       6, 7, 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186119,"byte_end":186154,"line_start":1197,"line_end":1197,"column_start":5,"column_end":40}},{"value":"/ let mut slice = mat.sub_slice_mut([1,1], 2, 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186159,"byte_end":186210,"line_start":1198,"line_end":1198,"column_start":5,"column_end":56}},{"value":"/ {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186215,"byte_end":186220,"line_start":1199,"line_end":1199,"column_start":5,"column_end":10}},{"value":"/     let col = slice.col_mut(1);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186225,"byte_end":186260,"line_start":1200,"line_end":1200,"column_start":5,"column_end":40}},{"value":"/     let mut expected = matrix![5usize; 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186265,"byte_end":186311,"line_start":1201,"line_end":1201,"column_start":5,"column_end":51}},{"value":"/     assert_matrix_eq!(*col, expected);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186316,"byte_end":186358,"line_start":1202,"line_end":1202,"column_start":5,"column_end":47}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186363,"byte_end":186368,"line_start":1203,"line_end":1203,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186373,"byte_end":186380,"line_start":1204,"line_end":1204,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186385,"byte_end":186392,"line_start":1205,"line_end":1205,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186397,"byte_end":186400,"line_start":1206,"line_end":1206,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186405,"byte_end":186417,"line_start":1207,"line_end":1207,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186422,"byte_end":186425,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ Will panic if the column index is out of bounds.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186430,"byte_end":186482,"line_start":1209,"line_end":1209,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187385,"byte_end":187402,"line_start":1239,"line_end":1239,"column_start":15,"column_end":32},"name":"col_unchecked_mut","qualname":"::matrix::base::BaseMatrixMut::col_unchecked_mut","value":"pub unsafe fn col_unchecked_mut(&mut Self, usize) -> ColumnMut<, T>","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the column of a matrix at the given index\n without doing a bounds check.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the column of a matrix at the given index","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186715,"byte_end":186791,"line_start":1218,"line_end":1218,"column_start":5,"column_end":81}},{"value":"/ without doing a bounds check.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186796,"byte_end":186829,"line_start":1219,"line_end":1219,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186834,"byte_end":186837,"line_start":1220,"line_end":1220,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186842,"byte_end":186856,"line_start":1221,"line_end":1221,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186861,"byte_end":186864,"line_start":1222,"line_end":1222,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186869,"byte_end":186876,"line_start":1223,"line_end":1223,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186881,"byte_end":186899,"line_start":1224,"line_end":1224,"column_start":5,"column_end":23}},{"value":"/ # extern crate rulinalg;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186904,"byte_end":186932,"line_start":1225,"line_end":1225,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186937,"byte_end":186940,"line_start":1226,"line_end":1226,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186945,"byte_end":186962,"line_start":1227,"line_end":1227,"column_start":5,"column_end":22}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrixMut};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":186967,"byte_end":187017,"line_start":1228,"line_end":1228,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187022,"byte_end":187025,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ let mut mat = matrix![0, 1, 2;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187030,"byte_end":187064,"line_start":1230,"line_end":1230,"column_start":5,"column_end":39}},{"value":"/                       3, 4, 5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187069,"byte_end":187103,"line_start":1231,"line_end":1231,"column_start":5,"column_end":39}},{"value":"/                       6, 7, 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187108,"byte_end":187143,"line_start":1232,"line_end":1232,"column_start":5,"column_end":40}},{"value":"/ let mut slice = mat.sub_slice_mut([1,1], 2, 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187148,"byte_end":187199,"line_start":1233,"line_end":1233,"column_start":5,"column_end":56}},{"value":"/ let col = unsafe { slice.col_unchecked_mut(1) };","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187204,"byte_end":187256,"line_start":1234,"line_end":1234,"column_start":5,"column_end":57}},{"value":"/ let mut expected = matrix![5usize; 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187261,"byte_end":187303,"line_start":1235,"line_end":1235,"column_start":5,"column_end":47}},{"value":"/ assert_matrix_eq!(*col, expected);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187308,"byte_end":187346,"line_start":1236,"line_end":1236,"column_start":5,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187351,"byte_end":187358,"line_start":1237,"line_end":1237,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187363,"byte_end":187370,"line_start":1238,"line_end":1238,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188382,"byte_end":188389,"line_start":1271,"line_end":1271,"column_start":8,"column_end":15},"name":"row_mut","qualname":"::matrix::base::BaseMatrixMut::row_mut","value":"pub fn row_mut(&mut Self, usize) -> RowMut<, T>","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the row of a matrix at the given index.\n `None` if the index is out of bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the row of a matrix at the given index.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187615,"byte_end":187689,"line_start":1244,"line_end":1244,"column_start":5,"column_end":79}},{"value":"/ `None` if the index is out of bounds.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187694,"byte_end":187735,"line_start":1245,"line_end":1245,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187740,"byte_end":187743,"line_start":1246,"line_end":1246,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187748,"byte_end":187762,"line_start":1247,"line_end":1247,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187767,"byte_end":187770,"line_start":1248,"line_end":1248,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187775,"byte_end":187782,"line_start":1249,"line_end":1249,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187787,"byte_end":187805,"line_start":1250,"line_end":1250,"column_start":5,"column_end":23}},{"value":"/ # extern crate rulinalg;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187810,"byte_end":187838,"line_start":1251,"line_end":1251,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187843,"byte_end":187846,"line_start":1252,"line_end":1252,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187851,"byte_end":187868,"line_start":1253,"line_end":1253,"column_start":5,"column_end":22}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrixMut};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187873,"byte_end":187923,"line_start":1254,"line_end":1254,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187928,"byte_end":187931,"line_start":1255,"line_end":1255,"column_start":5,"column_end":8}},{"value":"/ let mut mat = matrix![0, 1, 2;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187936,"byte_end":187970,"line_start":1256,"line_end":1256,"column_start":5,"column_end":39}},{"value":"/                       3, 4, 5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":187975,"byte_end":188009,"line_start":1257,"line_end":1257,"column_start":5,"column_end":39}},{"value":"/                       6, 7, 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188014,"byte_end":188049,"line_start":1258,"line_end":1258,"column_start":5,"column_end":40}},{"value":"/ let mut slice = mat.sub_slice_mut([1,1], 2, 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188054,"byte_end":188105,"line_start":1259,"line_end":1259,"column_start":5,"column_end":56}},{"value":"/ {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188110,"byte_end":188115,"line_start":1260,"line_end":1260,"column_start":5,"column_end":10}},{"value":"/     let row = slice.row_mut(1);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188120,"byte_end":188155,"line_start":1261,"line_end":1261,"column_start":5,"column_end":40}},{"value":"/     let mut expected = matrix![7usize, 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188160,"byte_end":188206,"line_start":1262,"line_end":1262,"column_start":5,"column_end":51}},{"value":"/     assert_matrix_eq!(*row, expected);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188211,"byte_end":188253,"line_start":1263,"line_end":1263,"column_start":5,"column_end":47}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188258,"byte_end":188263,"line_start":1264,"line_end":1264,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188268,"byte_end":188275,"line_start":1265,"line_end":1265,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188280,"byte_end":188287,"line_start":1266,"line_end":1266,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188292,"byte_end":188295,"line_start":1267,"line_end":1267,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188300,"byte_end":188312,"line_start":1268,"line_end":1268,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188317,"byte_end":188320,"line_start":1269,"line_end":1269,"column_start":5,"column_end":8}},{"value":"/ Will panic if the row index is out of bounds.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188325,"byte_end":188374,"line_start":1270,"line_end":1270,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189268,"byte_end":189285,"line_start":1300,"line_end":1300,"column_start":15,"column_end":32},"name":"row_unchecked_mut","qualname":"::matrix::base::BaseMatrixMut::row_unchecked_mut","value":"pub unsafe fn row_unchecked_mut(&mut Self, usize) -> RowMut<, T>","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the row of a matrix at the given index\n without doing a bounds check.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the row of a matrix at the given index","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188601,"byte_end":188674,"line_start":1279,"line_end":1279,"column_start":5,"column_end":78}},{"value":"/ without doing a bounds check.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188679,"byte_end":188712,"line_start":1280,"line_end":1280,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188717,"byte_end":188720,"line_start":1281,"line_end":1281,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188725,"byte_end":188739,"line_start":1282,"line_end":1282,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188744,"byte_end":188747,"line_start":1283,"line_end":1283,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188752,"byte_end":188759,"line_start":1284,"line_end":1284,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188764,"byte_end":188782,"line_start":1285,"line_end":1285,"column_start":5,"column_end":23}},{"value":"/ # extern crate rulinalg;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188787,"byte_end":188815,"line_start":1286,"line_end":1286,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188820,"byte_end":188823,"line_start":1287,"line_end":1287,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188828,"byte_end":188845,"line_start":1288,"line_end":1288,"column_start":5,"column_end":22}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrixMut};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188850,"byte_end":188900,"line_start":1289,"line_end":1289,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188905,"byte_end":188908,"line_start":1290,"line_end":1290,"column_start":5,"column_end":8}},{"value":"/ let mut mat = matrix![0, 1, 2;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188913,"byte_end":188947,"line_start":1291,"line_end":1291,"column_start":5,"column_end":39}},{"value":"/                       3, 4, 5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188952,"byte_end":188986,"line_start":1292,"line_end":1292,"column_start":5,"column_end":39}},{"value":"/                       6, 7, 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":188991,"byte_end":189026,"line_start":1293,"line_end":1293,"column_start":5,"column_end":40}},{"value":"/ let mut slice = mat.sub_slice_mut([1,1], 2, 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189031,"byte_end":189082,"line_start":1294,"line_end":1294,"column_start":5,"column_end":56}},{"value":"/ let row = unsafe { slice.row_unchecked_mut(1) };","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189087,"byte_end":189139,"line_start":1295,"line_end":1295,"column_start":5,"column_end":57}},{"value":"/ let mut expected = matrix![7usize, 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189144,"byte_end":189186,"line_start":1296,"line_end":1296,"column_start":5,"column_end":47}},{"value":"/ assert_matrix_eq!(*row, expected);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189191,"byte_end":189229,"line_start":1297,"line_end":1297,"column_start":5,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189234,"byte_end":189241,"line_start":1298,"line_end":1298,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189246,"byte_end":189253,"line_start":1299,"line_end":1299,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":190260,"byte_end":190269,"line_start":1334,"line_end":1334,"column_start":8,"column_end":17},"name":"swap_rows","qualname":"::matrix::base::BaseMatrixMut::swap_rows","value":"pub fn swap_rows(&mut Self, usize, usize)","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Swaps two rows in a matrix.","sig":null,"attributes":[{"value":"/ Swaps two rows in a matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189514,"byte_end":189545,"line_start":1305,"line_end":1305,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189550,"byte_end":189553,"line_start":1306,"line_end":1306,"column_start":5,"column_end":8}},{"value":"/ If `a == b`, this method does nothing.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189558,"byte_end":189600,"line_start":1307,"line_end":1307,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189605,"byte_end":189608,"line_start":1308,"line_end":1308,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189613,"byte_end":189627,"line_start":1309,"line_end":1309,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189632,"byte_end":189635,"line_start":1310,"line_end":1310,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189640,"byte_end":189647,"line_start":1311,"line_end":1311,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189652,"byte_end":189693,"line_start":1312,"line_end":1312,"column_start":5,"column_end":46}},{"value":"/ # fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189698,"byte_end":189715,"line_start":1313,"line_end":1313,"column_start":5,"column_end":22}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrixMut};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189720,"byte_end":189770,"line_start":1314,"line_end":1314,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189775,"byte_end":189778,"line_start":1315,"line_end":1315,"column_start":5,"column_end":8}},{"value":"/ let mut x = matrix![0, 1;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189783,"byte_end":189812,"line_start":1316,"line_end":1316,"column_start":5,"column_end":34}},{"value":"/                     2, 3;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189817,"byte_end":189846,"line_start":1317,"line_end":1317,"column_start":5,"column_end":34}},{"value":"/                     4, 5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189851,"byte_end":189880,"line_start":1318,"line_end":1318,"column_start":5,"column_end":34}},{"value":"/                     6, 7];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189885,"byte_end":189915,"line_start":1319,"line_end":1319,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189920,"byte_end":189923,"line_start":1320,"line_end":1320,"column_start":5,"column_end":8}},{"value":"/ x.swap_rows(1, 3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189928,"byte_end":189950,"line_start":1321,"line_end":1321,"column_start":5,"column_end":27}},{"value":"/ let expected = matrix![0, 1;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189955,"byte_end":189987,"line_start":1322,"line_end":1322,"column_start":5,"column_end":37}},{"value":"/                        6, 7;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":189992,"byte_end":190024,"line_start":1323,"line_end":1323,"column_start":5,"column_end":37}},{"value":"/                        4, 5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":190029,"byte_end":190061,"line_start":1324,"line_end":1324,"column_start":5,"column_end":37}},{"value":"/                        2, 3];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":190066,"byte_end":190099,"line_start":1325,"line_end":1325,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":190104,"byte_end":190107,"line_start":1326,"line_end":1326,"column_start":5,"column_end":8}},{"value":"/ assert_matrix_eq!(x, expected);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":190112,"byte_end":190147,"line_start":1327,"line_end":1327,"column_start":5,"column_end":40}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":190152,"byte_end":190159,"line_start":1328,"line_end":1328,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":190164,"byte_end":190171,"line_start":1329,"line_end":1329,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":190176,"byte_end":190179,"line_start":1330,"line_end":1330,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":190184,"byte_end":190196,"line_start":1331,"line_end":1331,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":190201,"byte_end":190204,"line_start":1332,"line_end":1332,"column_start":5,"column_end":8}},{"value":"/ Panics if `a` or `b` are out of bounds.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":190209,"byte_end":190252,"line_start":1333,"line_end":1333,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":192038,"byte_end":192047,"line_start":1386,"line_end":1386,"column_start":8,"column_end":17},"name":"swap_cols","qualname":"::matrix::base::BaseMatrixMut::swap_cols","value":"pub fn swap_cols(&mut Self, usize, usize)","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Swaps two columns in a matrix.","sig":null,"attributes":[{"value":"/ Swaps two columns in a matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191360,"byte_end":191394,"line_start":1359,"line_end":1359,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191399,"byte_end":191402,"line_start":1360,"line_end":1360,"column_start":5,"column_end":8}},{"value":"/ If `a == b`, this method does nothing.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191407,"byte_end":191449,"line_start":1361,"line_end":1361,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191454,"byte_end":191457,"line_start":1362,"line_end":1362,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191462,"byte_end":191476,"line_start":1363,"line_end":1363,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191481,"byte_end":191484,"line_start":1364,"line_end":1364,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191489,"byte_end":191496,"line_start":1365,"line_end":1365,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191501,"byte_end":191542,"line_start":1366,"line_end":1366,"column_start":5,"column_end":46}},{"value":"/ # fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191547,"byte_end":191564,"line_start":1367,"line_end":1367,"column_start":5,"column_end":22}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrixMut};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191569,"byte_end":191619,"line_start":1368,"line_end":1368,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191624,"byte_end":191627,"line_start":1369,"line_end":1369,"column_start":5,"column_end":8}},{"value":"/ let mut x = matrix![0, 1;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191632,"byte_end":191661,"line_start":1370,"line_end":1370,"column_start":5,"column_end":34}},{"value":"/                     2, 3;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191666,"byte_end":191695,"line_start":1371,"line_end":1371,"column_start":5,"column_end":34}},{"value":"/                     4, 5];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191700,"byte_end":191730,"line_start":1372,"line_end":1372,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191735,"byte_end":191738,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ x.swap_cols(0, 1);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191743,"byte_end":191765,"line_start":1374,"line_end":1374,"column_start":5,"column_end":27}},{"value":"/ let expected = matrix![1, 0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191770,"byte_end":191802,"line_start":1375,"line_end":1375,"column_start":5,"column_end":37}},{"value":"/                        3, 2;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191807,"byte_end":191839,"line_start":1376,"line_end":1376,"column_start":5,"column_end":37}},{"value":"/                        5, 4];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191844,"byte_end":191877,"line_start":1377,"line_end":1377,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191882,"byte_end":191885,"line_start":1378,"line_end":1378,"column_start":5,"column_end":8}},{"value":"/ assert_matrix_eq!(x, expected);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191890,"byte_end":191925,"line_start":1379,"line_end":1379,"column_start":5,"column_end":40}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191930,"byte_end":191937,"line_start":1380,"line_end":1380,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191942,"byte_end":191949,"line_start":1381,"line_end":1381,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191954,"byte_end":191957,"line_start":1382,"line_end":1382,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191962,"byte_end":191974,"line_start":1383,"line_end":1383,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191979,"byte_end":191982,"line_start":1384,"line_end":1384,"column_start":5,"column_end":8}},{"value":"/ Panics if `a` or `b` are out of bounds.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":191987,"byte_end":192030,"line_start":1385,"line_end":1385,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193155,"byte_end":193167,"line_start":1424,"line_end":1424,"column_start":8,"column_end":20},"name":"col_iter_mut","qualname":"::matrix::base::BaseMatrixMut::col_iter_mut","value":"pub fn col_iter_mut(&mut Self) -> ColsMut<, T>","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Iterate over the mutable columns of the matrix.","sig":null,"attributes":[{"value":"/ Iterate over the mutable columns of the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":192644,"byte_end":192695,"line_start":1404,"line_end":1404,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":192700,"byte_end":192703,"line_start":1405,"line_end":1405,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":192708,"byte_end":192722,"line_start":1406,"line_end":1406,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":192727,"byte_end":192730,"line_start":1407,"line_end":1407,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":192735,"byte_end":192742,"line_start":1408,"line_end":1408,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":192747,"byte_end":192800,"line_start":1409,"line_end":1409,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrixMut};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":192805,"byte_end":192855,"line_start":1410,"line_end":1410,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":192860,"byte_end":192863,"line_start":1411,"line_end":1411,"column_start":5,"column_end":8}},{"value":"/ let mut a = matrix![0, 1;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":192868,"byte_end":192897,"line_start":1412,"line_end":1412,"column_start":5,"column_end":34}},{"value":"/                     2, 3;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":192902,"byte_end":192931,"line_start":1413,"line_end":1413,"column_start":5,"column_end":34}},{"value":"/                     4, 5];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":192936,"byte_end":192966,"line_start":1414,"line_end":1414,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":192971,"byte_end":192974,"line_start":1415,"line_end":1415,"column_start":5,"column_end":8}},{"value":"/ for mut col in a.col_iter_mut() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":192979,"byte_end":193016,"line_start":1416,"line_end":1416,"column_start":5,"column_end":42}},{"value":"/     *col += 1;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193021,"byte_end":193039,"line_start":1417,"line_end":1417,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193044,"byte_end":193049,"line_start":1418,"line_end":1418,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193054,"byte_end":193057,"line_start":1419,"line_end":1419,"column_start":5,"column_end":8}},{"value":"/ // Now contains the range 1..7","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193062,"byte_end":193096,"line_start":1420,"line_end":1420,"column_start":5,"column_end":39}},{"value":"/ println!(\"{}\", a);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193101,"byte_end":193123,"line_start":1421,"line_end":1421,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193128,"byte_end":193135,"line_start":1422,"line_end":1422,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193140,"byte_end":193147,"line_start":1423,"line_end":1423,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193980,"byte_end":193992,"line_start":1455,"line_end":1455,"column_start":8,"column_end":20},"name":"row_iter_mut","qualname":"::matrix::base::BaseMatrixMut::row_iter_mut","value":"pub fn row_iter_mut(&mut Self) -> RowsMut<, T>","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Iterate over the mutable rows of the matrix.","sig":null,"attributes":[{"value":"/ Iterate over the mutable rows of the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193472,"byte_end":193520,"line_start":1435,"line_end":1435,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193525,"byte_end":193528,"line_start":1436,"line_end":1436,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193533,"byte_end":193547,"line_start":1437,"line_end":1437,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193552,"byte_end":193555,"line_start":1438,"line_end":1438,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193560,"byte_end":193567,"line_start":1439,"line_end":1439,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193572,"byte_end":193625,"line_start":1440,"line_end":1440,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrixMut};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193630,"byte_end":193680,"line_start":1441,"line_end":1441,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193685,"byte_end":193688,"line_start":1442,"line_end":1442,"column_start":5,"column_end":8}},{"value":"/ let mut a = matrix![0, 1;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193693,"byte_end":193722,"line_start":1443,"line_end":1443,"column_start":5,"column_end":34}},{"value":"/                     2, 3;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193727,"byte_end":193756,"line_start":1444,"line_end":1444,"column_start":5,"column_end":34}},{"value":"/                     4, 5];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193761,"byte_end":193791,"line_start":1445,"line_end":1445,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193796,"byte_end":193799,"line_start":1446,"line_end":1446,"column_start":5,"column_end":8}},{"value":"/ for mut row in a.row_iter_mut() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193804,"byte_end":193841,"line_start":1447,"line_end":1447,"column_start":5,"column_end":42}},{"value":"/     *row += 1;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193846,"byte_end":193864,"line_start":1448,"line_end":1448,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193869,"byte_end":193874,"line_start":1449,"line_end":1449,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193879,"byte_end":193882,"line_start":1450,"line_end":1450,"column_start":5,"column_end":8}},{"value":"/ // Now contains the range 1..7","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193887,"byte_end":193921,"line_start":1451,"line_end":1451,"column_start":5,"column_end":39}},{"value":"/ println!(\"{}\", a);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193926,"byte_end":193948,"line_start":1452,"line_end":1452,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193953,"byte_end":193960,"line_start":1453,"line_end":1453,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":193965,"byte_end":193972,"line_start":1454,"line_end":1454,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":195292,"byte_end":195305,"line_start":1502,"line_end":1502,"column_start":8,"column_end":21},"name":"diag_iter_mut","qualname":"::matrix::base::BaseMatrixMut::diag_iter_mut","value":"pub fn diag_iter_mut(&mut Self, DiagOffset) -> DiagonalMut<, T, Self>","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Iterate over diagonal entries mutably","sig":null,"attributes":[{"value":"/ Iterate over diagonal entries mutably","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194297,"byte_end":194338,"line_start":1466,"line_end":1466,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194343,"byte_end":194346,"line_start":1467,"line_end":1467,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194351,"byte_end":194365,"line_start":1468,"line_end":1468,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194370,"byte_end":194373,"line_start":1469,"line_end":1469,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194378,"byte_end":194385,"line_start":1470,"line_end":1470,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194390,"byte_end":194431,"line_start":1471,"line_end":1471,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194436,"byte_end":194439,"line_start":1472,"line_end":1472,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194444,"byte_end":194461,"line_start":1473,"line_end":1473,"column_start":5,"column_end":22}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrixMut, DiagOffset};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194466,"byte_end":194528,"line_start":1474,"line_end":1474,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194533,"byte_end":194536,"line_start":1475,"line_end":1475,"column_start":5,"column_end":8}},{"value":"/ let mut a = matrix![0, 1, 2;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194541,"byte_end":194573,"line_start":1476,"line_end":1476,"column_start":5,"column_end":37}},{"value":"/                     3, 4, 5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194578,"byte_end":194610,"line_start":1477,"line_end":1477,"column_start":5,"column_end":37}},{"value":"/                     6, 7, 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194615,"byte_end":194648,"line_start":1478,"line_end":1478,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194653,"byte_end":194656,"line_start":1479,"line_end":1479,"column_start":5,"column_end":8}},{"value":"/ // Increment super diag","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194661,"byte_end":194688,"line_start":1480,"line_end":1480,"column_start":5,"column_end":32}},{"value":"/ for d in a.diag_iter_mut(DiagOffset::Above(1)) {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194693,"byte_end":194745,"line_start":1481,"line_end":1481,"column_start":5,"column_end":57}},{"value":"/     *d = *d + 1;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194750,"byte_end":194770,"line_start":1482,"line_end":1482,"column_start":5,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194775,"byte_end":194780,"line_start":1483,"line_end":1483,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194785,"byte_end":194788,"line_start":1484,"line_end":1484,"column_start":5,"column_end":8}},{"value":"/ // Zero the sub-diagonal (sets 3 and 7 to 0)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194793,"byte_end":194841,"line_start":1485,"line_end":1485,"column_start":5,"column_end":53}},{"value":"/ // Equivalent to `diag_iter(DiagOffset::Below(1))`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194846,"byte_end":194900,"line_start":1486,"line_end":1486,"column_start":5,"column_end":59}},{"value":"/ for sub_d in a.diag_iter_mut(DiagOffset::from(-1)) {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194905,"byte_end":194961,"line_start":1487,"line_end":1487,"column_start":5,"column_end":61}},{"value":"/     *sub_d = 0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194966,"byte_end":194985,"line_start":1488,"line_end":1488,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":194990,"byte_end":194995,"line_start":1489,"line_end":1489,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":195000,"byte_end":195003,"line_start":1490,"line_end":1490,"column_start":5,"column_end":8}},{"value":"/ println!(\"{}\", a);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":195008,"byte_end":195030,"line_start":1491,"line_end":1491,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":195035,"byte_end":195042,"line_start":1492,"line_end":1492,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":195047,"byte_end":195054,"line_start":1493,"line_end":1493,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":195059,"byte_end":195062,"line_start":1494,"line_end":1494,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":195067,"byte_end":195079,"line_start":1495,"line_end":1495,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":195084,"byte_end":195087,"line_start":1496,"line_end":1496,"column_start":5,"column_end":8}},{"value":"/ If using an `Above` or `Below` offset which is","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":195092,"byte_end":195142,"line_start":1497,"line_end":1497,"column_start":5,"column_end":55}},{"value":"/ out-of-bounds this function will panic.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":195147,"byte_end":195190,"line_start":1498,"line_end":1498,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":195195,"byte_end":195198,"line_start":1499,"line_end":1499,"column_start":5,"column_end":8}},{"value":"/ This function will never panic if the `Main` diagonal","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":195203,"byte_end":195260,"line_start":1500,"line_end":1500,"column_start":5,"column_end":62}},{"value":"/ offset is used.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":195265,"byte_end":195284,"line_start":1501,"line_end":1501,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196837,"byte_end":196843,"line_start":1547,"line_end":1547,"column_start":8,"column_end":14},"name":"set_to","qualname":"::matrix::base::BaseMatrixMut::set_to","value":"pub fn set_to<M: BaseMatrix<T>>(Self, M) where T: Copy","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Sets the underlying matrix data to the target data.","sig":null,"attributes":[{"value":"/ Sets the underlying matrix data to the target data.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196225,"byte_end":196280,"line_start":1527,"line_end":1527,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196285,"byte_end":196288,"line_start":1528,"line_end":1528,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196293,"byte_end":196307,"line_start":1529,"line_end":1529,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196312,"byte_end":196315,"line_start":1530,"line_end":1530,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196320,"byte_end":196327,"line_start":1531,"line_end":1531,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrixMut};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196332,"byte_end":196382,"line_start":1532,"line_end":1532,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196387,"byte_end":196390,"line_start":1533,"line_end":1533,"column_start":5,"column_end":8}},{"value":"/ let mut mat = Matrix::<f32>::zeros(4,4);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196395,"byte_end":196439,"line_start":1534,"line_end":1534,"column_start":5,"column_end":49}},{"value":"/ let one_block = Matrix::<f32>::ones(2,2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196444,"byte_end":196489,"line_start":1535,"line_end":1535,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196494,"byte_end":196497,"line_start":1536,"line_end":1536,"column_start":5,"column_end":8}},{"value":"/ // Get a mutable slice of the upper left 2x2 block.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196502,"byte_end":196557,"line_start":1537,"line_end":1537,"column_start":5,"column_end":60}},{"value":"/ let mat_block = mat.sub_slice_mut([0,0], 2, 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196562,"byte_end":196613,"line_start":1538,"line_end":1538,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196618,"byte_end":196621,"line_start":1539,"line_end":1539,"column_start":5,"column_end":8}},{"value":"/ // Set the upper left 2x2 block to be ones.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196626,"byte_end":196673,"line_start":1540,"line_end":1540,"column_start":5,"column_end":52}},{"value":"/ mat_block.set_to(one_block);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196678,"byte_end":196710,"line_start":1541,"line_end":1541,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196715,"byte_end":196722,"line_start":1542,"line_end":1542,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196727,"byte_end":196730,"line_start":1543,"line_end":1543,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196735,"byte_end":196747,"line_start":1544,"line_end":1544,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196752,"byte_end":196755,"line_start":1545,"line_end":1545,"column_start":5,"column_end":8}},{"value":"/ Panics if the dimensions of `self` and `target` are not the same.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":196760,"byte_end":196829,"line_start":1546,"line_end":1546,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197832,"byte_end":197837,"line_start":1579,"line_end":1579,"column_start":8,"column_end":13},"name":"apply","qualname":"::matrix::base::BaseMatrixMut::apply","value":"pub fn apply(Self, &Fn(T) -> T) -> Self where T: Copy","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Applies a function to each element in the matrix.","sig":null,"attributes":[{"value":"/ Applies a function to each element in the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197354,"byte_end":197407,"line_start":1560,"line_end":1560,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197412,"byte_end":197415,"line_start":1561,"line_end":1561,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197420,"byte_end":197434,"line_start":1562,"line_end":1562,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197439,"byte_end":197442,"line_start":1563,"line_end":1563,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197447,"byte_end":197454,"line_start":1564,"line_end":1564,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197459,"byte_end":197512,"line_start":1565,"line_end":1565,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrixMut};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197517,"byte_end":197567,"line_start":1566,"line_end":1566,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197572,"byte_end":197575,"line_start":1567,"line_end":1567,"column_start":5,"column_end":8}},{"value":"/ fn add_two(a: f64) -> f64 {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197580,"byte_end":197611,"line_start":1568,"line_end":1568,"column_start":5,"column_end":36}},{"value":"/     a + 2f64","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197616,"byte_end":197632,"line_start":1569,"line_end":1569,"column_start":5,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197637,"byte_end":197642,"line_start":1570,"line_end":1570,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197647,"byte_end":197650,"line_start":1571,"line_end":1571,"column_start":5,"column_end":8}},{"value":"/ let a = Matrix::new(2, 2, vec![0.;4]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197655,"byte_end":197697,"line_start":1572,"line_end":1572,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197702,"byte_end":197705,"line_start":1573,"line_end":1573,"column_start":5,"column_end":8}},{"value":"/ let b = a.apply(&add_two);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197710,"byte_end":197740,"line_start":1574,"line_end":1574,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197745,"byte_end":197748,"line_start":1575,"line_end":1575,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b, matrix![2.0, 2.0; 2.0, 2.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197753,"byte_end":197800,"line_start":1576,"line_end":1576,"column_start":5,"column_end":52}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197805,"byte_end":197812,"line_start":1577,"line_end":1577,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197817,"byte_end":197824,"line_start":1578,"line_end":1578,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":198313,"byte_end":198325,"line_start":1598,"line_end":1598,"column_start":8,"column_end":20},"name":"split_at_mut","qualname":"::matrix::base::BaseMatrixMut::split_at_mut","value":"pub fn split_at_mut(&mut Self, usize, Axes)\n-> (MatrixSliceMut<, T>, MatrixSliceMut<, T>)","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Split the matrix at the specified axis returning two `MatrixSliceMut`s.","sig":null,"attributes":[{"value":"/ Split the matrix at the specified axis returning two `MatrixSliceMut`s.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":197999,"byte_end":198074,"line_start":1588,"line_end":1588,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":198079,"byte_end":198082,"line_start":1589,"line_end":1589,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":198087,"byte_end":198101,"line_start":1590,"line_end":1590,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":198106,"byte_end":198109,"line_start":1591,"line_end":1591,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":198114,"byte_end":198121,"line_start":1592,"line_end":1592,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::{Axes, Matrix, BaseMatrixMut};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":198126,"byte_end":198182,"line_start":1593,"line_end":1593,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":198187,"byte_end":198190,"line_start":1594,"line_end":1594,"column_start":5,"column_end":8}},{"value":"/ let mut a = Matrix::new(3,3, vec![2.0; 9]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":198195,"byte_end":198242,"line_start":1595,"line_end":1595,"column_start":5,"column_end":52}},{"value":"/ let (b, c) = a.split_at_mut(1, Axes::Col);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":198247,"byte_end":198293,"line_start":1596,"line_end":1596,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":198298,"byte_end":198305,"line_start":1597,"line_end":1597,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":200791,"byte_end":200804,"line_start":1650,"line_end":1650,"column_start":8,"column_end":21},"name":"sub_slice_mut","qualname":"::matrix::base::BaseMatrixMut::sub_slice_mut","value":"pub fn sub_slice_mut<'a>(&mut Self, [usize; ], usize, usize) -> MatrixSliceMut\nwhere T: 'a","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Produce a `MatrixSliceMut` from an existing matrix.","sig":null,"attributes":[{"value":"/ Produce a `MatrixSliceMut` from an existing matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":200388,"byte_end":200443,"line_start":1639,"line_end":1639,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":200448,"byte_end":200451,"line_start":1640,"line_end":1640,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":200456,"byte_end":200470,"line_start":1641,"line_end":1641,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":200475,"byte_end":200478,"line_start":1642,"line_end":1642,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":200483,"byte_end":200490,"line_start":1643,"line_end":1643,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::{Matrix, MatrixSliceMut, BaseMatrixMut};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":200495,"byte_end":200561,"line_start":1644,"line_end":1644,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":200566,"byte_end":200569,"line_start":1645,"line_end":1645,"column_start":5,"column_end":8}},{"value":"/ let mut a = Matrix::new(3,3, (0..9).collect::<Vec<usize>>());","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":200574,"byte_end":200639,"line_start":1646,"line_end":1646,"column_start":5,"column_end":70}},{"value":"/ let mut slice = MatrixSliceMut::from_matrix(&mut a, [1,1], 2, 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":200644,"byte_end":200713,"line_start":1647,"line_end":1647,"column_start":5,"column_end":74}},{"value":"/ let new_slice = slice.sub_slice_mut([0,0], 1, 1);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":200718,"byte_end":200771,"line_start":1648,"line_end":1648,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":200776,"byte_end":200783,"line_start":1649,"line_end":1649,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215138,"byte_end":215141,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<Matrix<T>>::new","value":"pub fn new<U: Into<Vec<T>>>(usize, usize, U) -> Matrix<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructor for Matrix struct.","sig":null,"attributes":[{"value":"/ Constructor for Matrix struct.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":214677,"byte_end":214711,"line_start":13,"line_end":13,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":214716,"byte_end":214719,"line_start":14,"line_end":14,"column_start":5,"column_end":8}},{"value":"/ Requires both the row and column dimensions.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":214724,"byte_end":214772,"line_start":15,"line_end":15,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":214777,"byte_end":214780,"line_start":16,"line_end":16,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":214785,"byte_end":214799,"line_start":17,"line_end":17,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":214804,"byte_end":214807,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":214812,"byte_end":214819,"line_start":19,"line_end":19,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":214824,"byte_end":214871,"line_start":20,"line_end":20,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":214876,"byte_end":214879,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ let mat = Matrix::new(2,2, vec![1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":214884,"byte_end":214941,"line_start":22,"line_end":22,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":214946,"byte_end":214949,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(mat.rows(), 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":214954,"byte_end":214984,"line_start":24,"line_end":24,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(mat.cols(), 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":214989,"byte_end":215019,"line_start":25,"line_end":25,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215024,"byte_end":215031,"line_start":26,"line_end":26,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215036,"byte_end":215039,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215044,"byte_end":215056,"line_start":28,"line_end":28,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215061,"byte_end":215064,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ - The input data does not match the given dimensions.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215069,"byte_end":215126,"line_start":30,"line_end":30,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":216425,"byte_end":216432,"line_start":70,"line_end":70,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<Matrix<T>>::from_fn","value":"pub fn from_fn<F>(usize, usize, F) -> Matrix<T> where F: FnMut(usize, usize)\n-> T","parent":null,"children":[],"decl_id":null,"docs":" Constructor for Matrix struct that takes a function `f`\n and constructs a new matrix such that `A_ij = f(i, j)`,\n where `i` is the row index and `j` the column index.","sig":null,"attributes":[{"value":"/ Constructor for Matrix struct that takes a function `f`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215465,"byte_end":215524,"line_start":43,"line_end":43,"column_start":5,"column_end":64}},{"value":"/ and constructs a new matrix such that `A_ij = f(i, j)`,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215529,"byte_end":215588,"line_start":44,"line_end":44,"column_start":5,"column_end":64}},{"value":"/ where `i` is the row index and `j` the column index.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215593,"byte_end":215649,"line_start":45,"line_end":45,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215654,"byte_end":215657,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ Requires both the row and column dimensions","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215662,"byte_end":215709,"line_start":47,"line_end":47,"column_start":5,"column_end":52}},{"value":"/ as well as a generating function.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215714,"byte_end":215751,"line_start":48,"line_end":48,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215756,"byte_end":215759,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215764,"byte_end":215778,"line_start":50,"line_end":50,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215783,"byte_end":215786,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215791,"byte_end":215798,"line_start":52,"line_end":52,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::{Matrix, BaseMatrix};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215803,"byte_end":215850,"line_start":53,"line_end":53,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215855,"byte_end":215858,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ // Let's assume you have an array of \"things\" for","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215863,"byte_end":215916,"line_start":55,"line_end":55,"column_start":5,"column_end":58}},{"value":"/ // which you want to generate a distance matrix:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215921,"byte_end":215973,"line_start":56,"line_end":56,"column_start":5,"column_end":57}},{"value":"/ let things: [i32; 3] = [1, 2, 3];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":215978,"byte_end":216015,"line_start":57,"line_end":57,"column_start":5,"column_end":42}},{"value":"/ let distances: Matrix<f64> = Matrix::from_fn(things.len(), things.len(), |col, row| {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":216020,"byte_end":216109,"line_start":58,"line_end":58,"column_start":5,"column_end":94}},{"value":"/     (things[col] - things[row]).abs().into()","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":216114,"byte_end":216162,"line_start":59,"line_end":59,"column_start":5,"column_end":53}},{"value":"/ });","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":216167,"byte_end":216174,"line_start":60,"line_end":60,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":216179,"byte_end":216182,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(distances.rows(), 3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":216187,"byte_end":216223,"line_start":62,"line_end":62,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(distances.cols(), 3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":216228,"byte_end":216264,"line_start":63,"line_end":63,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(distances.data(), &vec![","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":216269,"byte_end":216308,"line_start":64,"line_end":64,"column_start":5,"column_end":44}},{"value":"/     0.0, 1.0, 2.0,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":216313,"byte_end":216335,"line_start":65,"line_end":65,"column_start":5,"column_end":27}},{"value":"/     1.0, 0.0, 1.0,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":216340,"byte_end":216362,"line_start":66,"line_end":66,"column_start":5,"column_end":27}},{"value":"/     2.0, 1.0, 0.0,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":216367,"byte_end":216389,"line_start":67,"line_end":67,"column_start":5,"column_end":27}},{"value":"/ ]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":216394,"byte_end":216401,"line_start":68,"line_end":68,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":216406,"byte_end":216413,"line_start":69,"line_end":69,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":216835,"byte_end":216839,"line_start":83,"line_end":83,"column_start":12,"column_end":16},"name":"data","qualname":"<Matrix<T>>::data","value":"pub fn data(&Self) -> &Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a non-mutable reference to the underlying data.\n","sig":null,"attributes":[{"value":"/ Returns a non-mutable reference to the underlying data.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":216764,"byte_end":216823,"line_start":82,"line_end":82,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":216953,"byte_end":216961,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"mut_data","qualname":"<Matrix<T>>::mut_data","value":"pub fn mut_data(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable slice of the underlying data.\n","sig":null,"attributes":[{"value":"/ Returns a mutable slice of the underlying data.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":216890,"byte_end":216941,"line_start":87,"line_end":87,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217085,"byte_end":217093,"line_start":93,"line_end":93,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<Matrix<T>>::into_vec","value":"pub fn into_vec(Self) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the Matrix and returns the Vec of data.\n","sig":null,"attributes":[{"value":"/ Consumes the Matrix and returns the Vec of data.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217021,"byte_end":217073,"line_start":92,"line_end":92,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217439,"byte_end":217444,"line_start":110,"line_end":110,"column_start":12,"column_end":17},"name":"zeros","qualname":"<Matrix<T>>::zeros","value":"pub fn zeros(usize, usize) -> Matrix<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs matrix of all zeros.","sig":null,"attributes":[{"value":"/ Constructs matrix of all zeros.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217177,"byte_end":217212,"line_start":99,"line_end":99,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217217,"byte_end":217220,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Requires both the row and the column dimensions.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217225,"byte_end":217277,"line_start":101,"line_end":101,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217282,"byte_end":217285,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217290,"byte_end":217304,"line_start":103,"line_end":103,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217309,"byte_end":217312,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217317,"byte_end":217324,"line_start":105,"line_end":105,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217329,"byte_end":217362,"line_start":106,"line_end":106,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217367,"byte_end":217370,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ let mat = Matrix::<f64>::zeros(2,3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217375,"byte_end":217415,"line_start":108,"line_end":108,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217420,"byte_end":217427,"line_start":109,"line_end":109,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217891,"byte_end":217900,"line_start":129,"line_end":129,"column_start":12,"column_end":21},"name":"from_diag","qualname":"<Matrix<T>>::from_diag","value":"pub fn from_diag(&[T]) -> Matrix<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs matrix with given diagonal.","sig":null,"attributes":[{"value":"/ Constructs matrix with given diagonal.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217618,"byte_end":217660,"line_start":118,"line_end":118,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217665,"byte_end":217668,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ Requires slice of diagonal elements.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217673,"byte_end":217713,"line_start":120,"line_end":120,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217718,"byte_end":217721,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217726,"byte_end":217740,"line_start":122,"line_end":122,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217745,"byte_end":217748,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217753,"byte_end":217760,"line_start":124,"line_end":124,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217765,"byte_end":217798,"line_start":125,"line_end":125,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217803,"byte_end":217806,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ let mat = Matrix::from_diag(&vec![1.0,2.0,3.0,4.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217811,"byte_end":217867,"line_start":127,"line_end":127,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217872,"byte_end":217879,"line_start":128,"line_end":128,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218545,"byte_end":218549,"line_start":157,"line_end":157,"column_start":12,"column_end":16},"name":"ones","qualname":"<Matrix<T>>::ones","value":"pub fn ones(usize, usize) -> Matrix<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs matrix of all ones.","sig":null,"attributes":[{"value":"/ Constructs matrix of all ones.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218285,"byte_end":218319,"line_start":146,"line_end":146,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218324,"byte_end":218327,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Requires both the row and the column dimensions.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218332,"byte_end":218384,"line_start":148,"line_end":148,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218389,"byte_end":218392,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218397,"byte_end":218411,"line_start":150,"line_end":150,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218416,"byte_end":218419,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218424,"byte_end":218431,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218436,"byte_end":218469,"line_start":153,"line_end":153,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218474,"byte_end":218477,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ let mat = Matrix::<f64>::ones(2,3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218482,"byte_end":218521,"line_start":155,"line_end":155,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218526,"byte_end":218533,"line_start":156,"line_end":156,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219009,"byte_end":219017,"line_start":178,"line_end":178,"column_start":12,"column_end":20},"name":"identity","qualname":"<Matrix<T>>::identity","value":"pub fn identity(usize) -> Matrix<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs the identity matrix.","sig":null,"attributes":[{"value":"/ Constructs the identity matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218764,"byte_end":218799,"line_start":167,"line_end":167,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218804,"byte_end":218807,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ Requires the size of the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218812,"byte_end":218848,"line_start":169,"line_end":169,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218853,"byte_end":218856,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218861,"byte_end":218875,"line_start":171,"line_end":171,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218880,"byte_end":218883,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218888,"byte_end":218895,"line_start":173,"line_end":173,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218900,"byte_end":218933,"line_start":174,"line_end":174,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218938,"byte_end":218941,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ let I = Matrix::<f64>::identity(4);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218946,"byte_end":218985,"line_start":176,"line_end":176,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218990,"byte_end":218997,"line_start":177,"line_end":177,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":220019,"byte_end":220023,"line_start":217,"line_end":217,"column_start":12,"column_end":16},"name":"mean","qualname":"<Matrix<T>>::mean","value":"pub fn mean(&Self, Axes) -> Vector<T>","parent":null,"children":[],"decl_id":null,"docs":" The mean of the matrix along the specified axis.","sig":null,"attributes":[{"value":"/ The mean of the matrix along the specified axis.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219349,"byte_end":219401,"line_start":194,"line_end":194,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219406,"byte_end":219409,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ - Axis Row - Arithmetic mean of rows.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219414,"byte_end":219455,"line_start":196,"line_end":196,"column_start":5,"column_end":46}},{"value":"/ - Axis Col - Arithmetic mean of columns.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219460,"byte_end":219504,"line_start":197,"line_end":197,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219509,"byte_end":219512,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Calling `mean()` on an empty matrix will return an empty matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219517,"byte_end":219585,"line_start":199,"line_end":199,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219590,"byte_end":219593,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219598,"byte_end":219612,"line_start":201,"line_end":201,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219617,"byte_end":219620,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219625,"byte_end":219632,"line_start":203,"line_end":203,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219637,"byte_end":219690,"line_start":204,"line_end":204,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, Axes};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219695,"byte_end":219736,"line_start":205,"line_end":205,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219741,"byte_end":219744,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219749,"byte_end":219778,"line_start":207,"line_end":207,"column_start":5,"column_end":34}},{"value":"/                 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219783,"byte_end":219813,"line_start":208,"line_end":208,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219818,"byte_end":219821,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ let c = a.mean(Axes::Row);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219826,"byte_end":219856,"line_start":210,"line_end":210,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(c, vector![2.0, 3.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219861,"byte_end":219898,"line_start":211,"line_end":211,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219903,"byte_end":219906,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ let d = a.mean(Axes::Col);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219911,"byte_end":219941,"line_start":213,"line_end":213,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(d, vector![1.5, 3.5]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219946,"byte_end":219983,"line_start":214,"line_end":214,"column_start":5,"column_end":42}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219988,"byte_end":219995,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":220000,"byte_end":220007,"line_start":216,"line_end":216,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":221325,"byte_end":221333,"line_start":263,"line_end":263,"column_start":12,"column_end":20},"name":"variance","qualname":"<Matrix<T>>::variance","value":"pub fn variance(&Self, Axes) -> Result<Vector<T>, Error>","parent":null,"children":[],"decl_id":null,"docs":" The variance of the matrix along the specified axis.","sig":null,"attributes":[{"value":"/ The variance of the matrix along the specified axis.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":220605,"byte_end":220661,"line_start":238,"line_end":238,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":220666,"byte_end":220669,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ - Axis Row - Sample variance of rows.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":220674,"byte_end":220715,"line_start":240,"line_end":240,"column_start":5,"column_end":46}},{"value":"/ - Axis Col - Sample variance of columns.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":220720,"byte_end":220764,"line_start":241,"line_end":241,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":220769,"byte_end":220772,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":220777,"byte_end":220791,"line_start":243,"line_end":243,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":220796,"byte_end":220799,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":220804,"byte_end":220811,"line_start":245,"line_end":245,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":220816,"byte_end":220869,"line_start":246,"line_end":246,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::{Matrix, Axes};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":220874,"byte_end":220915,"line_start":247,"line_end":247,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":220920,"byte_end":220923,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":220928,"byte_end":220957,"line_start":249,"line_end":249,"column_start":5,"column_end":34}},{"value":"/                 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":220962,"byte_end":220992,"line_start":250,"line_end":250,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":220997,"byte_end":221000,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ let c = a.variance(Axes::Row).unwrap();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":221005,"byte_end":221048,"line_start":252,"line_end":252,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(c, vector![2.0, 2.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":221053,"byte_end":221090,"line_start":253,"line_end":253,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":221095,"byte_end":221098,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ let d = a.variance(Axes::Col).unwrap();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":221103,"byte_end":221146,"line_start":255,"line_end":255,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(d, vector![0.5, 0.5]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":221151,"byte_end":221188,"line_start":256,"line_end":256,"column_start":5,"column_end":42}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":221193,"byte_end":221200,"line_start":257,"line_end":257,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":221205,"byte_end":221212,"line_start":258,"line_end":258,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":221217,"byte_end":221220,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":221225,"byte_end":221239,"line_start":260,"line_end":260,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":221244,"byte_end":221247,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ - There are one or fewer row/columns in the working axis.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":221252,"byte_end":221313,"line_start":262,"line_end":262,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223721,"byte_end":223726,"line_start":350,"line_end":350,"column_start":12,"column_end":17},"name":"solve","qualname":"<Matrix<T>>::solve","value":"pub fn solve(Self, Vector<T>) -> Result<Vector<T>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Solves the equation `Ax = y`.","sig":null,"attributes":[{"value":"/ Solves the equation `Ax = y`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":222647,"byte_end":222680,"line_start":314,"line_end":314,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":222685,"byte_end":222688,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ Requires a Vector `y` as input.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":222693,"byte_end":222728,"line_start":316,"line_end":316,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":222733,"byte_end":222736,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ The method performs an LU decomposition internally,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":222741,"byte_end":222796,"line_start":318,"line_end":318,"column_start":5,"column_end":60}},{"value":"/ consuming the matrix in the process. If solving","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":222801,"byte_end":222852,"line_start":319,"line_end":319,"column_start":5,"column_end":56}},{"value":"/ the same system for multiple right-hand sides","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":222857,"byte_end":222906,"line_start":320,"line_end":320,"column_start":5,"column_end":54}},{"value":"/ is desired, see","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":222911,"byte_end":222930,"line_start":321,"line_end":321,"column_start":5,"column_end":24}},{"value":"/ [PartialPivLu](decomposition/struct.PartialPivLu.html).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":222935,"byte_end":222994,"line_start":322,"line_end":322,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":222999,"byte_end":223002,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223007,"byte_end":223021,"line_start":324,"line_end":324,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223026,"byte_end":223029,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223034,"byte_end":223041,"line_start":326,"line_end":326,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223046,"byte_end":223099,"line_start":327,"line_end":327,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223104,"byte_end":223137,"line_start":328,"line_end":328,"column_start":5,"column_end":38}},{"value":"/ use rulinalg::vector::Vector;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223142,"byte_end":223175,"line_start":329,"line_end":329,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223180,"byte_end":223183,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![2.0, 3.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223188,"byte_end":223217,"line_start":331,"line_end":331,"column_start":5,"column_end":34}},{"value":"/                 1.0, 2.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223222,"byte_end":223252,"line_start":332,"line_end":332,"column_start":5,"column_end":35}},{"value":"/ let y = vector![13.0, 8.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223257,"byte_end":223288,"line_start":333,"line_end":333,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223293,"byte_end":223296,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ let x = a.solve(y).unwrap();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223301,"byte_end":223333,"line_start":335,"line_end":335,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223338,"byte_end":223341,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x, vector![2.0, 3.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223346,"byte_end":223383,"line_start":337,"line_end":337,"column_start":5,"column_end":42}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223388,"byte_end":223395,"line_start":338,"line_end":338,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223400,"byte_end":223407,"line_start":339,"line_end":339,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223412,"byte_end":223415,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223420,"byte_end":223432,"line_start":341,"line_end":341,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223437,"byte_end":223440,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ - The matrix column count and vector size are different.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223445,"byte_end":223505,"line_start":343,"line_end":343,"column_start":5,"column_end":65}},{"value":"/ - The matrix is not square.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223510,"byte_end":223541,"line_start":344,"line_end":344,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223546,"byte_end":223549,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223554,"byte_end":223568,"line_start":346,"line_end":346,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223573,"byte_end":223576,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ - The matrix cannot be decomposed into an LUP form to solve.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223581,"byte_end":223645,"line_start":348,"line_end":348,"column_start":5,"column_end":69}},{"value":"/ - There is no valid solution as the matrix is singular.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223650,"byte_end":223709,"line_start":349,"line_end":349,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224566,"byte_end":224573,"line_start":382,"line_end":382,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Matrix<T>>::inverse","value":"pub fn inverse(Self) -> Result<Matrix<T>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Computes the inverse of the matrix.","sig":null,"attributes":[{"value":"/ Computes the inverse of the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223836,"byte_end":223875,"line_start":354,"line_end":354,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223880,"byte_end":223883,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ Internally performs an LU decomposition.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223888,"byte_end":223932,"line_start":356,"line_end":356,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223937,"byte_end":223940,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223945,"byte_end":223959,"line_start":358,"line_end":358,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223964,"byte_end":223967,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223972,"byte_end":223979,"line_start":360,"line_end":360,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":223984,"byte_end":224037,"line_start":361,"line_end":361,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::matrix::Matrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224042,"byte_end":224075,"line_start":362,"line_end":362,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224080,"byte_end":224083,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ let a = matrix![2., 3.;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224088,"byte_end":224115,"line_start":364,"line_end":364,"column_start":5,"column_end":32}},{"value":"/                 1., 2.];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224120,"byte_end":224148,"line_start":365,"line_end":365,"column_start":5,"column_end":33}},{"value":"/ let inv = a.clone().inverse().expect(\"This matrix should have an inverse!\");","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224153,"byte_end":224233,"line_start":366,"line_end":366,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224238,"byte_end":224241,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ let I = a * inv;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224246,"byte_end":224266,"line_start":368,"line_end":368,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224271,"byte_end":224274,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ assert_matrix_eq!(I, matrix![1.0, 0.0; 0.0, 1.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224279,"byte_end":224333,"line_start":370,"line_end":370,"column_start":5,"column_end":59}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224338,"byte_end":224345,"line_start":371,"line_end":371,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224350,"byte_end":224357,"line_start":372,"line_end":372,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224362,"byte_end":224365,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224370,"byte_end":224382,"line_start":374,"line_end":374,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224387,"byte_end":224390,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ - The matrix is not square.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224395,"byte_end":224426,"line_start":376,"line_end":376,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224431,"byte_end":224434,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224439,"byte_end":224453,"line_start":378,"line_end":378,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224458,"byte_end":224461,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ - The matrix could not be LUP decomposed.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224466,"byte_end":224511,"line_start":380,"line_end":380,"column_start":5,"column_end":50}},{"value":"/ - The matrix has zero determinant.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224516,"byte_end":224554,"line_start":381,"line_end":381,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":225076,"byte_end":225079,"line_start":403,"line_end":403,"column_start":12,"column_end":15},"name":"det","qualname":"<Matrix<T>>::det","value":"pub fn det(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the determinant of the matrix.","sig":null,"attributes":[{"value":"/ Computes the determinant of the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224670,"byte_end":224713,"line_start":386,"line_end":386,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224718,"byte_end":224721,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224726,"byte_end":224740,"line_start":388,"line_end":388,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224745,"byte_end":224748,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224753,"byte_end":224760,"line_start":390,"line_end":390,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224765,"byte_end":224818,"line_start":391,"line_end":391,"column_start":5,"column_end":58}},{"value":"/ let a = matrix![1.0, 2.0, 0.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224823,"byte_end":224857,"line_start":392,"line_end":392,"column_start":5,"column_end":39}},{"value":"/                 0.0, 3.0, 4.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224862,"byte_end":224896,"line_start":393,"line_end":393,"column_start":5,"column_end":39}},{"value":"/                 5.0, 1.0, 2.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224901,"byte_end":224936,"line_start":394,"line_end":394,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224941,"byte_end":224944,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ let det = a.det();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224949,"byte_end":224971,"line_start":396,"line_end":396,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224976,"byte_end":224983,"line_start":397,"line_end":397,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":224988,"byte_end":224995,"line_start":398,"line_end":398,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":225000,"byte_end":225003,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":225008,"byte_end":225020,"line_start":400,"line_end":400,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":225025,"byte_end":225028,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ - The matrix is not square.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":225033,"byte_end":225064,"line_start":402,"line_end":402,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":327554,"byte_end":327565,"line_start":15,"line_end":15,"column_start":12,"column_end":23},"name":"from_matrix","qualname":"<MatrixSlice>::from_matrix","value":"pub fn from_matrix(&'a Matrix<T>, [usize; ], usize, usize) -> MatrixSlice<, T>","parent":null,"children":[],"decl_id":null,"docs":" Produce a `MatrixSlice` from a `Matrix`","sig":null,"attributes":[{"value":"/ Produce a `MatrixSlice` from a `Matrix`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":327250,"byte_end":327293,"line_start":5,"line_end":5,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":327298,"byte_end":327301,"line_start":6,"line_end":6,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":327306,"byte_end":327320,"line_start":7,"line_end":7,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":327325,"byte_end":327328,"line_start":8,"line_end":8,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":327333,"byte_end":327340,"line_start":9,"line_end":9,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::{Matrix, MatrixSlice};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":327345,"byte_end":327393,"line_start":10,"line_end":10,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":327398,"byte_end":327401,"line_start":11,"line_end":11,"column_start":5,"column_end":8}},{"value":"/ let a = Matrix::new(3,3, (0..9).collect::<Vec<usize>>());","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":327406,"byte_end":327467,"line_start":12,"line_end":12,"column_start":5,"column_end":66}},{"value":"/ let slice = MatrixSlice::from_matrix(&a, [1,1], 2, 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":327472,"byte_end":327530,"line_start":13,"line_end":13,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":327535,"byte_end":327542,"line_start":14,"line_end":14,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1304},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":329180,"byte_end":329194,"line_start":59,"line_end":59,"column_start":19,"column_end":33},"name":"from_raw_parts","qualname":"<MatrixSlice>::from_raw_parts","value":"pub unsafe fn from_raw_parts(*const T, usize, usize, usize) -> MatrixSlice","parent":null,"children":[],"decl_id":null,"docs":" Creates a `MatrixSlice` from raw parts.","sig":null,"attributes":[{"value":"/ Creates a `MatrixSlice` from raw parts.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328266,"byte_end":328309,"line_start":35,"line_end":35,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328314,"byte_end":328317,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328322,"byte_end":328336,"line_start":37,"line_end":37,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328341,"byte_end":328344,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328349,"byte_end":328356,"line_start":39,"line_end":39,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::MatrixSlice;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328361,"byte_end":328399,"line_start":40,"line_end":40,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328404,"byte_end":328407,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ let mut a = vec![4.0; 16];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328412,"byte_end":328442,"line_start":42,"line_end":42,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328447,"byte_end":328450,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328455,"byte_end":328467,"line_start":44,"line_end":44,"column_start":5,"column_end":17}},{"value":"/     // Create a matrix slice with 3 rows, and 3 cols","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328472,"byte_end":328528,"line_start":45,"line_end":45,"column_start":5,"column_end":61}},{"value":"/     // The row stride of 4 specifies the distance between the start of each row in the data.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328533,"byte_end":328629,"line_start":46,"line_end":46,"column_start":5,"column_end":101}},{"value":"/     let b = MatrixSlice::from_raw_parts(a.as_ptr(), 3, 3, 4);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328634,"byte_end":328699,"line_start":47,"line_end":47,"column_start":5,"column_end":70}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328704,"byte_end":328709,"line_start":48,"line_end":48,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328714,"byte_end":328721,"line_start":49,"line_end":49,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328726,"byte_end":328729,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328734,"byte_end":328746,"line_start":51,"line_end":51,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328751,"byte_end":328754,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ The pointer must be followed by a contiguous slice of data larger than `row_stride * rows`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328759,"byte_end":328854,"line_start":53,"line_end":53,"column_start":5,"column_end":100}},{"value":"/ If not then other operations will produce undefined behaviour.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328859,"byte_end":328925,"line_start":54,"line_end":54,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328930,"byte_end":328933,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ Additionally `cols` should be less than the `row_stride`. It is possible to use this","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":328938,"byte_end":329026,"line_start":56,"line_end":56,"column_start":5,"column_end":93}},{"value":"/ function safely whilst violating this condition. So long as","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":329031,"byte_end":329094,"line_start":57,"line_end":57,"column_start":5,"column_end":68}},{"value":"/ `max(cols, row_stride) * rows` is less than the data size.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":329099,"byte_end":329161,"line_start":58,"line_end":58,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":329969,"byte_end":329980,"line_start":85,"line_end":85,"column_start":12,"column_end":23},"name":"from_matrix","qualname":"<MatrixSliceMut>::from_matrix","value":"pub fn from_matrix(&'a mut Matrix<T>, [usize; ], usize, usize)\n-> MatrixSliceMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Produce a `MatrixSliceMut` from a mutable `Matrix`","sig":null,"attributes":[{"value":"/ Produce a `MatrixSliceMut` from a mutable `Matrix`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":329640,"byte_end":329694,"line_start":75,"line_end":75,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":329699,"byte_end":329702,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":329707,"byte_end":329721,"line_start":77,"line_end":77,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":329726,"byte_end":329729,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":329734,"byte_end":329741,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::{Matrix, MatrixSliceMut};","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":329746,"byte_end":329797,"line_start":80,"line_end":80,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":329802,"byte_end":329805,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ let mut a = Matrix::new(3,3, (0..9).collect::<Vec<usize>>());","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":329810,"byte_end":329875,"line_start":82,"line_end":82,"column_start":5,"column_end":70}},{"value":"/ let slice = MatrixSliceMut::from_matrix(&mut a, [1,1], 2, 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":329880,"byte_end":329945,"line_start":83,"line_end":83,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":329950,"byte_end":329957,"line_start":84,"line_end":84,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":331671,"byte_end":331685,"line_start":132,"line_end":132,"column_start":19,"column_end":33},"name":"from_raw_parts","qualname":"<MatrixSliceMut>::from_raw_parts","value":"pub unsafe fn from_raw_parts(*mut T, usize, usize, usize) -> MatrixSliceMut","parent":null,"children":[],"decl_id":null,"docs":" Creates a `MatrixSliceMut` from raw parts.","sig":null,"attributes":[{"value":"/ Creates a `MatrixSliceMut` from raw parts.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":330736,"byte_end":330782,"line_start":108,"line_end":108,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":330787,"byte_end":330790,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":330795,"byte_end":330809,"line_start":110,"line_end":110,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":330814,"byte_end":330817,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":330822,"byte_end":330829,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::matrix::MatrixSliceMut;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":330834,"byte_end":330875,"line_start":113,"line_end":113,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":330880,"byte_end":330883,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ let mut a = vec![4.0; 16];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":330888,"byte_end":330918,"line_start":115,"line_end":115,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":330923,"byte_end":330926,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":330931,"byte_end":330943,"line_start":117,"line_end":117,"column_start":5,"column_end":17}},{"value":"/     // Create a mutable matrix slice with 3 rows, and 3 cols","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":330948,"byte_end":331012,"line_start":118,"line_end":118,"column_start":5,"column_end":69}},{"value":"/     // The row stride of 4 specifies the distance between the start of each row in the data.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":331017,"byte_end":331113,"line_start":119,"line_end":119,"column_start":5,"column_end":101}},{"value":"/     let b = MatrixSliceMut::from_raw_parts(a.as_mut_ptr(), 3, 3, 4);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":331118,"byte_end":331190,"line_start":120,"line_end":120,"column_start":5,"column_end":77}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":331195,"byte_end":331200,"line_start":121,"line_end":121,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":331205,"byte_end":331212,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":331217,"byte_end":331220,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":331225,"byte_end":331237,"line_start":124,"line_end":124,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":331242,"byte_end":331245,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ The pointer must be followed by a contiguous slice of data larger than `row_stride * rows`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":331250,"byte_end":331345,"line_start":126,"line_end":126,"column_start":5,"column_end":100}},{"value":"/ If not then other operations will produce undefined behaviour.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":331350,"byte_end":331416,"line_start":127,"line_end":127,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":331421,"byte_end":331424,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ Additionally `cols` should be less than the `row_stride`. It is possible to use this","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":331429,"byte_end":331517,"line_start":129,"line_end":129,"column_start":5,"column_end":93}},{"value":"/ function safely whilst violating this condition. So long as","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":331522,"byte_end":331585,"line_start":130,"line_end":130,"column_start":5,"column_end":68}},{"value":"/ `max(cols, row_stride) * rows` is less than the data size.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":331590,"byte_end":331652,"line_start":131,"line_end":131,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":3482},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":338696,"byte_end":338713,"line_start":103,"line_end":103,"column_start":12,"column_end":29},"name":"PermutationMatrix","qualname":"::matrix::permutation_matrix::PermutationMatrix","value":"PermutationMatrix {  }","parent":null,"children":[{"krate":0,"index":3484},{"krate":0,"index":3485}],"decl_id":null,"docs":" An efficient implementation of a permutation matrix.","sig":null,"attributes":[{"value":"/ An efficient implementation of a permutation matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334357,"byte_end":334413,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334414,"byte_end":334417,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334418,"byte_end":334432,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334433,"byte_end":334440,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334441,"byte_end":334494,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"/ use rulinalg::matrix::PermutationMatrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334495,"byte_end":334539,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334540,"byte_end":334543,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ let ref x = matrix![1, 2, 3;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334544,"byte_end":334576,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/                     4, 5, 6;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334577,"byte_end":334609,"line_start":17,"line_end":17,"column_start":1,"column_end":33}},{"value":"/                     7, 8, 9];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334610,"byte_end":334643,"line_start":18,"line_end":18,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334644,"byte_end":334647,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // Swap the two first rows of x by left-multiplying a permutation matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334648,"byte_end":334724,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/ let expected = matrix![4, 5, 6;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334725,"byte_end":334760,"line_start":21,"line_end":21,"column_start":1,"column_end":36}},{"value":"/                        1, 2, 3;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334761,"byte_end":334796,"line_start":22,"line_end":22,"column_start":1,"column_end":36}},{"value":"/                        7, 8, 9];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334797,"byte_end":334833,"line_start":23,"line_end":23,"column_start":1,"column_end":37}},{"value":"/ let mut p = PermutationMatrix::identity(3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334834,"byte_end":334881,"line_start":24,"line_end":24,"column_start":1,"column_end":48}},{"value":"/ p.swap_rows(0, 1);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334882,"byte_end":334904,"line_start":25,"line_end":25,"column_start":1,"column_end":23}},{"value":"/ assert_eq!(expected, p * x);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334905,"byte_end":334937,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334938,"byte_end":334941,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ // Swap the two last columns of x by right-multiplying a permutation matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":334942,"byte_end":335021,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ let expected = matrix![1, 3, 2;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335022,"byte_end":335057,"line_start":29,"line_end":29,"column_start":1,"column_end":36}},{"value":"/                        4, 6, 5;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335058,"byte_end":335093,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"/                        7, 9, 8];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335094,"byte_end":335130,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"/ let mut p = PermutationMatrix::identity(3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335131,"byte_end":335178,"line_start":32,"line_end":32,"column_start":1,"column_end":48}},{"value":"/ p.swap_rows(1, 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335179,"byte_end":335201,"line_start":33,"line_end":33,"column_start":1,"column_end":23}},{"value":"/ assert_eq!(expected, x * p);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335202,"byte_end":335234,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335235,"byte_end":335238,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // One can also construct the same permutation matrix directly","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335239,"byte_end":335305,"line_start":36,"line_end":36,"column_start":1,"column_end":67}},{"value":"/ // from an array representation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335306,"byte_end":335342,"line_start":37,"line_end":37,"column_start":1,"column_end":37}},{"value":"/ let ref p = PermutationMatrix::from_array(vec![0, 2, 1]).unwrap();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335343,"byte_end":335413,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(expected, x * p);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335414,"byte_end":335446,"line_start":39,"line_end":39,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335447,"byte_end":335450,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ // One may also obtain a full matrix representation of the permutation","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335451,"byte_end":335525,"line_start":41,"line_end":41,"column_start":1,"column_end":75}},{"value":"/ assert_eq!(p.as_matrix(), matrix![1, 0, 0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335526,"byte_end":335572,"line_start":42,"line_end":42,"column_start":1,"column_end":47}},{"value":"/                                   0, 0, 1;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335573,"byte_end":335619,"line_start":43,"line_end":43,"column_start":1,"column_end":47}},{"value":"/                                   0, 1, 0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335620,"byte_end":335668,"line_start":44,"line_end":44,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335669,"byte_end":335672,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ // The inverse of a permutation matrix can efficiently be obtained","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335673,"byte_end":335743,"line_start":46,"line_end":46,"column_start":1,"column_end":71}},{"value":"/ let p_inv = p.inverse();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335744,"byte_end":335772,"line_start":47,"line_end":47,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335773,"byte_end":335776,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ // And permutations can be composed through multiplication","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335777,"byte_end":335839,"line_start":49,"line_end":49,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(p * p_inv, PermutationMatrix::identity(3));","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335840,"byte_end":335898,"line_start":50,"line_end":50,"column_start":1,"column_end":59}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335899,"byte_end":335906,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335907,"byte_end":335914,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335915,"byte_end":335918,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Rationale and complexity","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335919,"byte_end":335949,"line_start":54,"line_end":54,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335950,"byte_end":335953,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ A [permutation matrix](https://en.wikipedia.org/wiki/Permutation_matrix)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":335954,"byte_end":336030,"line_start":56,"line_end":56,"column_start":1,"column_end":77}},{"value":"/ is a very special kind of matrix. It is essentially a matrix representation","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":336031,"byte_end":336110,"line_start":57,"line_end":57,"column_start":1,"column_end":80}},{"value":"/ of the more general concept of a permutation. That is, an `n` x `n` permutation","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":336111,"byte_end":336194,"line_start":58,"line_end":58,"column_start":1,"column_end":84}},{"value":"/ matrix corresponds to a permutation of ordered sets whose cardinality is `n`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":336195,"byte_end":336276,"line_start":59,"line_end":59,"column_start":1,"column_end":82}},{"value":"/ In particular, given an `m` x `n` matrix `A` and an `m` x `m` permutation","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":336277,"byte_end":336354,"line_start":60,"line_end":60,"column_start":1,"column_end":78}},{"value":"/ matrix `P`, the action of left-multiplying `A` by `P`, `PA`, corresponds","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":336355,"byte_end":336431,"line_start":61,"line_end":61,"column_start":1,"column_end":77}},{"value":"/ to permuting the rows of `A` by the given permutation represented by `P`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":336432,"byte_end":336509,"line_start":62,"line_end":62,"column_start":1,"column_end":78}},{"value":"/ Conversely, right-multiplication corresponds to column permutation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":336510,"byte_end":336581,"line_start":63,"line_end":63,"column_start":1,"column_end":72}},{"value":"/ More precisely, given another permutation matrix `Q` of size `n` x `n`,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":336582,"byte_end":336657,"line_start":64,"line_end":64,"column_start":1,"column_end":76}},{"value":"/ then `AQ` is the corresponding permutation of the columns of `A`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":336658,"byte_end":336727,"line_start":65,"line_end":65,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":336728,"byte_end":336731,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Due to their unique structure, permutation matrices can be much more","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":336732,"byte_end":336804,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/ efficiently represented and applied than general matrices. Recall that","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":336805,"byte_end":336879,"line_start":68,"line_end":68,"column_start":1,"column_end":75}},{"value":"/ for general matrices `X` and `Y` of size `m` x `m` and `n` x `n` respectively,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":336880,"byte_end":336962,"line_start":69,"line_end":69,"column_start":1,"column_end":83}},{"value":"/ the storage of `X` requires O(`m`<sup>2</sup>) memory and the storage of","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":336963,"byte_end":337039,"line_start":70,"line_end":70,"column_start":1,"column_end":77}},{"value":"/ `Y` requires O(`n`<sup>2</sup>) memory. Ignoring for the moment the existence","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337040,"byte_end":337121,"line_start":71,"line_end":71,"column_start":1,"column_end":82}},{"value":"/ of Strassen's matrix multiplication algorithm and more theoretical alternatives,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337122,"byte_end":337206,"line_start":72,"line_end":72,"column_start":1,"column_end":85}},{"value":"/ the multiplication `XA` requires O(`m`<sup>2</sup>`n`) operations, and","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337207,"byte_end":337281,"line_start":73,"line_end":73,"column_start":1,"column_end":75}},{"value":"/ the multiplication `AY` requires O(`m``n`<sup>2</sup>) operations.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337282,"byte_end":337352,"line_start":74,"line_end":74,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337353,"byte_end":337356,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ By contrast, the storage of `P` requires only O(`m`) memory, and","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337357,"byte_end":337425,"line_start":76,"line_end":76,"column_start":1,"column_end":69}},{"value":"/ the storage of `K` requires O(`n`) memory. Moreover, the products","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337426,"byte_end":337495,"line_start":77,"line_end":77,"column_start":1,"column_end":70}},{"value":"/ `PA` and `AK` both require merely O(`mn`) operations.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337496,"byte_end":337553,"line_start":78,"line_end":78,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337554,"byte_end":337557,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337558,"byte_end":337578,"line_start":80,"line_end":80,"column_start":1,"column_end":21}},{"value":"/ A permutation of an ordered set of cardinality *n* is a map of the form","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337579,"byte_end":337654,"line_start":81,"line_end":81,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337655,"byte_end":337658,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337659,"byte_end":337670,"line_start":83,"line_end":83,"column_start":1,"column_end":12}},{"value":"/ p: { 1, ..., n } -> { 1, ..., n }.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337671,"byte_end":337709,"line_start":84,"line_end":84,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337710,"byte_end":337717,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337718,"byte_end":337721,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ That is, for any index `i`, the permutation `p` sends `i` to some","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337722,"byte_end":337791,"line_start":87,"line_end":87,"column_start":1,"column_end":70}},{"value":"/ index `j = p(i)`, and hence the map may be represented as an array of integers","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337792,"byte_end":337874,"line_start":88,"line_end":88,"column_start":1,"column_end":83}},{"value":"/ of length *n*.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337875,"byte_end":337893,"line_start":89,"line_end":89,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337894,"byte_end":337897,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ By convention, an instance of `PermutationMatrix` represents row permutations.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337898,"byte_end":337980,"line_start":91,"line_end":91,"column_start":1,"column_end":83}},{"value":"/ That is, the indices referred to above correspond to *row indices*,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":337981,"byte_end":338052,"line_start":92,"line_end":92,"column_start":1,"column_end":72}},{"value":"/ and the internal representation of a `PermutationMatrix` is an array","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":338053,"byte_end":338125,"line_start":93,"line_end":93,"column_start":1,"column_end":73}},{"value":"/ describing how the permutation sends a row index `i` to a new row index","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":338126,"byte_end":338201,"line_start":94,"line_end":94,"column_start":1,"column_end":76}},{"value":"/ `j` in the permuted matrix. Because of this internal representation, one can only","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":338202,"byte_end":338287,"line_start":95,"line_end":95,"column_start":1,"column_end":86}},{"value":"/ efficiently swap *rows* of a `PermutationMatrix`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":338288,"byte_end":338341,"line_start":96,"line_end":96,"column_start":1,"column_end":54}},{"value":"/ However, keep in mind that while this API only lets one swap individual rows","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":338342,"byte_end":338422,"line_start":97,"line_end":97,"column_start":1,"column_end":81}},{"value":"/ of the permutation matrix itself, the right-multiplication of a general","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":338423,"byte_end":338498,"line_start":98,"line_end":98,"column_start":1,"column_end":76}},{"value":"/ matrix with a permutation matrix will permute the columns of the general matrix,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":338499,"byte_end":338583,"line_start":99,"line_end":99,"column_start":1,"column_end":85}},{"value":"/ and so in practice this restriction is insignificant.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":338584,"byte_end":338641,"line_start":100,"line_end":100,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":338642,"byte_end":338645,"line_start":101,"line_end":101,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3504},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":339146,"byte_end":339150,"line_start":117,"line_end":117,"column_start":5,"column_end":9},"name":"Even","qualname":"::matrix::permutation_matrix::Parity::Even","value":"Parity::Even","parent":{"krate":0,"index":3503},"children":[],"decl_id":null,"docs":" Even parity.\n","sig":null,"attributes":[{"value":"/ Even parity.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":339125,"byte_end":339141,"line_start":116,"line_end":116,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3506},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":339176,"byte_end":339179,"line_start":119,"line_end":119,"column_start":5,"column_end":8},"name":"Odd","qualname":"::matrix::permutation_matrix::Parity::Odd","value":"Parity::Odd","parent":{"krate":0,"index":3503},"children":[],"decl_id":null,"docs":" Odd parity.\n","sig":null,"attributes":[{"value":"/ Odd parity.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":339156,"byte_end":339171,"line_start":118,"line_end":118,"column_start":5,"column_end":20}}]},{"kind":"Enum","id":{"krate":0,"index":3503},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":339112,"byte_end":339118,"line_start":115,"line_end":115,"column_start":10,"column_end":16},"name":"Parity","qualname":"::matrix::permutation_matrix::Parity","value":"pub enum Parity { Even, Odd, }","parent":null,"children":[{"krate":0,"index":3504},{"krate":0,"index":3506}],"decl_id":null,"docs":" Parity is the fact of being even or odd.\n","sig":null,"attributes":[{"value":"/ Parity is the fact of being even or odd.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":339013,"byte_end":339057,"line_start":113,"line_end":113,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":339259,"byte_end":339267,"line_start":124,"line_end":124,"column_start":12,"column_end":20},"name":"identity","qualname":"<PermutationMatrix<T>>::identity","value":"pub fn identity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The identity permutation.\n","sig":null,"attributes":[{"value":"/ The identity permutation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":339218,"byte_end":339247,"line_start":123,"line_end":123,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1341},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":339481,"byte_end":339490,"line_start":132,"line_end":132,"column_start":12,"column_end":21},"name":"swap_rows","qualname":"<PermutationMatrix<T>>::swap_rows","value":"pub fn swap_rows(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps rows i and j in the permutation matrix.\n","sig":null,"attributes":[{"value":"/ Swaps rows i and j in the permutation matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":339420,"byte_end":339469,"line_start":131,"line_end":131,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":339619,"byte_end":339626,"line_start":137,"line_end":137,"column_start":12,"column_end":19},"name":"inverse","qualname":"<PermutationMatrix<T>>::inverse","value":"pub fn inverse(&Self) -> PermutationMatrix<T>","parent":null,"children":[],"decl_id":null,"docs":" The inverse of the permutation matrix.\n","sig":null,"attributes":[{"value":"/ The inverse of the permutation matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":339565,"byte_end":339607,"line_start":136,"line_end":136,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340150,"byte_end":340154,"line_start":154,"line_end":154,"column_start":12,"column_end":16},"name":"size","qualname":"<PermutationMatrix<T>>::size","value":"pub fn size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The size of the permutation matrix.","sig":null,"attributes":[{"value":"/ The size of the permutation matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":339951,"byte_end":339990,"line_start":150,"line_end":150,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":339995,"byte_end":339998,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ A permutation matrix is a square matrix, so `size()` is equal","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340003,"byte_end":340068,"line_start":152,"line_end":152,"column_start":5,"column_end":70}},{"value":"/ to both the number of rows, as well as the number of columns.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340073,"byte_end":340138,"line_start":153,"line_end":153,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340469,"byte_end":340479,"line_start":165,"line_end":165,"column_start":12,"column_end":22},"name":"from_array","qualname":"<PermutationMatrix<T>>::from_array","value":"pub fn from_array<A: Into<Vec<usize>>>(A)\n-> Result<PermutationMatrix<T>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `PermutationMatrix` from an array.","sig":null,"attributes":[{"value":"/ Constructs a `PermutationMatrix` from an array.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340208,"byte_end":340259,"line_start":158,"line_end":158,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340264,"byte_end":340267,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340272,"byte_end":340284,"line_start":160,"line_end":160,"column_start":5,"column_end":17}},{"value":"/ The supplied N-length array must satisfy the following:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340289,"byte_end":340348,"line_start":161,"line_end":161,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340353,"byte_end":340356,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ - Each element must be in the half-open range [0, N).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340361,"byte_end":340418,"line_start":163,"line_end":163,"column_start":5,"column_end":62}},{"value":"/ - Each element must be unique.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340423,"byte_end":340457,"line_start":164,"line_end":164,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1347},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":341587,"byte_end":341607,"line_start":190,"line_end":190,"column_start":19,"column_end":39},"name":"from_array_unchecked","qualname":"<PermutationMatrix<T>>::from_array_unchecked","value":"pub unsafe fn from_array_unchecked<A: Into<Vec<usize>>>(A)\n-> PermutationMatrix<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `PermutationMatrix` from an array, without checking the validity of\n the supplied permutation.","sig":null,"attributes":[{"value":"/ Constructs a `PermutationMatrix` from an array, without checking the validity of","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340736,"byte_end":340820,"line_start":173,"line_end":173,"column_start":5,"column_end":89}},{"value":"/ the supplied permutation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340825,"byte_end":340854,"line_start":174,"line_end":174,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340859,"byte_end":340862,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340867,"byte_end":340879,"line_start":176,"line_end":176,"column_start":5,"column_end":17}},{"value":"/ The supplied N-length array must satisfy the following:","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340884,"byte_end":340943,"line_start":177,"line_end":177,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340948,"byte_end":340951,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ - Each element must be in the half-open range [0, N).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":340956,"byte_end":341013,"line_start":179,"line_end":179,"column_start":5,"column_end":62}},{"value":"/ - Each element must be unique.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":341018,"byte_end":341052,"line_start":180,"line_end":180,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":341057,"byte_end":341060,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ Note that while this function *itself* is technically safe","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":341065,"byte_end":341127,"line_start":182,"line_end":182,"column_start":5,"column_end":67}},{"value":"/ regardless of the input array, passing an incorrect permutation matrix","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":341132,"byte_end":341206,"line_start":183,"line_end":183,"column_start":5,"column_end":79}},{"value":"/ may cause undefined behavior in other methods of `PermutationMatrix`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":341211,"byte_end":341284,"line_start":184,"line_end":184,"column_start":5,"column_end":78}},{"value":"/ As such, it may be difficult to debug. The user is strongly","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":341289,"byte_end":341352,"line_start":185,"line_end":185,"column_start":5,"column_end":68}},{"value":"/ encouraged to use the safe function `from_array`, which for","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":341357,"byte_end":341420,"line_start":186,"line_end":186,"column_start":5,"column_end":68}},{"value":"/ most real world applications only incurs a minor","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":341425,"byte_end":341477,"line_start":187,"line_end":187,"column_start":5,"column_end":57}},{"value":"/ or even insignificant performance hit as a result of the","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":341482,"byte_end":341542,"line_start":188,"line_end":188,"column_start":5,"column_end":65}},{"value":"/ extra validation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":341547,"byte_end":341568,"line_start":189,"line_end":189,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":342253,"byte_end":342260,"line_start":211,"line_end":211,"column_start":12,"column_end":19},"name":"map_row","qualname":"<PermutationMatrix<T>>::map_row","value":"pub fn map_row(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Maps the given row index into the resulting row index in the permuted matrix.","sig":null,"attributes":[{"value":"/ Maps the given row index into the resulting row index in the permuted matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":341810,"byte_end":341891,"line_start":198,"line_end":198,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":341896,"byte_end":341899,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ More specifically, if the permutation sends row `i` to `j`, then","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":341904,"byte_end":341972,"line_start":200,"line_end":200,"column_start":5,"column_end":73}},{"value":"/ `map_row(i)` returns `j`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":341977,"byte_end":342006,"line_start":201,"line_end":201,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":342011,"byte_end":342014,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":342019,"byte_end":342033,"line_start":203,"line_end":203,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":342038,"byte_end":342041,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":342046,"byte_end":342057,"line_start":205,"line_end":205,"column_start":5,"column_end":16}},{"value":"/ use rulinalg::matrix::PermutationMatrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":342062,"byte_end":342106,"line_start":206,"line_end":206,"column_start":5,"column_end":49}},{"value":"/ let mut p = PermutationMatrix::<u32>::identity(3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":342111,"byte_end":342165,"line_start":207,"line_end":207,"column_start":5,"column_end":59}},{"value":"/ p.swap_rows(1, 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":342170,"byte_end":342192,"line_start":208,"line_end":208,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(p.map_row(1), 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":342197,"byte_end":342229,"line_start":209,"line_end":209,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":342234,"byte_end":342241,"line_start":210,"line_end":210,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":342411,"byte_end":342417,"line_start":216,"line_end":216,"column_start":12,"column_end":18},"name":"parity","qualname":"<PermutationMatrix<T>>::parity","value":"pub fn parity(Self) -> Parity","parent":null,"children":[],"decl_id":null,"docs":" Computes the parity of the permutation (even- or oddness).\n","sig":null,"attributes":[{"value":"/ Computes the parity of the permutation (even- or oddness).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":342337,"byte_end":342399,"line_start":215,"line_end":215,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":343288,"byte_end":343297,"line_start":239,"line_end":239,"column_start":12,"column_end":21},"name":"as_matrix","qualname":"<PermutationMatrix<T>>::as_matrix","value":"pub fn as_matrix(&Self) -> Matrix<T>","parent":null,"children":[],"decl_id":null,"docs":" The permutation matrix in an equivalent full matrix representation.\n","sig":null,"attributes":[{"value":"/ The permutation matrix in an equivalent full matrix representation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":343205,"byte_end":343276,"line_start":238,"line_end":238,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":343735,"byte_end":343738,"line_start":254,"line_end":254,"column_start":12,"column_end":15},"name":"det","qualname":"<PermutationMatrix<T>>::det","value":"pub fn det(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the determinant of the permutation matrix.","sig":null,"attributes":[{"value":"/ Computes the determinant of the permutation matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":343519,"byte_end":343574,"line_start":249,"line_end":249,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":343579,"byte_end":343582,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ The determinant of a permutation matrix is always","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":343587,"byte_end":343640,"line_start":251,"line_end":251,"column_start":5,"column_end":58}},{"value":"/ +1 (if the permutation is even) or","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":343645,"byte_end":343683,"line_start":252,"line_end":252,"column_start":5,"column_end":43}},{"value":"/ -1 (if the permutation is odd).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":343688,"byte_end":343723,"line_start":253,"line_end":253,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1359},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":344153,"byte_end":344174,"line_start":270,"line_end":270,"column_start":12,"column_end":33},"name":"permute_rows_in_place","qualname":"<PermutationMatrix<T>>::permute_rows_in_place","value":"pub fn permute_rows_in_place<M>(Self, &mut M) where M: BaseMatrixMut<T>","parent":null,"children":[],"decl_id":null,"docs":" Permutes the rows of the given matrix in-place.","sig":null,"attributes":[{"value":"/ Permutes the rows of the given matrix in-place.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":343952,"byte_end":344003,"line_start":264,"line_end":264,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":344008,"byte_end":344011,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":344016,"byte_end":344028,"line_start":266,"line_end":266,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":344033,"byte_end":344036,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ - The number of rows in the matrix is not equal to","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":344041,"byte_end":344095,"line_start":268,"line_end":268,"column_start":5,"column_end":59}},{"value":"/   the size of the permutation matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":344100,"byte_end":344141,"line_start":269,"line_end":269,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":344587,"byte_end":344608,"line_start":281,"line_end":281,"column_start":12,"column_end":33},"name":"permute_cols_in_place","qualname":"<PermutationMatrix<T>>::permute_cols_in_place","value":"pub fn permute_cols_in_place<M>(Self, &mut M) where M: BaseMatrixMut<T>","parent":null,"children":[],"decl_id":null,"docs":" Permutes the columns of the given matrix in-place.","sig":null,"attributes":[{"value":"/ Permutes the columns of the given matrix in-place.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":344380,"byte_end":344434,"line_start":275,"line_end":275,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":344439,"byte_end":344442,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":344447,"byte_end":344459,"line_start":277,"line_end":277,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":344464,"byte_end":344467,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ - The number of columns in the matrix is not equal to","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":344472,"byte_end":344529,"line_start":279,"line_end":279,"column_start":5,"column_end":62}},{"value":"/   the size of the permutation matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":344534,"byte_end":344575,"line_start":280,"line_end":280,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1365},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":345705,"byte_end":345728,"line_start":302,"line_end":302,"column_start":12,"column_end":35},"name":"permute_vector_in_place","qualname":"<PermutationMatrix<T>>::permute_vector_in_place","value":"pub fn permute_vector_in_place(Self, &mut Vector<T>)","parent":null,"children":[],"decl_id":null,"docs":" Permutes the elements of the given vector in-place.","sig":null,"attributes":[{"value":"/ Permutes the elements of the given vector in-place.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":345510,"byte_end":345565,"line_start":296,"line_end":296,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":345570,"byte_end":345573,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":345578,"byte_end":345590,"line_start":298,"line_end":298,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":345595,"byte_end":345598,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ - The size of the vector is not equal to the size of","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":345603,"byte_end":345659,"line_start":300,"line_end":300,"column_start":5,"column_end":61}},{"value":"/   the permutation matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":345664,"byte_end":345693,"line_start":301,"line_end":301,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":346297,"byte_end":346321,"line_start":318,"line_end":318,"column_start":12,"column_end":36},"name":"permute_rows_into_buffer","qualname":"<PermutationMatrix<T>>::permute_rows_into_buffer","value":"pub fn permute_rows_into_buffer<X, Y>(&Self, &X, &mut Y) where\nX: BaseMatrix<T>, Y: BaseMatrixMut<T>","parent":null,"children":[],"decl_id":null,"docs":" Permutes the rows of the given `source_matrix` and stores the\n result in `buffer`.","sig":null,"attributes":[{"value":"/ Permutes the rows of the given `source_matrix` and stores the","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":345957,"byte_end":346022,"line_start":309,"line_end":309,"column_start":5,"column_end":70}},{"value":"/ result in `buffer`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":346027,"byte_end":346050,"line_start":310,"line_end":310,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":346055,"byte_end":346058,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":346063,"byte_end":346075,"line_start":312,"line_end":312,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":346080,"byte_end":346083,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ - The number of rows in the source matrix is not equal to","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":346088,"byte_end":346149,"line_start":314,"line_end":314,"column_start":5,"column_end":66}},{"value":"/   the size of the permutation matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":346154,"byte_end":346195,"line_start":315,"line_end":315,"column_start":5,"column_end":46}},{"value":"/ - The dimensions of the source matrix and the buffer","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":346200,"byte_end":346256,"line_start":316,"line_end":316,"column_start":5,"column_end":61}},{"value":"/   are not identical.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":346261,"byte_end":346285,"line_start":317,"line_end":317,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":347426,"byte_end":347450,"line_start":342,"line_end":342,"column_start":12,"column_end":36},"name":"permute_cols_into_buffer","qualname":"<PermutationMatrix<T>>::permute_cols_into_buffer","value":"pub fn permute_cols_into_buffer<X, Y>(&Self, &X, &mut Y) where\nX: BaseMatrix<T>, Y: BaseMatrixMut<T>","parent":null,"children":[],"decl_id":null,"docs":" Permutes the columns of the given `source_matrix` and stores the\n result in `buffer`.","sig":null,"attributes":[{"value":"/ Permutes the columns of the given `source_matrix` and stores the","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":347080,"byte_end":347148,"line_start":333,"line_end":333,"column_start":5,"column_end":73}},{"value":"/ result in `buffer`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":347153,"byte_end":347176,"line_start":334,"line_end":334,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":347181,"byte_end":347184,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":347189,"byte_end":347201,"line_start":336,"line_end":336,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":347206,"byte_end":347209,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ - The number of columns in the source matrix is not equal to","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":347214,"byte_end":347278,"line_start":338,"line_end":338,"column_start":5,"column_end":69}},{"value":"/   the size of the permutation matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":347283,"byte_end":347324,"line_start":339,"line_end":339,"column_start":5,"column_end":46}},{"value":"/ - The dimensions of the source matrix and the buffer","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":347329,"byte_end":347385,"line_start":340,"line_end":340,"column_start":5,"column_end":61}},{"value":"/   are not identical.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":347390,"byte_end":347414,"line_start":341,"line_end":341,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":348755,"byte_end":348781,"line_start":369,"line_end":369,"column_start":12,"column_end":38},"name":"permute_vector_into_buffer","qualname":"<PermutationMatrix<T>>::permute_vector_into_buffer","value":"pub fn permute_vector_into_buffer(&Self, &Vector<T>, &mut Vector<T>)","parent":null,"children":[],"decl_id":null,"docs":" Permutes the elements of the given `source_vector` and stores the\n result in `buffer`.","sig":null,"attributes":[{"value":"/ Permutes the elements of the given `source_vector` and stores the","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":348421,"byte_end":348490,"line_start":360,"line_end":360,"column_start":5,"column_end":74}},{"value":"/ result in `buffer`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":348495,"byte_end":348518,"line_start":361,"line_end":361,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":348523,"byte_end":348526,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":348531,"byte_end":348543,"line_start":363,"line_end":363,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":348548,"byte_end":348551,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ - The size of the source vector is not equal to the","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":348556,"byte_end":348611,"line_start":365,"line_end":365,"column_start":5,"column_end":60}},{"value":"/   size of the permutation matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":348616,"byte_end":348653,"line_start":366,"line_end":366,"column_start":5,"column_end":42}},{"value":"/ - The dimensions of the source vector and the buffer","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":348658,"byte_end":348714,"line_start":367,"line_end":367,"column_start":5,"column_end":61}},{"value":"/   are not identical.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":348719,"byte_end":348743,"line_start":368,"line_end":368,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1377},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":349644,"byte_end":349663,"line_start":391,"line_end":391,"column_start":12,"column_end":31},"name":"compose_into_buffer","qualname":"<PermutationMatrix<T>>::compose_into_buffer","value":"pub fn compose_into_buffer(&Self, &PermutationMatrix<T>,\n                           &mut PermutationMatrix<T>)","parent":null,"children":[],"decl_id":null,"docs":" Computes the composition of `self` with the given `source_perm`\n and stores the result in `buffer`.","sig":null,"attributes":[{"value":"/ Computes the composition of `self` with the given `source_perm`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":349368,"byte_end":349435,"line_start":384,"line_end":384,"column_start":5,"column_end":72}},{"value":"/ and stores the result in `buffer`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":349440,"byte_end":349478,"line_start":385,"line_end":385,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":349483,"byte_end":349486,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":349491,"byte_end":349503,"line_start":387,"line_end":387,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":349508,"byte_end":349511,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ - The size of the permutation matrix (self) is not equal to the","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":349516,"byte_end":349583,"line_start":389,"line_end":389,"column_start":5,"column_end":72}},{"value":"/   size of the source permutation matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":349588,"byte_end":349632,"line_start":390,"line_end":390,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3650},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65538,"byte_end":65541,"line_start":35,"line_end":35,"column_start":5,"column_end":8},"name":"Row","qualname":"::matrix::Axes::Row","value":"Axes::Row","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" The row axis.\n","sig":null,"attributes":[{"value":"/ The row axis.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65516,"byte_end":65533,"line_start":34,"line_end":34,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3652},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65572,"byte_end":65575,"line_start":37,"line_end":37,"column_start":5,"column_end":8},"name":"Col","qualname":"::matrix::Axes::Col","value":"Axes::Col","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" The column axis.\n","sig":null,"attributes":[{"value":"/ The column axis.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65547,"byte_end":65567,"line_start":36,"line_end":36,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":3649},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65505,"byte_end":65509,"line_start":33,"line_end":33,"column_start":10,"column_end":14},"name":"Axes","qualname":"::matrix::Axes","value":"pub enum Axes { Row, Col, }","parent":null,"children":[{"krate":0,"index":3650},{"krate":0,"index":3652}],"decl_id":null,"docs":" Matrix dimensions\n","sig":null,"attributes":[{"value":"/ Matrix dimensions","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65444,"byte_end":65465,"line_start":31,"line_end":31,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":3659},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65704,"byte_end":65710,"line_start":44,"line_end":44,"column_start":12,"column_end":18},"name":"Matrix","qualname":"::matrix::Matrix","value":"Matrix {  }","parent":null,"children":[{"krate":0,"index":3661},{"krate":0,"index":3662},{"krate":0,"index":3663}],"decl_id":null,"docs":" The `Matrix` struct.","sig":null,"attributes":[{"value":"/ The `Matrix` struct.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65580,"byte_end":65604,"line_start":40,"line_end":40,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65605,"byte_end":65608,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Can be instantiated with any type.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65609,"byte_end":65647,"line_start":42,"line_end":42,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":3685},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65989,"byte_end":66000,"line_start":57,"line_end":57,"column_start":12,"column_end":23},"name":"MatrixSlice","qualname":"::matrix::MatrixSlice","value":"MatrixSlice {  }","parent":null,"children":[{"krate":0,"index":3688},{"krate":0,"index":3689},{"krate":0,"index":3690},{"krate":0,"index":3691},{"krate":0,"index":3692}],"decl_id":null,"docs":" A `MatrixSlice`","sig":null,"attributes":[{"value":"/ A `MatrixSlice`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65771,"byte_end":65790,"line_start":50,"line_end":50,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65791,"byte_end":65794,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This struct provides a slice into a matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65795,"byte_end":65842,"line_start":52,"line_end":52,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65843,"byte_end":65846,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ The struct contains the upper left point of the slice","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65847,"byte_end":65904,"line_start":54,"line_end":54,"column_start":1,"column_end":58}},{"value":"/ and the width and height of the slice.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65905,"byte_end":65947,"line_start":55,"line_end":55,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":3704},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66349,"byte_end":66363,"line_start":72,"line_end":72,"column_start":12,"column_end":26},"name":"MatrixSliceMut","qualname":"::matrix::MatrixSliceMut","value":"MatrixSliceMut {  }","parent":null,"children":[{"krate":0,"index":3707},{"krate":0,"index":3708},{"krate":0,"index":3709},{"krate":0,"index":3710},{"krate":0,"index":3711}],"decl_id":null,"docs":" A mutable `MatrixSliceMut`","sig":null,"attributes":[{"value":"/ A mutable `MatrixSliceMut`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66125,"byte_end":66155,"line_start":65,"line_end":65,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66156,"byte_end":66159,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ This struct provides a mutable slice into a matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66160,"byte_end":66215,"line_start":67,"line_end":67,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66216,"byte_end":66219,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ The struct contains the upper left point of the slice","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66220,"byte_end":66277,"line_start":69,"line_end":69,"column_start":1,"column_end":58}},{"value":"/ and the width and height of the slice.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66278,"byte_end":66320,"line_start":70,"line_end":70,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":3716},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66976,"byte_end":66979,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"Row","qualname":"::matrix::Row","value":"Row {  }","parent":null,"children":[{"krate":0,"index":3719}],"decl_id":null,"docs":" Row of a matrix.","sig":null,"attributes":[{"value":"/ Row of a matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66490,"byte_end":66510,"line_start":80,"line_end":80,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66511,"byte_end":66514,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This struct points to a slice making up","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66515,"byte_end":66558,"line_start":82,"line_end":82,"column_start":1,"column_end":44}},{"value":"/ a row in a matrix. You can deref this","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66559,"byte_end":66600,"line_start":83,"line_end":83,"column_start":1,"column_end":42}},{"value":"/ struct to retrieve a `MatrixSlice` of","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66601,"byte_end":66642,"line_start":84,"line_end":84,"column_start":1,"column_end":42}},{"value":"/ the row.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66643,"byte_end":66655,"line_start":85,"line_end":85,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66656,"byte_end":66659,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66660,"byte_end":66673,"line_start":87,"line_end":87,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66674,"byte_end":66677,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66678,"byte_end":66685,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66686,"byte_end":66739,"line_start":90,"line_end":90,"column_start":1,"column_end":54}},{"value":"/ use rulinalg::matrix::BaseMatrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66740,"byte_end":66777,"line_start":91,"line_end":91,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66778,"byte_end":66781,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ let mat = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66782,"byte_end":66813,"line_start":93,"line_end":93,"column_start":1,"column_end":32}},{"value":"/                   3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66814,"byte_end":66846,"line_start":94,"line_end":94,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66847,"byte_end":66850,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ let row = mat.row(1);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66851,"byte_end":66876,"line_start":96,"line_end":96,"column_start":1,"column_end":26}},{"value":"/ assert_eq!((*row + 2.0).sum(), 11.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66877,"byte_end":66918,"line_start":97,"line_end":97,"column_start":1,"column_end":42}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66919,"byte_end":66926,"line_start":98,"line_end":98,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":66927,"byte_end":66934,"line_start":99,"line_end":99,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3731},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67641,"byte_end":67647,"line_start":131,"line_end":131,"column_start":12,"column_end":18},"name":"RowMut","qualname":"::matrix::RowMut","value":"RowMut {  }","parent":null,"children":[{"krate":0,"index":3734}],"decl_id":null,"docs":" Mutable row of a matrix.","sig":null,"attributes":[{"value":"/ Mutable row of a matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67025,"byte_end":67053,"line_start":105,"line_end":105,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67054,"byte_end":67057,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ This struct points to a mutable slice","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67058,"byte_end":67099,"line_start":107,"line_end":107,"column_start":1,"column_end":42}},{"value":"/ making up a row in a matrix. You can deref","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67100,"byte_end":67146,"line_start":108,"line_end":108,"column_start":1,"column_end":47}},{"value":"/ this struct to retrieve a `MatrixSlice`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67147,"byte_end":67190,"line_start":109,"line_end":109,"column_start":1,"column_end":44}},{"value":"/ of the row.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67191,"byte_end":67206,"line_start":110,"line_end":110,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67207,"byte_end":67210,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67211,"byte_end":67224,"line_start":112,"line_end":112,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67225,"byte_end":67228,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67229,"byte_end":67236,"line_start":114,"line_end":114,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67237,"byte_end":67290,"line_start":115,"line_end":115,"column_start":1,"column_end":54}},{"value":"/ use rulinalg::matrix::BaseMatrixMut;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67291,"byte_end":67331,"line_start":116,"line_end":116,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67332,"byte_end":67335,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ let mut mat = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67336,"byte_end":67371,"line_start":118,"line_end":118,"column_start":1,"column_end":36}},{"value":"/                       3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67372,"byte_end":67408,"line_start":119,"line_end":119,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67409,"byte_end":67412,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67413,"byte_end":67418,"line_start":121,"line_end":121,"column_start":1,"column_end":6}},{"value":"/     let mut row = mat.row_mut(1);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67419,"byte_end":67456,"line_start":122,"line_end":122,"column_start":1,"column_end":38}},{"value":"/     *row += 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67457,"byte_end":67477,"line_start":123,"line_end":123,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67478,"byte_end":67483,"line_start":124,"line_end":124,"column_start":1,"column_end":6}},{"value":"/ let expected = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67484,"byte_end":67520,"line_start":125,"line_end":125,"column_start":1,"column_end":37}},{"value":"/                        5.0, 6.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67521,"byte_end":67558,"line_start":126,"line_end":126,"column_start":1,"column_end":38}},{"value":"/ assert_matrix_eq!(mat, expected);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67559,"byte_end":67596,"line_start":127,"line_end":127,"column_start":1,"column_end":38}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67597,"byte_end":67604,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67605,"byte_end":67612,"line_start":129,"line_end":129,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3739},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67742,"byte_end":67746,"line_start":137,"line_end":137,"column_start":12,"column_end":16},"name":"Rows","qualname":"::matrix::Rows","value":"Rows {  }","parent":null,"children":[{"krate":0,"index":3742},{"krate":0,"index":3743},{"krate":0,"index":3744},{"krate":0,"index":3745},{"krate":0,"index":3746},{"krate":0,"index":3747}],"decl_id":null,"docs":" Row iterator.\n","sig":null,"attributes":[{"value":"/ Row iterator.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67696,"byte_end":67713,"line_start":135,"line_end":135,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":3752},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67966,"byte_end":67973,"line_start":148,"line_end":148,"column_start":12,"column_end":19},"name":"RowsMut","qualname":"::matrix::RowsMut","value":"RowsMut {  }","parent":null,"children":[{"krate":0,"index":3755},{"krate":0,"index":3756},{"krate":0,"index":3757},{"krate":0,"index":3758},{"krate":0,"index":3759},{"krate":0,"index":3760}],"decl_id":null,"docs":" Mutable row iterator.\n","sig":null,"attributes":[{"value":"/ Mutable row iterator.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":67912,"byte_end":67937,"line_start":146,"line_end":146,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68265,"byte_end":68274,"line_start":161,"line_end":161,"column_start":12,"column_end":21},"name":"raw_slice","qualname":"<Row>::raw_slice","value":"pub fn raw_slice(&Self) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the row as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the row as a slice.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68222,"byte_end":68253,"line_start":160,"line_end":160,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68465,"byte_end":68474,"line_start":168,"line_end":168,"column_start":12,"column_end":21},"name":"raw_slice","qualname":"<RowMut>::raw_slice","value":"pub fn raw_slice(&Self) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the row as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the row as a slice.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68422,"byte_end":68453,"line_start":167,"line_end":167,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1507},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68631,"byte_end":68644,"line_start":173,"line_end":173,"column_start":12,"column_end":25},"name":"raw_slice_mut","qualname":"<RowMut>::raw_slice_mut","value":"pub fn raw_slice_mut(&mut Self) -> &'a mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the row as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the row as a slice.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68588,"byte_end":68619,"line_start":172,"line_end":172,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":3765},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69274,"byte_end":69280,"line_start":199,"line_end":199,"column_start":12,"column_end":18},"name":"Column","qualname":"::matrix::Column","value":"Column {  }","parent":null,"children":[{"krate":0,"index":3768}],"decl_id":null,"docs":" Column of a matrix.","sig":null,"attributes":[{"value":"/ Column of a matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68772,"byte_end":68795,"line_start":178,"line_end":178,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68796,"byte_end":68799,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ This struct points to a `MatrixSlice`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68800,"byte_end":68841,"line_start":180,"line_end":180,"column_start":1,"column_end":42}},{"value":"/ making up a column in a matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68842,"byte_end":68877,"line_start":181,"line_end":181,"column_start":1,"column_end":36}},{"value":"/ You can deref this struct to retrieve","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68878,"byte_end":68919,"line_start":182,"line_end":182,"column_start":1,"column_end":42}},{"value":"/ the raw column `MatrixSlice`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68920,"byte_end":68953,"line_start":183,"line_end":183,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68954,"byte_end":68957,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68958,"byte_end":68971,"line_start":185,"line_end":185,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68972,"byte_end":68975,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68976,"byte_end":68983,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68984,"byte_end":69037,"line_start":188,"line_end":188,"column_start":1,"column_end":54}},{"value":"/ use rulinalg::matrix::BaseMatrix;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69038,"byte_end":69075,"line_start":189,"line_end":189,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69076,"byte_end":69079,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ let mat = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69080,"byte_end":69111,"line_start":191,"line_end":191,"column_start":1,"column_end":32}},{"value":"/                   3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69112,"byte_end":69144,"line_start":192,"line_end":192,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69145,"byte_end":69148,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ let col = mat.col(1);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69149,"byte_end":69174,"line_start":194,"line_end":194,"column_start":1,"column_end":26}},{"value":"/ assert_eq!((*col + 2.0).sum(), 10.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69175,"byte_end":69216,"line_start":195,"line_end":195,"column_start":1,"column_end":42}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69217,"byte_end":69224,"line_start":196,"line_end":196,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69225,"byte_end":69232,"line_start":197,"line_end":197,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3780},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69954,"byte_end":69963,"line_start":228,"line_end":228,"column_start":12,"column_end":21},"name":"ColumnMut","qualname":"::matrix::ColumnMut","value":"ColumnMut {  }","parent":null,"children":[{"krate":0,"index":3783}],"decl_id":null,"docs":" Mutable column of a matrix.","sig":null,"attributes":[{"value":"/ Mutable column of a matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69326,"byte_end":69357,"line_start":203,"line_end":203,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69358,"byte_end":69361,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ This struct points to a `MatrixSliceMut`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69362,"byte_end":69406,"line_start":205,"line_end":205,"column_start":1,"column_end":45}},{"value":"/ making up a column in a matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69407,"byte_end":69442,"line_start":206,"line_end":206,"column_start":1,"column_end":36}},{"value":"/ You can deref this struct to retrieve","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69443,"byte_end":69484,"line_start":207,"line_end":207,"column_start":1,"column_end":42}},{"value":"/ the raw column `MatrixSliceMut`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69485,"byte_end":69521,"line_start":208,"line_end":208,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69522,"byte_end":69525,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69526,"byte_end":69539,"line_start":210,"line_end":210,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69540,"byte_end":69543,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69544,"byte_end":69551,"line_start":212,"line_end":212,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69552,"byte_end":69605,"line_start":213,"line_end":213,"column_start":1,"column_end":54}},{"value":"/ use rulinalg::matrix::BaseMatrixMut;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69606,"byte_end":69646,"line_start":214,"line_end":214,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69647,"byte_end":69650,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ let mut mat = matrix![1.0, 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69651,"byte_end":69686,"line_start":216,"line_end":216,"column_start":1,"column_end":36}},{"value":"/                   3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69687,"byte_end":69719,"line_start":217,"line_end":217,"column_start":1,"column_end":33}},{"value":"/ {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69720,"byte_end":69725,"line_start":218,"line_end":218,"column_start":1,"column_end":6}},{"value":"/     let mut column = mat.col_mut(1);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69726,"byte_end":69766,"line_start":219,"line_end":219,"column_start":1,"column_end":41}},{"value":"/     *column += 2.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69767,"byte_end":69790,"line_start":220,"line_end":220,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69791,"byte_end":69796,"line_start":221,"line_end":221,"column_start":1,"column_end":6}},{"value":"/ let expected = matrix![1.0, 4.0;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69797,"byte_end":69833,"line_start":222,"line_end":222,"column_start":1,"column_end":37}},{"value":"/                        3.0, 6.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69834,"byte_end":69871,"line_start":223,"line_end":223,"column_start":1,"column_end":38}},{"value":"/ assert_matrix_eq!(mat, expected);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69872,"byte_end":69909,"line_start":224,"line_end":224,"column_start":1,"column_end":38}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69910,"byte_end":69917,"line_start":225,"line_end":225,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":69918,"byte_end":69925,"line_start":226,"line_end":226,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3788},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":70061,"byte_end":70065,"line_start":234,"line_end":234,"column_start":12,"column_end":16},"name":"Cols","qualname":"::matrix::Cols","value":"Cols {  }","parent":null,"children":[{"krate":0,"index":3791},{"krate":0,"index":3792},{"krate":0,"index":3793},{"krate":0,"index":3794},{"krate":0,"index":3795},{"krate":0,"index":3796}],"decl_id":null,"docs":" Column iterator.\n","sig":null,"attributes":[{"value":"/ Column iterator.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":70012,"byte_end":70032,"line_start":232,"line_end":232,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":3801},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":70288,"byte_end":70295,"line_start":245,"line_end":245,"column_start":12,"column_end":19},"name":"ColsMut","qualname":"::matrix::ColsMut","value":"ColsMut {  }","parent":null,"children":[{"krate":0,"index":3804},{"krate":0,"index":3805},{"krate":0,"index":3806},{"krate":0,"index":3807},{"krate":0,"index":3808},{"krate":0,"index":3809}],"decl_id":null,"docs":" Mutable column iterator.\n","sig":null,"attributes":[{"value":"/ Mutable column iterator.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":70231,"byte_end":70259,"line_start":243,"line_end":243,"column_start":1,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3815},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":70607,"byte_end":70611,"line_start":258,"line_end":258,"column_start":5,"column_end":9},"name":"Main","qualname":"::matrix::DiagOffset::Main","value":"DiagOffset::Main","parent":{"krate":0,"index":3814},"children":[],"decl_id":null,"docs":" The main diagonal of the matrix.\n","sig":null,"attributes":[{"value":"/ The main diagonal of the matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":70566,"byte_end":70602,"line_start":257,"line_end":257,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3817},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":70660,"byte_end":70665,"line_start":260,"line_end":260,"column_start":5,"column_end":10},"name":"Above","qualname":"::matrix::DiagOffset::Above","value":"DiagOffset::Above(usize)","parent":{"krate":0,"index":3814},"children":[],"decl_id":null,"docs":" An offset above the main diagonal.\n","sig":null,"attributes":[{"value":"/ An offset above the main diagonal.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":70617,"byte_end":70655,"line_start":259,"line_end":259,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3820},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":70721,"byte_end":70726,"line_start":262,"line_end":262,"column_start":5,"column_end":10},"name":"Below","qualname":"::matrix::DiagOffset::Below","value":"DiagOffset::Below(usize)","parent":{"krate":0,"index":3814},"children":[],"decl_id":null,"docs":" An offset below the main diagonal.\n","sig":null,"attributes":[{"value":"/ An offset below the main diagonal.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":70678,"byte_end":70716,"line_start":261,"line_end":261,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":3814},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":70549,"byte_end":70559,"line_start":256,"line_end":256,"column_start":10,"column_end":20},"name":"DiagOffset","qualname":"::matrix::DiagOffset","value":"pub enum DiagOffset { Main, Above(usize), Below(usize), }","parent":null,"children":[{"krate":0,"index":3815},{"krate":0,"index":3817},{"krate":0,"index":3820}],"decl_id":null,"docs":" Diagonal offset (used by Diagonal iterator).\n","sig":null,"attributes":[{"value":"/ Diagonal offset (used by Diagonal iterator).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":70463,"byte_end":70511,"line_start":254,"line_end":254,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3829},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":70822,"byte_end":70830,"line_start":267,"line_end":267,"column_start":12,"column_end":20},"name":"Diagonal","qualname":"::matrix::Diagonal","value":"Diagonal {  }","parent":null,"children":[{"krate":0,"index":3833},{"krate":0,"index":3834},{"krate":0,"index":3835},{"krate":0,"index":3836}],"decl_id":null,"docs":" An iterator over the diagonal elements of a matrix.\n","sig":null,"attributes":[{"value":"/ An iterator over the diagonal elements of a matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":70738,"byte_end":70793,"line_start":265,"line_end":265,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":3842},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":71056,"byte_end":71067,"line_start":276,"line_end":276,"column_start":12,"column_end":23},"name":"DiagonalMut","qualname":"::matrix::DiagonalMut","value":"DiagonalMut {  }","parent":null,"children":[{"krate":0,"index":3846},{"krate":0,"index":3847},{"krate":0,"index":3848},{"krate":0,"index":3849}],"decl_id":null,"docs":" An iterator over the mutable diagonal elements of a matrix.\n","sig":null,"attributes":[{"value":"/ An iterator over the mutable diagonal elements of a matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":70964,"byte_end":71027,"line_start":274,"line_end":274,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":3855},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":71337,"byte_end":71346,"line_start":288,"line_end":288,"column_start":12,"column_end":21},"name":"SliceIter","qualname":"::matrix::SliceIter","value":"SliceIter {  }","parent":null,"children":[{"krate":0,"index":3858},{"krate":0,"index":3859},{"krate":0,"index":3860},{"krate":0,"index":3861},{"krate":0,"index":3862},{"krate":0,"index":3863},{"krate":0,"index":3864}],"decl_id":null,"docs":" Iterator for matrix.","sig":null,"attributes":[{"value":"/ Iterator for matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":71212,"byte_end":71236,"line_start":283,"line_end":283,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":71237,"byte_end":71240,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ Iterates over the underlying slice data","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":71241,"byte_end":71284,"line_start":285,"line_end":285,"column_start":1,"column_end":44}},{"value":"/ in row-major order.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":71285,"byte_end":71308,"line_start":286,"line_end":286,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":3869},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":71665,"byte_end":71677,"line_start":303,"line_end":303,"column_start":12,"column_end":24},"name":"SliceIterMut","qualname":"::matrix::SliceIterMut","value":"SliceIterMut {  }","parent":null,"children":[{"krate":0,"index":3872},{"krate":0,"index":3873},{"krate":0,"index":3874},{"krate":0,"index":3875},{"krate":0,"index":3876},{"krate":0,"index":3877},{"krate":0,"index":3878}],"decl_id":null,"docs":" Iterator for mutable matrix.","sig":null,"attributes":[{"value":"/ Iterator for mutable matrix.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":71532,"byte_end":71564,"line_start":298,"line_end":298,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":71565,"byte_end":71568,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ Iterates over the underlying slice data","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":71569,"byte_end":71612,"line_start":300,"line_end":300,"column_start":1,"column_end":44}},{"value":"/ in row-major order.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":71613,"byte_end":71636,"line_start":301,"line_end":301,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":1514},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"convert","qualname":"::convert","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","parent":null,"children":[{"krate":0,"index":1515},{"krate":0,"index":1518},{"krate":0,"index":1519},{"krate":0,"index":1522},{"krate":0,"index":1525},{"krate":0,"index":1528},{"krate":0,"index":1529},{"krate":0,"index":1532},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1539},{"krate":0,"index":1542},{"krate":0,"index":1545},{"krate":0,"index":1548},{"krate":0,"index":1551},{"krate":0,"index":1554},{"krate":0,"index":1557},{"krate":0,"index":1560},{"krate":0,"index":1563},{"krate":0,"index":1566},{"krate":0,"index":1569},{"krate":0,"index":1573},{"krate":0,"index":3883},{"krate":0,"index":3887},{"krate":0,"index":3891},{"krate":0,"index":3893},{"krate":0,"index":3895},{"krate":0,"index":3897},{"krate":0,"index":3899},{"krate":0,"index":1578},{"krate":0,"index":3901},{"krate":0,"index":3905},{"krate":0,"index":3909},{"krate":0,"index":3913}],"decl_id":null,"docs":" The convert module.","sig":null,"attributes":[{"value":"/ The convert module.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":382676,"byte_end":382699,"line_start":1,"line_end":1,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":382700,"byte_end":382703,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Contains implementations of `std::convert::From`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":382704,"byte_end":382756,"line_start":3,"line_end":3,"column_start":1,"column_end":53}},{"value":"/ for Matrix and Vector types.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":382757,"byte_end":382789,"line_start":4,"line_end":4,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1580},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":384572,"byte_end":384580,"line_start":78,"line_end":78,"column_start":12,"column_end":20},"name":"try_into","qualname":"<Matrix<T>>::try_into","value":"pub fn try_into<U: NumCast>(Self) -> Result<Matrix<U>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to convert the matrix into a new matrix of different scalar type.","sig":null,"attributes":[{"value":"/ Attempts to convert the matrix into a new matrix of different scalar type.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":384354,"byte_end":384432,"line_start":73,"line_end":73,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":384437,"byte_end":384440,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":384445,"byte_end":384459,"line_start":75,"line_end":75,"column_start":5,"column_end":19}},{"value":"/ - One or more of the elements in the matrix cannot be converted into","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":384464,"byte_end":384536,"line_start":76,"line_end":76,"column_start":5,"column_end":77}},{"value":"/   the new type.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":384541,"byte_end":384560,"line_start":77,"line_end":77,"column_start":5,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":1586},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","parent":null,"children":[{"krate":0,"index":1587},{"krate":0,"index":1590},{"krate":0,"index":1593},{"krate":0,"index":1596},{"krate":0,"index":1599},{"krate":0,"index":1600},{"krate":0,"index":1603},{"krate":0,"index":3917},{"krate":0,"index":3920},{"krate":0,"index":3922},{"krate":0,"index":3935},{"krate":0,"index":3937},{"krate":0,"index":3938},{"krate":0,"index":1606},{"krate":0,"index":1610},{"krate":0,"index":1612}],"decl_id":null,"docs":" Error handling for the linalg module.\n","sig":null,"attributes":[{"value":"/ Error handling for the linalg module.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393037,"byte_end":393078,"line_start":1,"line_end":1,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":3917},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393258,"byte_end":393263,"line_start":11,"line_end":11,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":3918},{"krate":0,"index":3919}],"decl_id":null,"docs":" An error related to the linalg module.\n","sig":null,"attributes":[{"value":"/ An error related to the linalg module.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393187,"byte_end":393229,"line_start":9,"line_end":9,"column_start":1,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3923},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393604,"byte_end":393614,"line_start":23,"line_end":23,"column_start":5,"column_end":15},"name":"InvalidArg","qualname":"::error::ErrorKind::InvalidArg","value":"ErrorKind::InvalidArg","parent":{"krate":0,"index":3922},"children":[],"decl_id":null,"docs":" An argument did not uphold a necessary criteria for the function.\n","sig":null,"attributes":[{"value":"/ An argument did not uphold a necessary criteria for the function.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393530,"byte_end":393599,"line_start":22,"line_end":22,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3925},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393685,"byte_end":393698,"line_start":25,"line_end":25,"column_start":5,"column_end":18},"name":"DecompFailure","qualname":"::error::ErrorKind::DecompFailure","value":"ErrorKind::DecompFailure","parent":{"krate":0,"index":3922},"children":[],"decl_id":null,"docs":" A failure to decompose due to some property of the data.\n","sig":null,"attributes":[{"value":"/ A failure to decompose due to some property of the data.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393620,"byte_end":393680,"line_start":24,"line_end":24,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3927},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393771,"byte_end":393785,"line_start":27,"line_end":27,"column_start":5,"column_end":19},"name":"AlgebraFailure","qualname":"::error::ErrorKind::AlgebraFailure","value":"ErrorKind::AlgebraFailure","parent":{"krate":0,"index":3922},"children":[],"decl_id":null,"docs":" A failure due to some algebraic constraints not being met.\n","sig":null,"attributes":[{"value":"/ A failure due to some algebraic constraints not being met.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393704,"byte_end":393766,"line_start":26,"line_end":26,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3929},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393823,"byte_end":393832,"line_start":29,"line_end":29,"column_start":5,"column_end":14},"name":"DivByZero","qualname":"::error::ErrorKind::DivByZero","value":"ErrorKind::DivByZero","parent":{"krate":0,"index":3922},"children":[],"decl_id":null,"docs":" Tried to divide by zero\n","sig":null,"attributes":[{"value":"/ Tried to divide by zero","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393791,"byte_end":393818,"line_start":28,"line_end":28,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3931},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393903,"byte_end":393926,"line_start":31,"line_end":31,"column_start":5,"column_end":28},"name":"ScalarConversionFailure","qualname":"::error::ErrorKind::ScalarConversionFailure","value":"ErrorKind::ScalarConversionFailure","parent":{"krate":0,"index":3922},"children":[],"decl_id":null,"docs":" Failure due to inability to convert between scalar types\n","sig":null,"attributes":[{"value":"/ Failure due to inability to convert between scalar types","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393838,"byte_end":393898,"line_start":30,"line_end":30,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3933},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393996,"byte_end":394014,"line_start":33,"line_end":33,"column_start":5,"column_end":23},"name":"InvalidPermutation","qualname":"::error::ErrorKind::InvalidPermutation","value":"ErrorKind::InvalidPermutation","parent":{"krate":0,"index":3922},"children":[],"decl_id":null,"docs":" A user-supplied permutation is not a valid permutation.\n","sig":null,"attributes":[{"value":"/ A user-supplied permutation is not a valid permutation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393932,"byte_end":393991,"line_start":32,"line_end":32,"column_start":5,"column_end":64}}]},{"kind":"Enum","id":{"krate":0,"index":3922},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393514,"byte_end":393523,"line_start":21,"line_end":21,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::error::ErrorKind","value":"pub enum ErrorKind {\n    InvalidArg,\n    DecompFailure,\n    AlgebraFailure,\n    DivByZero,\n    ScalarConversionFailure,\n    InvalidPermutation,\n}","parent":null,"children":[{"krate":0,"index":3923},{"krate":0,"index":3925},{"krate":0,"index":3927},{"krate":0,"index":3929},{"krate":0,"index":3931},{"krate":0,"index":3933}],"decl_id":null,"docs":" Types of errors produced in the linalg module.","sig":null,"attributes":[{"value":"/ Types of errors produced in the linalg module.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393334,"byte_end":393384,"line_start":16,"line_end":16,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393385,"byte_end":393388,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ List intended to grow and so you should","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393389,"byte_end":393432,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/ be wary of matching against explicitly.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":393433,"byte_end":393476,"line_start":19,"line_end":19,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1607},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":394103,"byte_end":394106,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"pub fn new<E>(ErrorKind, E) -> Error where\nE: Into<Box<error::Error + Send + Sync>>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Error` of a particular `ErrorKind`.\n","sig":null,"attributes":[{"value":"/ Construct a new `Error` of a particular `ErrorKind`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":394035,"byte_end":394091,"line_start":37,"line_end":37,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1609},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":394346,"byte_end":394350,"line_start":48,"line_end":48,"column_start":12,"column_end":16},"name":"kind","qualname":"<Error>::kind","value":"pub fn kind(&Self) -> &ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Get the kind of this `Error`.\n","sig":null,"attributes":[{"value":"/ Get the kind of this `Error`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":394301,"byte_end":394334,"line_start":47,"line_end":47,"column_start":5,"column_end":38}}]},{"kind":"Mod","id":{"krate":0,"index":1614},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::utils","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","parent":null,"children":[{"krate":0,"index":1615},{"krate":0,"index":1618},{"krate":0,"index":1621},{"krate":0,"index":1622},{"krate":0,"index":1625},{"krate":0,"index":1628},{"krate":0,"index":1631},{"krate":0,"index":1634},{"krate":0,"index":1636},{"krate":0,"index":1638},{"krate":0,"index":1641},{"krate":0,"index":1644},{"krate":0,"index":1647},{"krate":0,"index":1650},{"krate":0,"index":1653},{"krate":0,"index":1656},{"krate":0,"index":1658},{"krate":0,"index":1660}],"decl_id":null,"docs":" Linear algebra utils module.","sig":null,"attributes":[{"value":"/ Linear algebra utils module.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":394634,"byte_end":394666,"line_start":1,"line_end":1,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":394667,"byte_end":394670,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Contains support methods for linear algebra structs.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":394671,"byte_end":394727,"line_start":3,"line_end":3,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":1634},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":395019,"byte_end":395022,"line_start":20,"line_end":20,"column_start":8,"column_end":11},"name":"dot","qualname":"::utils::dot","value":"pub fn dot<T: Copy + Zero + Add<T, Output = T> + Mul<T, Output =\n           T>>(&[T], &[T]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compute dot product of two slices.","sig":null,"attributes":[{"value":"/ Compute dot product of two slices.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":394798,"byte_end":394836,"line_start":9,"line_end":9,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":394837,"byte_end":394840,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":394841,"byte_end":394855,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":394856,"byte_end":394859,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":394860,"byte_end":394867,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use rulinalg::utils;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":394868,"byte_end":394892,"line_start":14,"line_end":14,"column_start":1,"column_end":25}},{"value":"/ let a = vec![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":394893,"byte_end":394930,"line_start":15,"line_end":15,"column_start":1,"column_end":38}},{"value":"/ let b = vec![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":394931,"byte_end":394968,"line_start":16,"line_end":16,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":394969,"byte_end":394972,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let c = utils::dot(&a,&b);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":394973,"byte_end":395003,"line_start":18,"line_end":18,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":395004,"byte_end":395011,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1636},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":396048,"byte_end":396060,"line_start":58,"line_end":58,"column_start":8,"column_end":20},"name":"unrolled_sum","qualname":"::utils::unrolled_sum","value":"pub fn unrolled_sum<T>(&[T]) -> T where T: Clone + Add<Output = T> + Zero","parent":null,"children":[],"decl_id":null,"docs":" Unrolled sum","sig":null,"attributes":[{"value":"/ Unrolled sum","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":395907,"byte_end":395923,"line_start":53,"line_end":53,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":395924,"byte_end":395927,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ Computes the sum over the slice consuming it in the process.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":395928,"byte_end":395992,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":395993,"byte_end":395996,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Given graciously by bluss from ndarray!","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":395997,"byte_end":396040,"line_start":57,"line_end":57,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":1638},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397448,"byte_end":397467,"line_start":105,"line_end":105,"column_start":8,"column_end":27},"name":"in_place_vec_bin_op","qualname":"::utils::in_place_vec_bin_op","value":"pub fn in_place_vec_bin_op<F, T>(&mut [T], &[T], F) where F: FnMut(&mut T, &T)\n-> (), T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Vectorized binary operation applied to two slices.\n The first argument should be a mutable slice which will\n be modified in place to prevent new memory allocation.","sig":null,"attributes":[{"value":"/ Vectorized binary operation applied to two slices.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":396996,"byte_end":397050,"line_start":88,"line_end":88,"column_start":1,"column_end":55}},{"value":"/ The first argument should be a mutable slice which will","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397051,"byte_end":397110,"line_start":89,"line_end":89,"column_start":1,"column_end":60}},{"value":"/ be modified in place to prevent new memory allocation.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397111,"byte_end":397169,"line_start":90,"line_end":90,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397170,"byte_end":397173,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397174,"byte_end":397188,"line_start":92,"line_end":92,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397189,"byte_end":397192,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397193,"byte_end":397200,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/ use rulinalg::utils;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397201,"byte_end":397225,"line_start":95,"line_end":95,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397226,"byte_end":397229,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ let mut a = vec![2.0; 10];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397230,"byte_end":397260,"line_start":97,"line_end":97,"column_start":1,"column_end":31}},{"value":"/ let b = vec![3.0; 10];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397261,"byte_end":397287,"line_start":98,"line_end":98,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397288,"byte_end":397291,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ utils::in_place_vec_bin_op(&mut a, &b, |x, &y| { *x = 1f64 + *x * y });","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397292,"byte_end":397367,"line_start":100,"line_end":100,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397368,"byte_end":397371,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ // Will print a vector of `7`s.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397372,"byte_end":397407,"line_start":102,"line_end":102,"column_start":1,"column_end":36}},{"value":"/ println!(\"{:?}\", a);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397408,"byte_end":397432,"line_start":103,"line_end":103,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397433,"byte_end":397440,"line_start":104,"line_end":104,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1641},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398080,"byte_end":398090,"line_start":135,"line_end":135,"column_start":8,"column_end":18},"name":"vec_bin_op","qualname":"::utils::vec_bin_op","value":"pub fn vec_bin_op<F, T>(&[T], &[T], F) -> Vec<T> where F: Fn(T, T) -> T,\nT: Copy","parent":null,"children":[],"decl_id":null,"docs":" Vectorized binary operation applied to two slices.","sig":null,"attributes":[{"value":"/ Vectorized binary operation applied to two slices.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397759,"byte_end":397813,"line_start":120,"line_end":120,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397814,"byte_end":397817,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397818,"byte_end":397832,"line_start":122,"line_end":122,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397833,"byte_end":397836,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397837,"byte_end":397844,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/ use rulinalg::utils;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397845,"byte_end":397869,"line_start":125,"line_end":125,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397870,"byte_end":397873,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ let mut a = vec![2.0; 10];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397874,"byte_end":397904,"line_start":127,"line_end":127,"column_start":1,"column_end":31}},{"value":"/ let b = vec![3.0; 10];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397905,"byte_end":397931,"line_start":128,"line_end":128,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397932,"byte_end":397935,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ let c = utils::vec_bin_op(&a, &b, |x, y| { 1f64 + x * y });","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":397936,"byte_end":397999,"line_start":130,"line_end":130,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398000,"byte_end":398003,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ // Will print a vector of `7`s.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398004,"byte_end":398039,"line_start":132,"line_end":132,"column_start":1,"column_end":36}},{"value":"/ println!(\"{:?}\", a);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398040,"byte_end":398064,"line_start":133,"line_end":133,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398065,"byte_end":398072,"line_start":134,"line_end":134,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1644},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398835,"byte_end":398842,"line_start":174,"line_end":174,"column_start":8,"column_end":15},"name":"vec_sum","qualname":"::utils::vec_sum","value":"pub fn vec_sum<T: Copy + Add<T, Output = T>>(&[T], &[T]) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Compute vector sum of two slices.","sig":null,"attributes":[{"value":"/ Compute vector sum of two slices.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398562,"byte_end":398599,"line_start":161,"line_end":161,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398600,"byte_end":398603,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398604,"byte_end":398618,"line_start":163,"line_end":163,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398619,"byte_end":398622,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398623,"byte_end":398630,"line_start":165,"line_end":165,"column_start":1,"column_end":8}},{"value":"/ use rulinalg::utils;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398631,"byte_end":398655,"line_start":166,"line_end":166,"column_start":1,"column_end":25}},{"value":"/ let a = vec![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398656,"byte_end":398693,"line_start":167,"line_end":167,"column_start":1,"column_end":38}},{"value":"/ let b = vec![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398694,"byte_end":398731,"line_start":168,"line_end":168,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398732,"byte_end":398735,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ let c = utils::vec_sum(&a,&b);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398736,"byte_end":398770,"line_start":170,"line_end":170,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398771,"byte_end":398774,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(c, vec![2.0, 4.0, 6.0, 8.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398775,"byte_end":398819,"line_start":172,"line_end":172,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398820,"byte_end":398827,"line_start":173,"line_end":173,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1647},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399207,"byte_end":399214,"line_start":192,"line_end":192,"column_start":8,"column_end":15},"name":"vec_sub","qualname":"::utils::vec_sub","value":"pub fn vec_sub<T: Copy + Sub<T, Output = T>>(&[T], &[T]) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Compute vector difference two slices.","sig":null,"attributes":[{"value":"/ Compute vector difference two slices.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398942,"byte_end":398983,"line_start":179,"line_end":179,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398984,"byte_end":398987,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":398988,"byte_end":399002,"line_start":181,"line_end":181,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399003,"byte_end":399006,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399007,"byte_end":399014,"line_start":183,"line_end":183,"column_start":1,"column_end":8}},{"value":"/ use rulinalg::utils;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399015,"byte_end":399039,"line_start":184,"line_end":184,"column_start":1,"column_end":25}},{"value":"/ let a = vec![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399040,"byte_end":399077,"line_start":185,"line_end":185,"column_start":1,"column_end":38}},{"value":"/ let b = vec![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399078,"byte_end":399115,"line_start":186,"line_end":186,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399116,"byte_end":399119,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ let c = utils::vec_sub(&a,&b);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399120,"byte_end":399154,"line_start":188,"line_end":188,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399155,"byte_end":399158,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(c, vec![0.0; 4]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399159,"byte_end":399191,"line_start":190,"line_end":190,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399192,"byte_end":399199,"line_start":191,"line_end":191,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1650},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399590,"byte_end":399597,"line_start":209,"line_end":209,"column_start":8,"column_end":15},"name":"ele_mul","qualname":"::utils::ele_mul","value":"pub fn ele_mul<T: Copy + Mul<T, Output = T>>(&[T], &[T]) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Computes elementwise multiplication.","sig":null,"attributes":[{"value":"/ Computes elementwise multiplication.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399313,"byte_end":399353,"line_start":196,"line_end":196,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399354,"byte_end":399357,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399358,"byte_end":399372,"line_start":198,"line_end":198,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399373,"byte_end":399376,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399377,"byte_end":399384,"line_start":200,"line_end":200,"column_start":1,"column_end":8}},{"value":"/ use rulinalg::utils;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399385,"byte_end":399409,"line_start":201,"line_end":201,"column_start":1,"column_end":25}},{"value":"/ let a = vec![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399410,"byte_end":399447,"line_start":202,"line_end":202,"column_start":1,"column_end":38}},{"value":"/ let b = vec![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399448,"byte_end":399485,"line_start":203,"line_end":203,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399486,"byte_end":399489,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ let c = utils::ele_mul(&a,&b);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399490,"byte_end":399524,"line_start":205,"line_end":205,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399525,"byte_end":399528,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(c, vec![1.0, 4.0, 9.0, 16.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399529,"byte_end":399574,"line_start":207,"line_end":207,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399575,"byte_end":399582,"line_start":208,"line_end":208,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1653},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399954,"byte_end":399961,"line_start":226,"line_end":226,"column_start":8,"column_end":15},"name":"ele_div","qualname":"::utils::ele_div","value":"pub fn ele_div<T: Copy + Div<T, Output = T>>(&[T], &[T]) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Computes elementwise division.","sig":null,"attributes":[{"value":"/ Computes elementwise division.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399696,"byte_end":399730,"line_start":213,"line_end":213,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399731,"byte_end":399734,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399735,"byte_end":399749,"line_start":215,"line_end":215,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399750,"byte_end":399753,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399754,"byte_end":399761,"line_start":217,"line_end":217,"column_start":1,"column_end":8}},{"value":"/ use rulinalg::utils;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399762,"byte_end":399786,"line_start":218,"line_end":218,"column_start":1,"column_end":25}},{"value":"/ let a = vec![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399787,"byte_end":399824,"line_start":219,"line_end":219,"column_start":1,"column_end":38}},{"value":"/ let b = vec![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399825,"byte_end":399862,"line_start":220,"line_end":220,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399863,"byte_end":399866,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ let c = utils::ele_div(&a,&b);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399867,"byte_end":399901,"line_start":222,"line_end":222,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399902,"byte_end":399905,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(c, vec![1.0; 4]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399906,"byte_end":399938,"line_start":224,"line_end":224,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":399939,"byte_end":399946,"line_start":225,"line_end":225,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1656},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400330,"byte_end":400336,"line_start":245,"line_end":245,"column_start":8,"column_end":14},"name":"argmax","qualname":"::utils::argmax","value":"pub fn argmax<T>(&[T]) -> (usize, T) where T: Copy + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Find argmax of slice.","sig":null,"attributes":[{"value":"/ Find argmax of slice.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400061,"byte_end":400086,"line_start":231,"line_end":231,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400087,"byte_end":400090,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ Returns index of first occuring maximum.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400091,"byte_end":400135,"line_start":233,"line_end":233,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400136,"byte_end":400139,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400140,"byte_end":400154,"line_start":235,"line_end":235,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400155,"byte_end":400158,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400159,"byte_end":400166,"line_start":237,"line_end":237,"column_start":1,"column_end":8}},{"value":"/ use rulinalg::utils;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400167,"byte_end":400191,"line_start":238,"line_end":238,"column_start":1,"column_end":25}},{"value":"/ let a = vec![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400192,"byte_end":400229,"line_start":239,"line_end":239,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400230,"byte_end":400233,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ let c = utils::argmax(&a);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400234,"byte_end":400264,"line_start":241,"line_end":241,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(c.0, 3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400265,"byte_end":400288,"line_start":242,"line_end":242,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(c.1, 4.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400289,"byte_end":400314,"line_start":243,"line_end":243,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400315,"byte_end":400322,"line_start":244,"line_end":244,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1658},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400914,"byte_end":400920,"line_start":277,"line_end":277,"column_start":8,"column_end":14},"name":"argmin","qualname":"::utils::argmin","value":"pub fn argmin<T>(&[T]) -> (usize, T) where T: Copy + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Find argmin of slice.","sig":null,"attributes":[{"value":"/ Find argmin of slice.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400645,"byte_end":400670,"line_start":263,"line_end":263,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400671,"byte_end":400674,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ Returns index of first occuring minimum.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400675,"byte_end":400719,"line_start":265,"line_end":265,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400720,"byte_end":400723,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400724,"byte_end":400738,"line_start":267,"line_end":267,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400739,"byte_end":400742,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400743,"byte_end":400750,"line_start":269,"line_end":269,"column_start":1,"column_end":8}},{"value":"/ use rulinalg::utils;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400751,"byte_end":400775,"line_start":270,"line_end":270,"column_start":1,"column_end":25}},{"value":"/ let a = vec![5.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400776,"byte_end":400813,"line_start":271,"line_end":271,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400814,"byte_end":400817,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ let c = utils::argmin(&a);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400818,"byte_end":400848,"line_start":273,"line_end":273,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(c.0, 1);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400849,"byte_end":400872,"line_start":274,"line_end":274,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(c.1, 2.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400873,"byte_end":400898,"line_start":275,"line_end":275,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":400899,"byte_end":400906,"line_start":276,"line_end":276,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1660},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":401479,"byte_end":401483,"line_start":308,"line_end":308,"column_start":8,"column_end":12},"name":"find","qualname":"::utils::find","value":"pub fn find<T>(&[T], T) -> usize where T: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Find index of value in slice.","sig":null,"attributes":[{"value":"/ Find index of value in slice.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":401229,"byte_end":401262,"line_start":295,"line_end":295,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":401263,"byte_end":401266,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ Returns index of first occuring value.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":401267,"byte_end":401309,"line_start":297,"line_end":297,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":401310,"byte_end":401313,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":401314,"byte_end":401328,"line_start":299,"line_end":299,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":401329,"byte_end":401332,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":401333,"byte_end":401340,"line_start":301,"line_end":301,"column_start":1,"column_end":8}},{"value":"/ use rulinalg::utils;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":401341,"byte_end":401365,"line_start":302,"line_end":302,"column_start":1,"column_end":25}},{"value":"/ let a = vec![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":401366,"byte_end":401403,"line_start":303,"line_end":303,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":401404,"byte_end":401407,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ let c = utils::find(&a, 3.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":401408,"byte_end":401441,"line_start":305,"line_end":305,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(c, 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":401442,"byte_end":401463,"line_start":306,"line_end":306,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/utils.rs","byte_start":401464,"byte_end":401471,"line_start":307,"line_end":307,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1662},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vector","qualname":"::vector","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/mod.rs","parent":null,"children":[{"krate":0,"index":1663},{"krate":0,"index":1743},{"krate":0,"index":4376},{"krate":0,"index":4380},{"krate":0,"index":4383},{"krate":0,"index":4385},{"krate":0,"index":4389},{"krate":0,"index":4391},{"krate":0,"index":4394}],"decl_id":null,"docs":" The vector module.","sig":null,"attributes":[{"value":"/ The vector module.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/mod.rs","byte_start":401672,"byte_end":401694,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/mod.rs","byte_start":401695,"byte_end":401698,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Currently contains all code","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/mod.rs","byte_start":401699,"byte_end":401730,"line_start":3,"line_end":3,"column_start":1,"column_end":32}},{"value":"/ relating to the vector linear algebra struct.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/mod.rs","byte_start":401731,"byte_end":401780,"line_start":4,"line_end":4,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1798},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433512,"byte_end":433515,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<Vector<T>>::new","value":"pub fn new<U: Into<Vec<T>>>(U) -> Vector<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructor for Vector struct.","sig":null,"attributes":[{"value":"/ Constructor for Vector struct.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433265,"byte_end":433299,"line_start":14,"line_end":14,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433304,"byte_end":433307,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ Requires the vector data.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433312,"byte_end":433341,"line_start":16,"line_end":16,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433346,"byte_end":433349,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433354,"byte_end":433368,"line_start":18,"line_end":18,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433373,"byte_end":433376,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433381,"byte_end":433388,"line_start":20,"line_end":20,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::vector::Vector;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433393,"byte_end":433426,"line_start":21,"line_end":21,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433431,"byte_end":433434,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ let vec = Vector::new(vec![1.0,2.0,3.0,4.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433439,"byte_end":433488,"line_start":23,"line_end":23,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433493,"byte_end":433500,"line_start":24,"line_end":24,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1800},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":434148,"byte_end":434155,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<Vector<T>>::from_fn","value":"pub fn from_fn<F>(usize, F) -> Vector<T> where F: FnMut(usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Constructor for Vector struct that takes a function `f`\n and constructs a new vector such that `V_i = f(i)`,\n where `i` is the index.","sig":null,"attributes":[{"value":"/ Constructor for Vector struct that takes a function `f`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433719,"byte_end":433778,"line_start":35,"line_end":35,"column_start":5,"column_end":64}},{"value":"/ and constructs a new vector such that `V_i = f(i)`,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433783,"byte_end":433838,"line_start":36,"line_end":36,"column_start":5,"column_end":60}},{"value":"/ where `i` is the index.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433843,"byte_end":433870,"line_start":37,"line_end":37,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433875,"byte_end":433878,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433883,"byte_end":433897,"line_start":39,"line_end":39,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433902,"byte_end":433905,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433910,"byte_end":433917,"line_start":41,"line_end":41,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433922,"byte_end":433975,"line_start":42,"line_end":42,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::vector::Vector;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433980,"byte_end":434013,"line_start":43,"line_end":43,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":434018,"byte_end":434021,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ let v = Vector::from_fn(4, |x| x * 3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":434026,"byte_end":434068,"line_start":45,"line_end":45,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(v, vector![0, 3, 6, 9]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":434073,"byte_end":434112,"line_start":46,"line_end":46,"column_start":5,"column_end":44}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":434117,"byte_end":434124,"line_start":47,"line_end":47,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":434129,"byte_end":434136,"line_start":48,"line_end":48,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1803},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":434441,"byte_end":434445,"line_start":61,"line_end":61,"column_start":12,"column_end":16},"name":"size","qualname":"<Vector<T>>::size","value":"pub fn size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of the Vector.\n","sig":null,"attributes":[{"value":"/ Returns the size of the Vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":434394,"byte_end":434429,"line_start":60,"line_end":60,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1804},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":434564,"byte_end":434568,"line_start":66,"line_end":66,"column_start":12,"column_end":16},"name":"data","qualname":"<Vector<T>>::data","value":"pub fn data(&Self) -> &Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a non-mutable reference to the underlying data.\n","sig":null,"attributes":[{"value":"/ Returns a non-mutable reference to the underlying data.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":434493,"byte_end":434552,"line_start":65,"line_end":65,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1805},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":434682,"byte_end":434690,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"mut_data","qualname":"<Vector<T>>::mut_data","value":"pub fn mut_data(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable slice of the underlying data.\n","sig":null,"attributes":[{"value":"/ Returns a mutable slice of the underlying data.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":434619,"byte_end":434670,"line_start":70,"line_end":70,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1806},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":434814,"byte_end":434822,"line_start":76,"line_end":76,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<Vector<T>>::into_vec","value":"pub fn into_vec(Self) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the Vector and returns the Vec of data.\n","sig":null,"attributes":[{"value":"/ Consumes the Vector and returns the Vec of data.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":434750,"byte_end":434802,"line_start":75,"line_end":75,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1807},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":434929,"byte_end":434933,"line_start":81,"line_end":81,"column_start":12,"column_end":16},"name":"iter","qualname":"<Vector<T>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the Vector's data.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the Vector's data.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":434870,"byte_end":434917,"line_start":80,"line_end":80,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1808},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":435071,"byte_end":435079,"line_start":86,"line_end":86,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Vector<T>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over mutable references to the Vector's data.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over mutable references to the Vector's data.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":434990,"byte_end":435059,"line_start":85,"line_end":85,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1809},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":435267,"byte_end":435280,"line_start":92,"line_end":92,"column_start":19,"column_end":32},"name":"get_unchecked","qualname":"<Vector<T>>::get_unchecked","value":"pub unsafe fn get_unchecked(&Self, usize) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a pointer to the element at the given index, without doing\n bounds checking.\n","sig":null,"attributes":[{"value":"/ Returns a pointer to the element at the given index, without doing","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":435153,"byte_end":435223,"line_start":90,"line_end":90,"column_start":5,"column_end":75}},{"value":"/ bounds checking.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":435228,"byte_end":435248,"line_start":91,"line_end":91,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1810},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":435490,"byte_end":435507,"line_start":98,"line_end":98,"column_start":19,"column_end":36},"name":"get_unchecked_mut","qualname":"<Vector<T>>::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut(&mut Self, usize) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable pointer to the element at the given index,\n without doing bounds checking.\n","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable pointer to the element at the given index,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":435360,"byte_end":435432,"line_start":96,"line_end":96,"column_start":5,"column_end":77}},{"value":"/ without doing bounds checking.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":435437,"byte_end":435471,"line_start":97,"line_end":97,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1837},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437520,"byte_end":437525,"line_start":185,"line_end":185,"column_start":12,"column_end":17},"name":"apply","qualname":"<Vector<T>>::apply","value":"pub fn apply(Self, &Fn(T) -> T) -> Vector<T>","parent":null,"children":[],"decl_id":null,"docs":" Applies a function to each element in the vector.","sig":null,"attributes":[{"value":"/ Applies a function to each element in the vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437090,"byte_end":437143,"line_start":167,"line_end":167,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437148,"byte_end":437151,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437156,"byte_end":437170,"line_start":169,"line_end":169,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437175,"byte_end":437178,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437183,"byte_end":437190,"line_start":171,"line_end":171,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437195,"byte_end":437248,"line_start":172,"line_end":172,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::vector::Vector;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437253,"byte_end":437286,"line_start":173,"line_end":173,"column_start":5,"column_end":38}},{"value":"/ fn add_two(a: f64) -> f64 {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437291,"byte_end":437322,"line_start":174,"line_end":174,"column_start":5,"column_end":36}},{"value":"/     a + 2f64","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437327,"byte_end":437343,"line_start":175,"line_end":175,"column_start":5,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437348,"byte_end":437353,"line_start":176,"line_end":176,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437358,"byte_end":437361,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ let a = vector![0.; 4];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437366,"byte_end":437393,"line_start":178,"line_end":178,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437398,"byte_end":437401,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ let b = a.apply(&add_two);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437406,"byte_end":437436,"line_start":180,"line_end":180,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437441,"byte_end":437444,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b, vector![2.0; 4]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437449,"byte_end":437484,"line_start":182,"line_end":182,"column_start":5,"column_end":40}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437489,"byte_end":437496,"line_start":183,"line_end":183,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437501,"byte_end":437508,"line_start":184,"line_end":184,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1840},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438125,"byte_end":438131,"line_start":210,"line_end":210,"column_start":12,"column_end":18},"name":"argmax","qualname":"<Vector<T>>::argmax","value":"pub fn argmax(&Self) -> (usize, T)","parent":null,"children":[],"decl_id":null,"docs":" Find the argmax of the Vector.","sig":null,"attributes":[{"value":"/ Find the argmax of the Vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437706,"byte_end":437740,"line_start":194,"line_end":194,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437745,"byte_end":437748,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Returns the index of the largest value in the vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437753,"byte_end":437810,"line_start":196,"line_end":196,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437815,"byte_end":437818,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437823,"byte_end":437837,"line_start":198,"line_end":198,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437842,"byte_end":437845,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437850,"byte_end":437857,"line_start":200,"line_end":200,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437862,"byte_end":437915,"line_start":201,"line_end":201,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::vector::Vector;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437920,"byte_end":437953,"line_start":202,"line_end":202,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437958,"byte_end":437961,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ let a = vector![1.0,2.0,0.0,5.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437966,"byte_end":438003,"line_start":204,"line_end":204,"column_start":5,"column_end":42}},{"value":"/ let b = a.argmax();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438008,"byte_end":438031,"line_start":205,"line_end":205,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(b.0, 3);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438036,"byte_end":438059,"line_start":206,"line_end":206,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(b.1, 5.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438064,"byte_end":438089,"line_start":207,"line_end":207,"column_start":5,"column_end":30}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438094,"byte_end":438101,"line_start":208,"line_end":208,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438106,"byte_end":438113,"line_start":209,"line_end":209,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1841},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438623,"byte_end":438629,"line_start":230,"line_end":230,"column_start":12,"column_end":18},"name":"argmin","qualname":"<Vector<T>>::argmin","value":"pub fn argmin(&Self) -> (usize, T)","parent":null,"children":[],"decl_id":null,"docs":" Find the argmin of the Vector.","sig":null,"attributes":[{"value":"/ Find the argmin of the Vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438200,"byte_end":438234,"line_start":214,"line_end":214,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438239,"byte_end":438242,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Returns the index of the smallest value in the vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438247,"byte_end":438305,"line_start":216,"line_end":216,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438310,"byte_end":438313,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438318,"byte_end":438332,"line_start":218,"line_end":218,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438337,"byte_end":438340,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438345,"byte_end":438352,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438357,"byte_end":438410,"line_start":221,"line_end":221,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::vector::Vector;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438415,"byte_end":438448,"line_start":222,"line_end":222,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438453,"byte_end":438456,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ let a = vector![1.0, 2.0, 0.0, 5.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438461,"byte_end":438501,"line_start":224,"line_end":224,"column_start":5,"column_end":45}},{"value":"/ let b = a.argmin();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438506,"byte_end":438529,"line_start":225,"line_end":225,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(b.0, 2);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438534,"byte_end":438557,"line_start":226,"line_end":226,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(b.1, 0.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438562,"byte_end":438587,"line_start":227,"line_end":227,"column_start":5,"column_end":30}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438592,"byte_end":438599,"line_start":228,"line_end":228,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438604,"byte_end":438611,"line_start":229,"line_end":229,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1842},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439142,"byte_end":439148,"line_start":250,"line_end":250,"column_start":12,"column_end":18},"name":"select","qualname":"<Vector<T>>::select","value":"pub fn select(&Self, &[usize]) -> Vector<T>","parent":null,"children":[],"decl_id":null,"docs":" Select elements from the Vector and form a new Vector from them.","sig":null,"attributes":[{"value":"/ Select elements from the Vector and form a new Vector from them.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438698,"byte_end":438766,"line_start":234,"line_end":234,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438771,"byte_end":438774,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438779,"byte_end":438793,"line_start":236,"line_end":236,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438798,"byte_end":438801,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438806,"byte_end":438813,"line_start":238,"line_end":238,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438818,"byte_end":438871,"line_start":239,"line_end":239,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::vector::Vector;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438876,"byte_end":438909,"line_start":240,"line_end":240,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438914,"byte_end":438917,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ let a = vector![1.0, 2.0, 3.0, 4.0, 5.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438922,"byte_end":438967,"line_start":242,"line_end":242,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438972,"byte_end":438975,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ let a_lower = a.select(&[2, 3, 4]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":438980,"byte_end":439019,"line_start":244,"line_end":244,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439024,"byte_end":439027,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ // Prints [3,4,5]","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439032,"byte_end":439053,"line_start":246,"line_end":246,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a_lower, vector![3.0, 4.0, 5.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439058,"byte_end":439106,"line_start":247,"line_end":247,"column_start":5,"column_end":53}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439111,"byte_end":439118,"line_start":248,"line_end":248,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439123,"byte_end":439130,"line_start":249,"line_end":249,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1845},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439657,"byte_end":439662,"line_start":273,"line_end":273,"column_start":12,"column_end":17},"name":"zeros","qualname":"<Vector<T>>::zeros","value":"pub fn zeros(usize) -> Vector<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs Vector of all zeros.","sig":null,"attributes":[{"value":"/ Constructs Vector of all zeros.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439412,"byte_end":439447,"line_start":262,"line_end":262,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439452,"byte_end":439455,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ Requires the size of the vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439460,"byte_end":439496,"line_start":264,"line_end":264,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439501,"byte_end":439504,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439509,"byte_end":439523,"line_start":266,"line_end":266,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439528,"byte_end":439531,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439536,"byte_end":439543,"line_start":268,"line_end":268,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::vector::Vector;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439548,"byte_end":439581,"line_start":269,"line_end":269,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439586,"byte_end":439589,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ let vec = Vector::<f64>::zeros(10);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439594,"byte_end":439633,"line_start":271,"line_end":271,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439638,"byte_end":439645,"line_start":272,"line_end":272,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1848},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440072,"byte_end":440076,"line_start":293,"line_end":293,"column_start":12,"column_end":16},"name":"ones","qualname":"<Vector<T>>::ones","value":"pub fn ones(usize) -> Vector<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs Vector of all ones.","sig":null,"attributes":[{"value":"/ Constructs Vector of all ones.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439829,"byte_end":439863,"line_start":282,"line_end":282,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439868,"byte_end":439871,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ Requires the size of the vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439876,"byte_end":439912,"line_start":284,"line_end":284,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439917,"byte_end":439920,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439925,"byte_end":439939,"line_start":286,"line_end":286,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439944,"byte_end":439947,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439952,"byte_end":439959,"line_start":288,"line_end":288,"column_start":5,"column_end":12}},{"value":"/ use rulinalg::vector::Vector;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439964,"byte_end":439997,"line_start":289,"line_end":289,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440002,"byte_end":440005,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ let vec = Vector::<f64>::ones(10);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440010,"byte_end":440048,"line_start":291,"line_end":291,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440053,"byte_end":440060,"line_start":292,"line_end":292,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1851},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440659,"byte_end":440662,"line_start":317,"line_end":317,"column_start":12,"column_end":15},"name":"dot","qualname":"<Vector<T>>::dot","value":"pub fn dot(&Self, &Vector<T>) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compute dot product with specified Vector.","sig":null,"attributes":[{"value":"/ Compute dot product with specified Vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440284,"byte_end":440330,"line_start":302,"line_end":302,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440335,"byte_end":440338,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440343,"byte_end":440357,"line_start":304,"line_end":304,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440362,"byte_end":440365,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440370,"byte_end":440377,"line_start":306,"line_end":306,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440382,"byte_end":440435,"line_start":307,"line_end":307,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::vector::Vector;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440440,"byte_end":440473,"line_start":308,"line_end":308,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440478,"byte_end":440481,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ let a = vector![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440486,"byte_end":440526,"line_start":310,"line_end":310,"column_start":5,"column_end":45}},{"value":"/ let b = vector![2.0; 4];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440531,"byte_end":440559,"line_start":311,"line_end":311,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440564,"byte_end":440567,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ let c = a.dot(&b);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440572,"byte_end":440594,"line_start":313,"line_end":313,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(c, 20.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440599,"byte_end":440623,"line_start":314,"line_end":314,"column_start":5,"column_end":29}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440628,"byte_end":440635,"line_start":315,"line_end":315,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440640,"byte_end":440647,"line_start":316,"line_end":316,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1854},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441182,"byte_end":441185,"line_start":339,"line_end":339,"column_start":12,"column_end":15},"name":"sum","qualname":"<Vector<T>>::sum","value":"pub fn sum(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" The sum of the vector.","sig":null,"attributes":[{"value":"/ The sum of the vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440799,"byte_end":440825,"line_start":323,"line_end":323,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440830,"byte_end":440833,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ Returns the sum of all elements in the vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440838,"byte_end":440888,"line_start":325,"line_end":325,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440893,"byte_end":440896,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440901,"byte_end":440915,"line_start":327,"line_end":327,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440920,"byte_end":440923,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440928,"byte_end":440935,"line_start":329,"line_end":329,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440940,"byte_end":440993,"line_start":330,"line_end":330,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::vector::Vector;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440998,"byte_end":441031,"line_start":331,"line_end":331,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441036,"byte_end":441039,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ let a = vector![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441044,"byte_end":441084,"line_start":333,"line_end":333,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441089,"byte_end":441092,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ let c = a.sum();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441097,"byte_end":441117,"line_start":335,"line_end":335,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(c, 10.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441122,"byte_end":441146,"line_start":336,"line_end":336,"column_start":5,"column_end":29}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441151,"byte_end":441158,"line_start":337,"line_end":337,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441163,"byte_end":441170,"line_start":338,"line_end":338,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1857},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441717,"byte_end":441723,"line_start":360,"line_end":360,"column_start":12,"column_end":18},"name":"elemul","qualname":"<Vector<T>>::elemul","value":"pub fn elemul(&Self, &Vector<T>) -> Vector<T>","parent":null,"children":[],"decl_id":null,"docs":" The elementwise product of two vectors.","sig":null,"attributes":[{"value":"/ The elementwise product of two vectors.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441304,"byte_end":441347,"line_start":345,"line_end":345,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441352,"byte_end":441355,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441360,"byte_end":441374,"line_start":347,"line_end":347,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441379,"byte_end":441382,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441387,"byte_end":441394,"line_start":349,"line_end":349,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441399,"byte_end":441452,"line_start":350,"line_end":350,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::vector::Vector;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441457,"byte_end":441490,"line_start":351,"line_end":351,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441495,"byte_end":441498,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ let a = vector![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441503,"byte_end":441543,"line_start":353,"line_end":353,"column_start":5,"column_end":45}},{"value":"/ let b = vector![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441548,"byte_end":441588,"line_start":354,"line_end":354,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441593,"byte_end":441596,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ let c = &a.elemul(&b);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441601,"byte_end":441627,"line_start":356,"line_end":356,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(c, &vector![1.0, 4.0, 9.0, 16.0]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441632,"byte_end":441681,"line_start":357,"line_end":357,"column_start":5,"column_end":54}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441686,"byte_end":441693,"line_start":358,"line_end":358,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441698,"byte_end":441705,"line_start":359,"line_end":359,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1860},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442318,"byte_end":442324,"line_start":382,"line_end":382,"column_start":12,"column_end":18},"name":"elediv","qualname":"<Vector<T>>::elediv","value":"pub fn elediv(&Self, &Vector<T>) -> Vector<T>","parent":null,"children":[],"decl_id":null,"docs":" The elementwise division of two vectors.","sig":null,"attributes":[{"value":"/ The elementwise division of two vectors.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441917,"byte_end":441961,"line_start":367,"line_end":367,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441966,"byte_end":441969,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441974,"byte_end":441988,"line_start":369,"line_end":369,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441993,"byte_end":441996,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442001,"byte_end":442008,"line_start":371,"line_end":371,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442013,"byte_end":442066,"line_start":372,"line_end":372,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::vector::Vector;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442071,"byte_end":442104,"line_start":373,"line_end":373,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442109,"byte_end":442112,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ let a = vector![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442117,"byte_end":442157,"line_start":375,"line_end":375,"column_start":5,"column_end":45}},{"value":"/ let b = vector![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442162,"byte_end":442202,"line_start":376,"line_end":376,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442207,"byte_end":442210,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ let c = &a.elediv(&b);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442215,"byte_end":442241,"line_start":378,"line_end":378,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(c, &vector![1.0; 4]);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442246,"byte_end":442282,"line_start":379,"line_end":379,"column_start":5,"column_end":41}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442287,"byte_end":442294,"line_start":380,"line_end":380,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442299,"byte_end":442306,"line_start":381,"line_end":381,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1863},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442865,"byte_end":442869,"line_start":404,"line_end":404,"column_start":12,"column_end":16},"name":"norm","qualname":"<Vector<T>>::norm","value":"pub fn norm<N: VectorNorm<T>>(&Self, N) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compute vector norm for vector.","sig":null,"attributes":[{"value":"/ Compute vector norm for vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442498,"byte_end":442533,"line_start":389,"line_end":389,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442538,"byte_end":442541,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442546,"byte_end":442560,"line_start":391,"line_end":391,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442565,"byte_end":442568,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442573,"byte_end":442580,"line_start":393,"line_end":393,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442585,"byte_end":442638,"line_start":394,"line_end":394,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::vector::Vector;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442643,"byte_end":442676,"line_start":395,"line_end":395,"column_start":5,"column_end":38}},{"value":"/ use rulinalg::norm::Euclidean;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442681,"byte_end":442715,"line_start":396,"line_end":396,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442720,"byte_end":442723,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ let a = vector![3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442728,"byte_end":442758,"line_start":398,"line_end":398,"column_start":5,"column_end":35}},{"value":"/ let c = a.norm(Euclidean);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442763,"byte_end":442793,"line_start":399,"line_end":399,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442798,"byte_end":442801,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(c, 5.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442806,"byte_end":442829,"line_start":401,"line_end":401,"column_start":5,"column_end":28}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442834,"byte_end":442841,"line_start":402,"line_end":402,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442846,"byte_end":442853,"line_start":403,"line_end":403,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1865},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443459,"byte_end":443465,"line_start":426,"line_end":426,"column_start":12,"column_end":18},"name":"metric","qualname":"<Vector<T>>::metric","value":"pub fn metric<M: VectorMetric<T>>(&Self, &Vector<T>, M) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compute metric distance between two vectors.","sig":null,"attributes":[{"value":"/ Compute metric distance between two vectors.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442946,"byte_end":442994,"line_start":408,"line_end":408,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442999,"byte_end":443002,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443007,"byte_end":443021,"line_start":410,"line_end":410,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443026,"byte_end":443029,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443034,"byte_end":443041,"line_start":412,"line_end":412,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443046,"byte_end":443099,"line_start":413,"line_end":413,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::vector::Vector;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443104,"byte_end":443137,"line_start":414,"line_end":414,"column_start":5,"column_end":38}},{"value":"/ use rulinalg::norm::Euclidean;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443142,"byte_end":443176,"line_start":415,"line_end":415,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443181,"byte_end":443184,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ let a = vector![3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443189,"byte_end":443219,"line_start":417,"line_end":417,"column_start":5,"column_end":35}},{"value":"/ let b = vector![0.0, 8.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443224,"byte_end":443254,"line_start":418,"line_end":418,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443259,"byte_end":443262,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ // Compute the square root of the sum of","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443267,"byte_end":443311,"line_start":420,"line_end":420,"column_start":5,"column_end":49}},{"value":"/ // elementwise squared-differences","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443316,"byte_end":443354,"line_start":421,"line_end":421,"column_start":5,"column_end":43}},{"value":"/ let c = a.metric(&b, Euclidean);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443359,"byte_end":443395,"line_start":422,"line_end":422,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(c, 5.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443400,"byte_end":443423,"line_start":423,"line_end":423,"column_start":5,"column_end":28}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443428,"byte_end":443435,"line_start":424,"line_end":424,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443440,"byte_end":443447,"line_start":425,"line_end":425,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1869},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443983,"byte_end":443987,"line_start":448,"line_end":448,"column_start":12,"column_end":16},"name":"mean","qualname":"<Vector<T>>::mean","value":"pub fn mean(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" The mean of the vector.","sig":null,"attributes":[{"value":"/ The mean of the vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443603,"byte_end":443630,"line_start":432,"line_end":432,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443635,"byte_end":443638,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ Returns the arithmetic mean of the vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443643,"byte_end":443689,"line_start":434,"line_end":434,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443694,"byte_end":443697,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443702,"byte_end":443716,"line_start":436,"line_end":436,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443721,"byte_end":443724,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443729,"byte_end":443736,"line_start":438,"line_end":438,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443741,"byte_end":443794,"line_start":439,"line_end":439,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::vector::Vector;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443799,"byte_end":443832,"line_start":440,"line_end":440,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443837,"byte_end":443840,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ let a = vector![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443845,"byte_end":443885,"line_start":442,"line_end":442,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443890,"byte_end":443893,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ let c = a.mean();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443898,"byte_end":443919,"line_start":444,"line_end":444,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(c, 2.5);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443924,"byte_end":443947,"line_start":445,"line_end":445,"column_start":5,"column_end":28}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443952,"byte_end":443959,"line_start":446,"line_end":446,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443964,"byte_end":443971,"line_start":447,"line_end":447,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1870},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":444508,"byte_end":444516,"line_start":469,"line_end":469,"column_start":12,"column_end":20},"name":"variance","qualname":"<Vector<T>>::variance","value":"pub fn variance(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" The variance of the vector.","sig":null,"attributes":[{"value":"/ The variance of the vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":444105,"byte_end":444136,"line_start":453,"line_end":453,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":444141,"byte_end":444144,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ Returns the unbiased sample variance of the vector.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":444149,"byte_end":444204,"line_start":455,"line_end":455,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":444209,"byte_end":444212,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":444217,"byte_end":444231,"line_start":457,"line_end":457,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":444236,"byte_end":444239,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":444244,"byte_end":444251,"line_start":459,"line_end":459,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate rulinalg; fn main() {","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":444256,"byte_end":444309,"line_start":460,"line_end":460,"column_start":5,"column_end":58}},{"value":"/ use rulinalg::vector::Vector;","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":444314,"byte_end":444347,"line_start":461,"line_end":461,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":444352,"byte_end":444355,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ let a = vector![1.0, 2.0, 3.0, 4.0];","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":444360,"byte_end":444400,"line_start":463,"line_end":463,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":444405,"byte_end":444408,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ let c = a.variance();","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":444413,"byte_end":444438,"line_start":465,"line_end":465,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(c, 5.0 / 3.0);","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":444443,"byte_end":444472,"line_start":466,"line_end":466,"column_start":5,"column_end":34}},{"value":"/ # }","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":444477,"byte_end":444484,"line_start":467,"line_end":467,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":444489,"byte_end":444496,"line_start":468,"line_end":468,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4376},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/mod.rs","byte_start":401926,"byte_end":401932,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"Vector","qualname":"::vector::Vector","value":"Vector {  }","parent":null,"children":[{"krate":0,"index":4378},{"krate":0,"index":4379}],"decl_id":null,"docs":" The Vector struct.","sig":null,"attributes":[{"value":"/ The Vector struct.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/mod.rs","byte_start":401811,"byte_end":401833,"line_start":9,"line_end":9,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/mod.rs","byte_start":401834,"byte_end":401837,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Can be instantiated with any type.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/mod.rs","byte_start":401838,"byte_end":401876,"line_start":11,"line_end":11,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":1871},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ulp","qualname":"::ulp","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","parent":null,"children":[{"krate":0,"index":1872},{"krate":0,"index":4398},{"krate":0,"index":4408},{"krate":0,"index":4410},{"krate":0,"index":4411},{"krate":0,"index":4413},{"krate":0,"index":4414},{"krate":0,"index":1875},{"krate":0,"index":4417},{"krate":0,"index":4419}],"decl_id":null,"docs":" Tools for ULP-based comparison of floating point numbers.\n","sig":null,"attributes":[{"value":"/ Tools for ULP-based comparison of floating point numbers.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":449820,"byte_end":449881,"line_start":1,"line_end":1,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4399},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450131,"byte_end":450141,"line_start":9,"line_end":9,"column_start":5,"column_end":15},"name":"ExactMatch","qualname":"::ulp::UlpComparisonResult::ExactMatch","value":"UlpComparisonResult::ExactMatch","parent":{"krate":0,"index":4398},"children":[],"decl_id":null,"docs":" Signifies an exact match between two floating point numbers.\n","sig":null,"attributes":[{"value":"/ Signifies an exact match between two floating point numbers.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450062,"byte_end":450126,"line_start":8,"line_end":8,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4401},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450213,"byte_end":450223,"line_start":11,"line_end":11,"column_start":5,"column_end":15},"name":"Difference","qualname":"::ulp::UlpComparisonResult::Difference","value":"UlpComparisonResult::Difference(u64)","parent":{"krate":0,"index":4398},"children":[],"decl_id":null,"docs":" The difference in ULP between two floating point numbers.\n","sig":null,"attributes":[{"value":"/ The difference in ULP between two floating point numbers.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450147,"byte_end":450208,"line_start":10,"line_end":10,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4404},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450347,"byte_end":450364,"line_start":14,"line_end":14,"column_start":5,"column_end":22},"name":"IncompatibleSigns","qualname":"::ulp::UlpComparisonResult::IncompatibleSigns","value":"UlpComparisonResult::IncompatibleSigns","parent":{"krate":0,"index":4398},"children":[],"decl_id":null,"docs":" The two floating point numbers have different signs,\n and cannot be compared in a meaningful way.\n","sig":null,"attributes":[{"value":"/ The two floating point numbers have different signs,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450234,"byte_end":450290,"line_start":12,"line_end":12,"column_start":5,"column_end":61}},{"value":"/ and cannot be compared in a meaningful way.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450295,"byte_end":450342,"line_start":13,"line_end":13,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4406},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450494,"byte_end":450497,"line_start":17,"line_end":17,"column_start":5,"column_end":8},"name":"Nan","qualname":"::ulp::UlpComparisonResult::Nan","value":"UlpComparisonResult::Nan","parent":{"krate":0,"index":4398},"children":[],"decl_id":null,"docs":" One or both of the two floating point numbers is a NaN,\n in which case the ULP comparison is not meaningful.\n","sig":null,"attributes":[{"value":"/ One or both of the two floating point numbers is a NaN,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450370,"byte_end":450429,"line_start":15,"line_end":15,"column_start":5,"column_end":64}},{"value":"/ in which case the ULP comparison is not meaningful.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450434,"byte_end":450489,"line_start":16,"line_end":16,"column_start":5,"column_end":60}}]},{"kind":"Enum","id":{"krate":0,"index":4398},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450036,"byte_end":450055,"line_start":6,"line_end":6,"column_start":10,"column_end":29},"name":"UlpComparisonResult","qualname":"::ulp::UlpComparisonResult","value":"pub enum UlpComparisonResult {\n    ExactMatch,\n    Difference(u64),\n    IncompatibleSigns,\n    Nan,\n}","parent":null,"children":[{"krate":0,"index":4399},{"krate":0,"index":4401},{"krate":0,"index":4404},{"krate":0,"index":4406}],"decl_id":null,"docs":" Represents the result of an ULP-based comparison between two floating point numbers.\n","sig":null,"attributes":[{"value":"/ Represents the result of an ULP-based comparison between two floating point numbers.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":449897,"byte_end":449985,"line_start":4,"line_end":4,"column_start":1,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":1875},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":451571,"byte_end":451574,"line_start":36,"line_end":36,"column_start":11,"column_end":14},"name":"Ulp","qualname":"::ulp::Ulp","value":"Ulp","parent":null,"children":[{"krate":0,"index":1876}],"decl_id":null,"docs":" Floating point types for which two instances can be compared for Unit in the Last Place (ULP) difference.","sig":null,"attributes":[{"value":"/ Floating point types for which two instances can be compared for Unit in the Last Place (ULP) difference.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450501,"byte_end":450610,"line_start":20,"line_end":20,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450611,"byte_end":450614,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Implementing this trait enables the usage of the `ulp` comparator in","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450615,"byte_end":450687,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/ [assert_matrix_eq!](../macro.assert_matrix_eq!.html) for the given type.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450688,"byte_end":450764,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450765,"byte_end":450768,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The definition here leverages the fact that for two adjacent floating point numbers,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450769,"byte_end":450857,"line_start":25,"line_end":25,"column_start":1,"column_end":89}},{"value":"/ their integer representations are also adjacent.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450858,"byte_end":450910,"line_start":26,"line_end":26,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450911,"byte_end":450914,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ A somewhat accessible (but not exhaustive) guide on the topic is available in the popular article","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":450915,"byte_end":451016,"line_start":28,"line_end":28,"column_start":1,"column_end":102}},{"value":"/ [Comparing Floating Point Numbers, 2012 Edition]","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":451017,"byte_end":451069,"line_start":29,"line_end":29,"column_start":1,"column_end":53}},{"value":"/ (https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":451070,"byte_end":451168,"line_start":30,"line_end":30,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":451169,"byte_end":451172,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Implementations for `f32` and `f64` are already available, and so users should not normally","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":451173,"byte_end":451268,"line_start":32,"line_end":32,"column_start":1,"column_end":96}},{"value":"/ need to implement this. In the case when a custom implementation is necessary,","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":451269,"byte_end":451351,"line_start":33,"line_end":33,"column_start":1,"column_end":83}},{"value":"/ please see the possible return values for [UlpComparisonResult](ulp/enum.UlpComparisonResult.html).","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":451352,"byte_end":451455,"line_start":34,"line_end":34,"column_start":1,"column_end":104}},{"value":"/ Otherwise, we can recommend to read the source code of the included `f32` and `f64` implementations.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":451456,"byte_end":451560,"line_start":35,"line_end":35,"column_start":1,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":1876},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":451668,"byte_end":451676,"line_start":38,"line_end":38,"column_start":8,"column_end":16},"name":"ulp_diff","qualname":"::ulp::Ulp::ulp_diff","value":"pub fn ulp_diff(&Self, &Self) -> UlpComparisonResult","parent":{"krate":0,"index":1875},"children":[],"decl_id":null,"docs":" Returns the difference between two floating point numbers, measured in ULP.\n","sig":null,"attributes":[{"value":"/ Returns the difference between two floating point numbers, measured in ULP.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/ulp.rs","byte_start":451581,"byte_end":451660,"line_start":37,"line_end":37,"column_start":5,"column_end":84}}]},{"kind":"Mod","id":{"krate":0,"index":1878},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"norm","qualname":"::norm","value":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","parent":null,"children":[{"krate":0,"index":1879},{"krate":0,"index":1882},{"krate":0,"index":1885},{"krate":0,"index":1888},{"krate":0,"index":1891},{"krate":0,"index":1894},{"krate":0,"index":1897},{"krate":0,"index":1900},{"krate":0,"index":1904},{"krate":0,"index":1911},{"krate":0,"index":1915},{"krate":0,"index":4421},{"krate":0,"index":4423},{"krate":0,"index":1923},{"krate":0,"index":1926},{"krate":0,"index":4425},{"krate":0,"index":4435},{"krate":0,"index":1930},{"krate":0,"index":1934}],"decl_id":null,"docs":" The norm module","sig":null,"attributes":[{"value":"/ The norm module","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":457796,"byte_end":457815,"line_start":1,"line_end":1,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":457816,"byte_end":457819,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module contains implementations of various linear algebra norms.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":457820,"byte_end":457893,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"/ The implementations are contained within the `VectorNorm` and ","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":457894,"byte_end":457960,"line_start":4,"line_end":4,"column_start":1,"column_end":67}},{"value":"/ `MatrixNorm` traits. This module also contains `VectorMetric` and","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":457961,"byte_end":458030,"line_start":5,"line_end":5,"column_start":1,"column_end":70}},{"value":"/ `MatrixMetric` traits which are used to compute the metric distance.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458031,"byte_end":458103,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458104,"byte_end":458107,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ These traits can be used directly by importing implementors from","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458108,"byte_end":458176,"line_start":8,"line_end":8,"column_start":1,"column_end":69}},{"value":"/ this module. In most cases it will be easier to use the `norm` and","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458177,"byte_end":458247,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"/ `metric` functions which exist for both vectors and matrices. These","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458248,"byte_end":458319,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/ functions take generic arguments for the norm to be used.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458320,"byte_end":458381,"line_start":11,"line_end":11,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458382,"byte_end":458385,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ In general you should use the least generic norm that fits your purpose.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458386,"byte_end":458462,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ For example you would choose to use a `Euclidean` norm instead of an","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458463,"byte_end":458535,"line_start":14,"line_end":14,"column_start":1,"column_end":73}},{"value":"/ `Lp(2.0)` norm - despite them being mathematically equivalent. ","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458536,"byte_end":458603,"line_start":15,"line_end":15,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458604,"byte_end":458607,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Defining your own norm","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458608,"byte_end":458636,"line_start":17,"line_end":17,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458637,"byte_end":458640,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Note that these traits enforce no requirements on the norm. It is up","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458641,"byte_end":458713,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/ to the user to ensure that they define a norm correctly.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458714,"byte_end":458774,"line_start":20,"line_end":20,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458775,"byte_end":458778,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ To define your own norm you need to implement the `MatrixNorm`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458779,"byte_end":458845,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/ and/or the `VectorNorm` on your own struct. When you have defined","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458846,"byte_end":458915,"line_start":23,"line_end":23,"column_start":1,"column_end":70}},{"value":"/ a norm you get the _induced metric_ for free. This means that any","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458916,"byte_end":458985,"line_start":24,"line_end":24,"column_start":1,"column_end":70}},{"value":"/ object which implements the `VectorNorm` or `MatrixNorm` will","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":458986,"byte_end":459051,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/ automatically implement the `VectorMetric` and `MatrixMetric` traits","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459052,"byte_end":459124,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/ respectively. This induced metric will compute the norm of the","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459125,"byte_end":459191,"line_start":27,"line_end":27,"column_start":1,"column_end":67}},{"value":"/ difference between the vectors or matrices.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459192,"byte_end":459239,"line_start":28,"line_end":28,"column_start":1,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":1894},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459373,"byte_end":459383,"line_start":38,"line_end":38,"column_start":11,"column_end":21},"name":"VectorNorm","qualname":"::norm::VectorNorm","value":"VectorNorm<T>","parent":null,"children":[{"krate":0,"index":1896}],"decl_id":null,"docs":" Trait for vector norms\n","sig":null,"attributes":[{"value":"/ Trait for vector norms","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459336,"byte_end":459362,"line_start":37,"line_end":37,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1896},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459430,"byte_end":459434,"line_start":40,"line_end":40,"column_start":8,"column_end":12},"name":"norm","qualname":"::norm::VectorNorm::norm","value":"pub fn norm(&Self, &Vector<T>) -> T","parent":{"krate":0,"index":1894},"children":[],"decl_id":null,"docs":" Computes the vector norm.\n","sig":null,"attributes":[{"value":"/ Computes the vector norm.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459393,"byte_end":459422,"line_start":39,"line_end":39,"column_start":5,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":1897},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459506,"byte_end":459518,"line_start":44,"line_end":44,"column_start":11,"column_end":23},"name":"VectorMetric","qualname":"::norm::VectorMetric","value":"VectorMetric<T>","parent":null,"children":[{"krate":0,"index":1899}],"decl_id":null,"docs":" Trait for vector metrics.\n","sig":null,"attributes":[{"value":"/ Trait for vector metrics.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459466,"byte_end":459495,"line_start":43,"line_end":43,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1899},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459589,"byte_end":459595,"line_start":46,"line_end":46,"column_start":8,"column_end":14},"name":"metric","qualname":"::norm::VectorMetric::metric","value":"pub fn metric(&Self, &Vector<T>, &Vector<T>) -> T","parent":{"krate":0,"index":1897},"children":[],"decl_id":null,"docs":" Computes the metric distance between two vectors.\n","sig":null,"attributes":[{"value":"/ Computes the metric distance between two vectors.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459528,"byte_end":459581,"line_start":45,"line_end":45,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":1900},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459682,"byte_end":459692,"line_start":50,"line_end":50,"column_start":11,"column_end":21},"name":"MatrixNorm","qualname":"::norm::MatrixNorm","value":"MatrixNorm<T, M: BaseMatrix<T>>","parent":null,"children":[{"krate":0,"index":1903}],"decl_id":null,"docs":" Trait for matrix norms.\n","sig":null,"attributes":[{"value":"/ Trait for matrix norms.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459644,"byte_end":459671,"line_start":49,"line_end":49,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1903},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459757,"byte_end":459761,"line_start":52,"line_end":52,"column_start":8,"column_end":12},"name":"norm","qualname":"::norm::MatrixNorm::norm","value":"pub fn norm(&Self, &M) -> T","parent":{"krate":0,"index":1900},"children":[],"decl_id":null,"docs":" Computes the matrix norm.\n","sig":null,"attributes":[{"value":"/ Computes the matrix norm.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459720,"byte_end":459749,"line_start":51,"line_end":51,"column_start":5,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":1904},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459825,"byte_end":459837,"line_start":56,"line_end":56,"column_start":11,"column_end":23},"name":"MatrixMetric","qualname":"::norm::MatrixMetric","value":"MatrixMetric<'a, 'b, T, M1: 'a + BaseMatrix<T>, M2: 'b + BaseMatrix<T>>","parent":null,"children":[{"krate":0,"index":1910}],"decl_id":null,"docs":" Trait for matrix metrics.\n","sig":null,"attributes":[{"value":"/ Trait for matrix metrics.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459785,"byte_end":459814,"line_start":55,"line_end":55,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1910},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459965,"byte_end":459971,"line_start":58,"line_end":58,"column_start":8,"column_end":14},"name":"metric","qualname":"::norm::MatrixMetric::metric","value":"pub fn metric(&Self, &'a M1, &'b M2) -> T","parent":{"krate":0,"index":1904},"children":[],"decl_id":null,"docs":" Computes the metric distance between two matrices.\n","sig":null,"attributes":[{"value":"/ Computes the metric distance between two matrices.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":459903,"byte_end":459957,"line_start":57,"line_end":57,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":4421},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461077,"byte_end":461086,"line_start":100,"line_end":100,"column_start":12,"column_end":21},"name":"Euclidean","qualname":"::norm::Euclidean","value":"","parent":null,"children":[],"decl_id":null,"docs":" The Euclidean norm","sig":null,"attributes":[{"value":"/ The Euclidean norm","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":460908,"byte_end":460930,"line_start":93,"line_end":93,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":460931,"byte_end":460934,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ The Euclidean norm computes the square-root","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":460935,"byte_end":460982,"line_start":95,"line_end":95,"column_start":1,"column_end":48}},{"value":"/ of the sum of squares.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":460983,"byte_end":461009,"line_start":96,"line_end":96,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461010,"byte_end":461013,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ `||v|| = SQRT(SUM(v_i * v_i))`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461014,"byte_end":461048,"line_start":98,"line_end":98,"column_start":1,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4427},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":462237,"byte_end":462245,"line_start":141,"line_end":141,"column_start":5,"column_end":13},"name":"Infinity","qualname":"::norm::Lp::Infinity","value":"Lp::Infinity","parent":{"krate":0,"index":4425},"children":[],"decl_id":null,"docs":" The L-infinity norm (supremum)\n","sig":null,"attributes":[{"value":"/ The L-infinity norm (supremum)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":462198,"byte_end":462232,"line_start":140,"line_end":140,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4429},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":462293,"byte_end":462300,"line_start":143,"line_end":143,"column_start":5,"column_end":12},"name":"Integer","qualname":"::norm::Lp::Integer","value":"Lp::Integer(i32)","parent":{"krate":0,"index":4425},"children":[],"decl_id":null,"docs":" The Lp norm where p is an integer\n","sig":null,"attributes":[{"value":"/ The Lp norm where p is an integer","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":462251,"byte_end":462288,"line_start":142,"line_end":142,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4432},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":462350,"byte_end":462355,"line_start":145,"line_end":145,"column_start":5,"column_end":10},"name":"Float","qualname":"::norm::Lp::Float","value":"Lp::Float(T)","parent":{"krate":0,"index":4425},"children":[],"decl_id":null,"docs":" The Lp norm where p is a float\n","sig":null,"attributes":[{"value":"/ The Lp norm where p is a float","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":462311,"byte_end":462345,"line_start":144,"line_end":144,"column_start":5,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":4425},"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":462179,"byte_end":462181,"line_start":139,"line_end":139,"column_start":10,"column_end":12},"name":"Lp","qualname":"::norm::Lp","value":"pub enum Lp<T: Float> { Infinity, Integer(i32), Float(T), }","parent":null,"children":[{"krate":0,"index":4427},{"krate":0,"index":4429},{"krate":0,"index":4432}],"decl_id":null,"docs":" The Lp norm","sig":null,"attributes":[{"value":"/ The Lp norm","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461498,"byte_end":461513,"line_start":120,"line_end":120,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461514,"byte_end":461517,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ The","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461518,"byte_end":461525,"line_start":122,"line_end":122,"column_start":1,"column_end":8}},{"value":"/ [Lp norm](https://en.wikipedia.org/wiki/Norm_(mathematics)#p-norm)","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461526,"byte_end":461596,"line_start":123,"line_end":123,"column_start":1,"column_end":71}},{"value":"/ computes the `p`th root of the sum of elements","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461597,"byte_end":461647,"line_start":124,"line_end":124,"column_start":1,"column_end":51}},{"value":"/ to the `p`th power.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461648,"byte_end":461671,"line_start":125,"line_end":125,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461672,"byte_end":461675,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ The Lp norm requires `p` to be greater than","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461676,"byte_end":461723,"line_start":127,"line_end":127,"column_start":1,"column_end":48}},{"value":"/ or equal `1`.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461724,"byte_end":461741,"line_start":128,"line_end":128,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461742,"byte_end":461745,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ We use an enum for this norm to allow us to explicitly handle","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461746,"byte_end":461811,"line_start":130,"line_end":130,"column_start":1,"column_end":66}},{"value":"/ special cases at compile time. For example, we have an `Infinity`","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461812,"byte_end":461881,"line_start":131,"line_end":131,"column_start":1,"column_end":70}},{"value":"/ variant which handles the special case when the `Lp` norm is a","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461882,"byte_end":461948,"line_start":132,"line_end":132,"column_start":1,"column_end":67}},{"value":"/ supremum over absolute values. The `Integer` variant gives us a","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461949,"byte_end":462016,"line_start":133,"line_end":133,"column_start":1,"column_end":68}},{"value":"/ performance boost when `p` is an integer.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":462017,"byte_end":462062,"line_start":134,"line_end":134,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":462063,"byte_end":462066,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ You should avoid matching directly against this enum as it is likely","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":462067,"byte_end":462139,"line_start":136,"line_end":136,"column_start":1,"column_end":73}},{"value":"/ to grow.","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":462140,"byte_end":462152,"line_start":137,"line_end":137,"column_start":1,"column_end":13}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":10107,"byte_end":10137,"line_start":26,"line_end":26,"column_start":29,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":11684,"byte_end":11706,"line_start":68,"line_end":68,"column_start":15,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":14043,"byte_end":14073,"line_start":133,"line_end":133,"column_start":29,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":15001,"byte_end":15023,"line_start":165,"line_end":165,"column_start":16,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":20167,"byte_end":20180,"line_start":312,"line_end":312,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":20409,"byte_end":20438,"line_start":320,"line_end":320,"column_start":56,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":21464,"byte_end":21474,"line_start":355,"line_end":355,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":21585,"byte_end":21611,"line_start":359,"line_end":359,"column_start":50,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":22305,"byte_end":22313,"line_start":386,"line_end":386,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":22757,"byte_end":22781,"line_start":399,"line_end":399,"column_start":48,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":23603,"byte_end":23629,"line_start":426,"line_end":426,"column_start":9,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":24278,"byte_end":24304,"line_start":449,"line_end":449,"column_start":48,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":80701,"byte_end":80707,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83067,"byte_end":83073,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/bidiagonal.rs","byte_start":85353,"byte_end":85359,"line_start":9,"line_end":9,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":94556,"byte_end":94562,"line_start":92,"line_end":92,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109301,"byte_end":109307,"line_start":8,"line_end":8,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118678,"byte_end":118690,"line_start":134,"line_end":134,"column_start":47,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118983,"byte_end":118995,"line_start":149,"line_end":149,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":120675,"byte_end":120687,"line_start":201,"line_end":201,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126243,"byte_end":126249,"line_start":360,"line_end":360,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":133806,"byte_end":133812,"line_start":11,"line_end":11,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":78406,"byte_end":78412,"line_start":131,"line_end":131,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":201883,"byte_end":201889,"line_start":10,"line_end":10,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":203758,"byte_end":203769,"line_start":81,"line_end":81,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":204044,"byte_end":204058,"line_start":96,"line_end":96,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":204344,"byte_end":204350,"line_start":111,"line_end":111,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":204507,"byte_end":204521,"line_start":118,"line_end":118,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":204665,"byte_end":204668,"line_start":125,"line_end":125,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":204957,"byte_end":204963,"line_start":141,"line_end":141,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":205255,"byte_end":205261,"line_start":157,"line_end":157,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":697}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":205418,"byte_end":205424,"line_start":164,"line_end":164,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":205713,"byte_end":205722,"line_start":180,"line_end":180,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":206014,"byte_end":206023,"line_start":196,"line_end":196,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/deref.rs","byte_start":213537,"byte_end":213540,"line_start":6,"line_end":6,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/deref.rs","byte_start":213687,"byte_end":213693,"line_start":14,"line_end":14,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":839},{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/deref.rs","byte_start":213849,"byte_end":213855,"line_start":22,"line_end":22,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/deref.rs","byte_start":213982,"byte_end":213988,"line_start":28,"line_end":28,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/deref.rs","byte_start":214135,"byte_end":214144,"line_start":36,"line_end":36,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":853},{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/deref.rs","byte_start":214300,"byte_end":214309,"line_start":44,"line_end":44,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":214661,"byte_end":214667,"line_start":12,"line_end":12,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":905},{"krate":0,"index":907},{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":911}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217161,"byte_end":217167,"line_start":98,"line_end":98,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218269,"byte_end":218275,"line_start":145,"line_end":145,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218748,"byte_end":218754,"line_start":166,"line_end":166,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219333,"byte_end":219339,"line_start":193,"line_end":193,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":925}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":222631,"byte_end":222637,"line_start":313,"line_end":313,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":225965,"byte_end":225971,"line_start":426,"line_end":426,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":935}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":236657,"byte_end":236663,"line_start":15,"line_end":15,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1016},{"krate":0,"index":1017}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":237761,"byte_end":237775,"line_start":56,"line_end":56,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1024}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":238245,"byte_end":238251,"line_start":70,"line_end":70,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1029}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":238663,"byte_end":238666,"line_start":81,"line_end":81,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1034},{"krate":0,"index":1035}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":238803,"byte_end":238809,"line_start":88,"line_end":88,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1039},{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":238949,"byte_end":238955,"line_start":95,"line_end":95,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1044}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":239087,"byte_end":239093,"line_start":101,"line_end":101,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1048},{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":239230,"byte_end":239239,"line_start":108,"line_end":108,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1053},{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":239379,"byte_end":239388,"line_start":115,"line_end":115,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":242844,"byte_end":242850,"line_start":265,"line_end":265,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1063},{"krate":0,"index":1064}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":243351,"byte_end":243357,"line_start":287,"line_end":287,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1073},{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":260183,"byte_end":260189,"line_start":854,"line_end":854,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1093},{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/iter.rs","byte_start":288823,"byte_end":288827,"line_start":175,"line_end":175,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/iter.rs","byte_start":288872,"byte_end":288879,"line_start":176,"line_end":176,"column_start":35,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/iter.rs","byte_start":291133,"byte_end":291137,"line_start":250,"line_end":250,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/iter.rs","byte_start":291182,"byte_end":291189,"line_start":251,"line_end":251,"column_start":35,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/iter.rs","byte_start":292231,"byte_end":292237,"line_start":291,"line_end":291,"column_start":50,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1185}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/iter.rs","byte_start":294825,"byte_end":294836,"line_start":385,"line_end":385,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/iter.rs","byte_start":295389,"byte_end":295403,"line_start":412,"line_end":412,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1211}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mat_mul.rs","byte_start":318975,"byte_end":318981,"line_start":106,"line_end":106,"column_start":89,"column_end":95},"value":"","parent":null,"children":[{"krate":0,"index":1265},{"krate":0,"index":1266}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mat_mul.rs","byte_start":319172,"byte_end":319178,"line_start":115,"line_end":115,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1271},{"krate":0,"index":1272}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":327225,"byte_end":327236,"line_start":4,"line_end":4,"column_start":13,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1302},{"krate":0,"index":1304}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":329612,"byte_end":329626,"line_start":74,"line_end":74,"column_start":13,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1308},{"krate":0,"index":1310}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":339191,"byte_end":339208,"line_start":122,"line_end":122,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1347},{"krate":0,"index":1349},{"krate":0,"index":1350}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":343178,"byte_end":343195,"line_start":237,"line_end":237,"column_start":14,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1354},{"krate":0,"index":1356}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":343925,"byte_end":343942,"line_start":263,"line_end":263,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1359},{"krate":0,"index":1362},{"krate":0,"index":1365}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":345930,"byte_end":345947,"line_start":308,"line_end":308,"column_start":16,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1369},{"krate":0,"index":1372},{"krate":0,"index":1376},{"krate":0,"index":1377}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":350119,"byte_end":350122,"line_start":406,"line_end":406,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1380}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_permutation_mul.rs","byte_start":367483,"byte_end":367500,"line_start":11,"line_end":11,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1425},{"krate":0,"index":1426}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_permutation_mul.rs","byte_start":368508,"byte_end":368525,"line_start":44,"line_end":44,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1441},{"krate":0,"index":1442}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_permutation_mul.rs","byte_start":368743,"byte_end":368760,"line_start":53,"line_end":53,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1445},{"krate":0,"index":1446}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_permutation_mul.rs","byte_start":371110,"byte_end":371116,"line_start":130,"line_end":130,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1456},{"krate":0,"index":1457}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_permutation_mul.rs","byte_start":371382,"byte_end":371388,"line_start":140,"line_end":140,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1461},{"krate":0,"index":1462}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_permutation_mul.rs","byte_start":373559,"byte_end":373576,"line_start":207,"line_end":207,"column_start":46,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1467},{"krate":0,"index":1468}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_permutation_mul.rs","byte_start":373948,"byte_end":373965,"line_start":218,"line_end":218,"column_start":54,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1472},{"krate":0,"index":1473}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68205,"byte_end":68208,"line_start":159,"line_end":159,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1502}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68402,"byte_end":68408,"line_start":166,"line_end":166,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1506},{"krate":0,"index":1507}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":383078,"byte_end":383084,"line_start":16,"line_end":16,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1568}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":383189,"byte_end":383195,"line_start":22,"line_end":22,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1572}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":383333,"byte_end":383339,"line_start":30,"line_end":30,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1575}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":384338,"byte_end":384344,"line_start":72,"line_end":72,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1580}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":394023,"byte_end":394028,"line_start":36,"line_end":36,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1607},{"krate":0,"index":1609}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":394424,"byte_end":394429,"line_start":53,"line_end":53,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1611}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":394532,"byte_end":394537,"line_start":59,"line_end":59,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1613}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_ops.rs","byte_start":402299,"byte_end":402305,"line_start":11,"line_end":11,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1733},{"krate":0,"index":1734}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_ops.rs","byte_start":402520,"byte_end":402526,"line_start":21,"line_end":21,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1737}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433249,"byte_end":433255,"line_start":13,"line_end":13,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1798},{"krate":0,"index":1800},{"krate":0,"index":1803},{"krate":0,"index":1804},{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1809},{"krate":0,"index":1810}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":435623,"byte_end":435629,"line_start":104,"line_end":104,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1813}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":435717,"byte_end":435723,"line_start":110,"line_end":110,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1818}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":436066,"byte_end":436072,"line_start":128,"line_end":128,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1827}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":436280,"byte_end":436286,"line_start":135,"line_end":135,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1831}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":436884,"byte_end":436890,"line_start":156,"line_end":156,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1834}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437074,"byte_end":437080,"line_start":166,"line_end":166,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1837}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437690,"byte_end":437696,"line_start":193,"line_end":193,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1840},{"krate":0,"index":1841},{"krate":0,"index":1842}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439396,"byte_end":439402,"line_start":261,"line_end":261,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1845}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439813,"byte_end":439819,"line_start":281,"line_end":281,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1848}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440268,"byte_end":440274,"line_start":301,"line_end":301,"column_start":64,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":1851}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440783,"byte_end":440789,"line_start":322,"line_end":322,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1854}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441288,"byte_end":441294,"line_start":344,"line_end":344,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1857}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441901,"byte_end":441907,"line_start":366,"line_end":366,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1860}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442482,"byte_end":442488,"line_start":388,"line_end":388,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1863},{"krate":0,"index":1865}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443587,"byte_end":443593,"line_start":431,"line_end":431,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1869},{"krate":0,"index":1870}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":460255,"byte_end":460256,"line_start":68,"line_end":68,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1914}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":460689,"byte_end":460690,"line_start":82,"line_end":82,"column_start":64,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1922}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461122,"byte_end":461131,"line_start":102,"line_end":102,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1925}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461284,"byte_end":461293,"line_start":108,"line_end":108,"column_start":55,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1929}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":462395,"byte_end":462397,"line_start":148,"line_end":148,"column_start":34,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1932}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":463555,"byte_end":463557,"line_start":183,"line_end":183,"column_start":55,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1937}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2961,"byte_end":2967,"line_start":94,"line_end":94,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2977,"byte_end":2983,"line_start":95,"line_end":95,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":120}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":65182,"byte_end":65195,"line_start":17,"line_end":17,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":143}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":2993,"byte_end":3000,"line_start":96,"line_end":96,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1514}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":3010,"byte_end":3015,"line_start":97,"line_end":97,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1586}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":3025,"byte_end":3030,"line_start":98,"line_end":98,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1614}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":3040,"byte_end":3046,"line_start":99,"line_end":99,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1662}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":3056,"byte_end":3059,"line_start":100,"line_end":100,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1871}},{"kind":"Mod","span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/lib.rs","byte_start":3069,"byte_end":3073,"line_start":101,"line_end":101,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1878}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":10107,"byte_end":10137,"line_start":26,"line_end":26,"column_start":29,"column_end":59},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1953},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":11684,"byte_end":11706,"line_start":68,"line_end":68,"column_start":15,"column_end":37},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1981},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":14043,"byte_end":14073,"line_start":133,"line_end":133,"column_start":29,"column_end":59},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2008},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":15001,"byte_end":15023,"line_start":165,"line_end":165,"column_start":16,"column_end":38},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2035},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":20167,"byte_end":20180,"line_start":312,"line_end":312,"column_start":31,"column_end":44},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2062},"to":{"krate":0,"index":31}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":20409,"byte_end":20438,"line_start":320,"line_end":320,"column_start":56,"column_end":85},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2080},"to":{"krate":0,"index":37}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":21464,"byte_end":21474,"line_start":355,"line_end":355,"column_start":28,"column_end":38},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2107},"to":{"krate":0,"index":31}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":21585,"byte_end":21611,"line_start":359,"line_end":359,"column_start":50,"column_end":76},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2097},"to":{"krate":0,"index":37}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":22305,"byte_end":22313,"line_start":386,"line_end":386,"column_start":28,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2128},"to":{"krate":0,"index":31}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":22757,"byte_end":22781,"line_start":399,"line_end":399,"column_start":48,"column_end":72},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2117},"to":{"krate":0,"index":37}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":23603,"byte_end":23629,"line_start":426,"line_end":426,"column_start":9,"column_end":35},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix_eq.rs","byte_start":24278,"byte_end":24304,"line_start":449,"line_end":449,"column_start":48,"column_end":74},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2140},"to":{"krate":0,"index":37}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/qr.rs","byte_start":80701,"byte_end":80707,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/cholesky.rs","byte_start":83067,"byte_end":83073,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/bidiagonal.rs","byte_start":85353,"byte_end":85359,"line_start":9,"line_end":9,"column_start":9,"column_end":15},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/svd.rs","byte_start":94556,"byte_end":94562,"line_start":92,"line_end":92,"column_start":31,"column_end":37},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/hessenberg.rs","byte_start":109301,"byte_end":109307,"line_start":8,"line_end":8,"column_start":22,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118678,"byte_end":118690,"line_start":134,"line_end":134,"column_start":47,"column_end":59},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2175},"to":{"krate":0,"index":475}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":118983,"byte_end":118995,"line_start":149,"line_end":149,"column_start":26,"column_end":38},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":120675,"byte_end":120687,"line_start":201,"line_end":201,"column_start":9,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/lu.rs","byte_start":126243,"byte_end":126249,"line_start":360,"line_end":360,"column_start":9,"column_end":15},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/eigen.rs","byte_start":133806,"byte_end":133812,"line_start":11,"line_end":11,"column_start":31,"column_end":37},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/decomposition/mod.rs","byte_start":78406,"byte_end":78412,"line_start":131,"line_end":131,"column_start":9,"column_end":15},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":201883,"byte_end":201889,"line_start":10,"line_end":10,"column_start":27,"column_end":33},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":3659},"to":{"krate":0,"index":716}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":203758,"byte_end":203769,"line_start":81,"line_end":81,"column_start":31,"column_end":42},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":3685},"to":{"krate":0,"index":716}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":204044,"byte_end":204058,"line_start":96,"line_end":96,"column_start":31,"column_end":45},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":3704},"to":{"krate":0,"index":716}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":204344,"byte_end":204350,"line_start":111,"line_end":111,"column_start":30,"column_end":36},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":3659},"to":{"krate":0,"index":778}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":204507,"byte_end":204521,"line_start":118,"line_end":118,"column_start":34,"column_end":48},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":3704},"to":{"krate":0,"index":778}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":204665,"byte_end":204668,"line_start":125,"line_end":125,"column_start":31,"column_end":34},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":3716},"to":{"krate":0,"index":716}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":204957,"byte_end":204963,"line_start":141,"line_end":141,"column_start":31,"column_end":37},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":3731},"to":{"krate":0,"index":716}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":205255,"byte_end":205261,"line_start":157,"line_end":157,"column_start":34,"column_end":40},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":3731},"to":{"krate":0,"index":778}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":205418,"byte_end":205424,"line_start":164,"line_end":164,"column_start":31,"column_end":37},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":3765},"to":{"krate":0,"index":716}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":205713,"byte_end":205722,"line_start":180,"line_end":180,"column_start":31,"column_end":40},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":3780},"to":{"krate":0,"index":716}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/impl_base.rs","byte_start":206014,"byte_end":206023,"line_start":196,"line_end":196,"column_start":34,"column_end":43},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":3780},"to":{"krate":0,"index":778}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":151422,"byte_end":151427,"line_start":44,"line_end":44,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":716}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/base/mod.rs","byte_start":183790,"byte_end":183800,"line_start":1119,"line_end":1119,"column_start":29,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":716},"to":{"krate":0,"index":778}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/deref.rs","byte_start":213537,"byte_end":213540,"line_start":6,"line_end":6,"column_start":27,"column_end":30},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":3716},"to":{"krate":2,"index":3064}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/deref.rs","byte_start":213687,"byte_end":213693,"line_start":14,"line_end":14,"column_start":27,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":3731},"to":{"krate":2,"index":3064}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/deref.rs","byte_start":213849,"byte_end":213855,"line_start":22,"line_end":22,"column_start":30,"column_end":36},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":3731},"to":{"krate":2,"index":3077}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/deref.rs","byte_start":213982,"byte_end":213988,"line_start":28,"line_end":28,"column_start":27,"column_end":33},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":3765},"to":{"krate":2,"index":3064}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/deref.rs","byte_start":214135,"byte_end":214144,"line_start":36,"line_end":36,"column_start":27,"column_end":36},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":3780},"to":{"krate":2,"index":3064}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/deref.rs","byte_start":214300,"byte_end":214309,"line_start":44,"line_end":44,"column_start":30,"column_end":39},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":3780},"to":{"krate":2,"index":3077}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":214661,"byte_end":214667,"line_start":12,"line_end":12,"column_start":9,"column_end":15},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":217161,"byte_end":217167,"line_start":98,"line_end":98,"column_start":23,"column_end":29},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218269,"byte_end":218275,"line_start":145,"line_end":145,"column_start":22,"column_end":28},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":218748,"byte_end":218754,"line_start":166,"line_end":166,"column_start":29,"column_end":35},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":219333,"byte_end":219339,"line_start":193,"line_end":193,"column_start":32,"column_end":38},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":222631,"byte_end":222637,"line_start":313,"line_end":313,"column_start":22,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_mat.rs","byte_start":225965,"byte_end":225971,"line_start":426,"line_end":426,"column_start":40,"column_end":46},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":3659},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":236657,"byte_end":236663,"line_start":15,"line_end":15,"column_start":31,"column_end":37},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3659},"to":{"krate":2,"index":3149}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":237761,"byte_end":237775,"line_start":56,"line_end":56,"column_start":38,"column_end":52},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":3704},"to":{"krate":2,"index":3153}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":238245,"byte_end":238251,"line_start":70,"line_end":70,"column_start":34,"column_end":40},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":3659},"to":{"krate":2,"index":3153}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":238663,"byte_end":238666,"line_start":81,"line_end":81,"column_start":30,"column_end":33},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":3716},"to":{"krate":2,"index":3149}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":238803,"byte_end":238809,"line_start":88,"line_end":88,"column_start":30,"column_end":36},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":3731},"to":{"krate":2,"index":3149}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":238949,"byte_end":238955,"line_start":95,"line_end":95,"column_start":33,"column_end":39},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":3731},"to":{"krate":2,"index":3153}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":239087,"byte_end":239093,"line_start":101,"line_end":101,"column_start":30,"column_end":36},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":3765},"to":{"krate":2,"index":3149}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":239230,"byte_end":239239,"line_start":108,"line_end":108,"column_start":30,"column_end":39},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":3780},"to":{"krate":2,"index":3149}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":239379,"byte_end":239388,"line_start":115,"line_end":115,"column_start":33,"column_end":42},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":3780},"to":{"krate":2,"index":3153}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":242844,"byte_end":242850,"line_start":265,"line_end":265,"column_start":28,"column_end":34},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":3659},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":243351,"byte_end":243357,"line_start":287,"line_end":287,"column_start":36,"column_end":42},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":3659},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_ops.rs","byte_start":260183,"byte_end":260189,"line_start":854,"line_end":854,"column_start":17,"column_end":23},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":3659},"to":{"krate":2,"index":2947}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/iter.rs","byte_start":288823,"byte_end":288827,"line_start":175,"line_end":175,"column_start":35,"column_end":39},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":3788},"to":{"krate":2,"index":7199}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/iter.rs","byte_start":288872,"byte_end":288879,"line_start":176,"line_end":176,"column_start":35,"column_end":42},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":3801},"to":{"krate":2,"index":7199}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/iter.rs","byte_start":291133,"byte_end":291137,"line_start":250,"line_end":250,"column_start":35,"column_end":39},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":3739},"to":{"krate":2,"index":7199}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/iter.rs","byte_start":291182,"byte_end":291189,"line_start":251,"line_end":251,"column_start":35,"column_end":42},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":3752},"to":{"krate":2,"index":7199}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/iter.rs","byte_start":292231,"byte_end":292237,"line_start":291,"line_end":291,"column_start":50,"column_end":56},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":3659},"to":{"krate":2,"index":7143}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/iter.rs","byte_start":294825,"byte_end":294836,"line_start":385,"line_end":385,"column_start":30,"column_end":41},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":3685},"to":{"krate":2,"index":7147}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/iter.rs","byte_start":295389,"byte_end":295403,"line_start":412,"line_end":412,"column_start":30,"column_end":44},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":3704},"to":{"krate":2,"index":7147}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mat_mul.rs","byte_start":318975,"byte_end":318981,"line_start":106,"line_end":106,"column_start":89,"column_end":95},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":3659},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mat_mul.rs","byte_start":319172,"byte_end":319178,"line_start":115,"line_end":115,"column_start":40,"column_end":46},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":3659},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":327225,"byte_end":327236,"line_start":4,"line_end":4,"column_start":13,"column_end":24},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":3685},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/slice.rs","byte_start":329612,"byte_end":329626,"line_start":74,"line_end":74,"column_start":13,"column_end":27},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":3704},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":339191,"byte_end":339208,"line_start":122,"line_end":122,"column_start":9,"column_end":26},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":3482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":343178,"byte_end":343195,"line_start":237,"line_end":237,"column_start":14,"column_end":31},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":3482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":343925,"byte_end":343942,"line_start":263,"line_end":263,"column_start":9,"column_end":26},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":3482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":345930,"byte_end":345947,"line_start":308,"line_end":308,"column_start":16,"column_end":33},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":3482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/permutation_matrix.rs","byte_start":350119,"byte_end":350122,"line_start":406,"line_end":406,"column_start":40,"column_end":43},"kind":{"Impl":{"id":74}},"from":{"krate":5,"index":6773},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_permutation_mul.rs","byte_start":367483,"byte_end":367500,"line_start":11,"line_end":11,"column_start":28,"column_end":45},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":3482},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_permutation_mul.rs","byte_start":368508,"byte_end":368525,"line_start":44,"line_end":44,"column_start":36,"column_end":53},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":3482},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_permutation_mul.rs","byte_start":368743,"byte_end":368760,"line_start":53,"line_end":53,"column_start":28,"column_end":45},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3482},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_permutation_mul.rs","byte_start":371110,"byte_end":371116,"line_start":130,"line_end":130,"column_start":39,"column_end":45},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3659},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_permutation_mul.rs","byte_start":371382,"byte_end":371388,"line_start":140,"line_end":140,"column_start":47,"column_end":53},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":3659},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_permutation_mul.rs","byte_start":373559,"byte_end":373576,"line_start":207,"line_end":207,"column_start":46,"column_end":63},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":3482},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/impl_permutation_mul.rs","byte_start":373948,"byte_end":373965,"line_start":218,"line_end":218,"column_start":54,"column_end":71},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":3482},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68205,"byte_end":68208,"line_start":159,"line_end":159,"column_start":17,"column_end":20},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":3716},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/matrix/mod.rs","byte_start":68402,"byte_end":68408,"line_start":166,"line_end":166,"column_start":17,"column_end":23},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":3731},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":383078,"byte_end":383084,"line_start":16,"line_end":16,"column_start":26,"column_end":32},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":4376},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":383189,"byte_end":383195,"line_start":22,"line_end":22,"column_start":31,"column_end":37},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":4376},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":383333,"byte_end":383339,"line_start":30,"line_end":30,"column_start":29,"column_end":35},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":3659},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/convert.rs","byte_start":384338,"byte_end":384344,"line_start":72,"line_end":72,"column_start":22,"column_end":28},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":394023,"byte_end":394028,"line_start":36,"line_end":36,"column_start":6,"column_end":11},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":3917},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":394424,"byte_end":394429,"line_start":53,"line_end":53,"column_start":23,"column_end":28},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":3917},"to":{"krate":1,"index":2326}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/error.rs","byte_start":394532,"byte_end":394537,"line_start":59,"line_end":59,"column_start":23,"column_end":28},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":3917},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_ops.rs","byte_start":402299,"byte_end":402305,"line_start":11,"line_end":11,"column_start":26,"column_end":32},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":4376},"to":{"krate":2,"index":3149}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_ops.rs","byte_start":402520,"byte_end":402526,"line_start":21,"line_end":21,"column_start":29,"column_end":35},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":4376},"to":{"krate":2,"index":3153}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":433249,"byte_end":433255,"line_start":13,"line_end":13,"column_start":9,"column_end":15},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":4376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":435623,"byte_end":435629,"line_start":104,"line_end":104,"column_start":26,"column_end":32},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":4376},"to":{"krate":2,"index":2756}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":435717,"byte_end":435723,"line_start":110,"line_end":110,"column_start":26,"column_end":32},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":4376},"to":{"krate":2,"index":7147}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":436066,"byte_end":436072,"line_start":128,"line_end":128,"column_start":29,"column_end":35},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":4376},"to":{"krate":2,"index":7143}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":436280,"byte_end":436286,"line_start":135,"line_end":135,"column_start":40,"column_end":46},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":4376},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":436884,"byte_end":436890,"line_start":156,"line_end":156,"column_start":26,"column_end":32},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":4376},"to":{"krate":2,"index":2474}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437074,"byte_end":437080,"line_start":166,"line_end":166,"column_start":15,"column_end":21},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":4376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":437690,"byte_end":437696,"line_start":193,"line_end":193,"column_start":28,"column_end":34},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":4376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439396,"byte_end":439402,"line_start":261,"line_end":261,"column_start":23,"column_end":29},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":4376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":439813,"byte_end":439819,"line_start":281,"line_end":281,"column_start":22,"column_end":28},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":4376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440268,"byte_end":440274,"line_start":301,"line_end":301,"column_start":64,"column_end":70},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":4376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":440783,"byte_end":440789,"line_start":322,"line_end":322,"column_start":43,"column_end":49},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":4376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441288,"byte_end":441294,"line_start":344,"line_end":344,"column_start":36,"column_end":42},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":4376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":441901,"byte_end":441907,"line_start":366,"line_end":366,"column_start":36,"column_end":42},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":4376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":442482,"byte_end":442488,"line_start":388,"line_end":388,"column_start":16,"column_end":22},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":4376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/vector/impl_vec.rs","byte_start":443587,"byte_end":443593,"line_start":431,"line_end":431,"column_start":32,"column_end":38},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":4376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":460255,"byte_end":460256,"line_start":68,"line_end":68,"column_start":32,"column_end":33},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1912},"to":{"krate":0,"index":1897}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":460689,"byte_end":460690,"line_start":82,"line_end":82,"column_start":64,"column_end":65},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1918},"to":{"krate":0,"index":1904}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461122,"byte_end":461131,"line_start":102,"line_end":102,"column_start":34,"column_end":43},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":4421},"to":{"krate":0,"index":1894}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":461284,"byte_end":461293,"line_start":108,"line_end":108,"column_start":55,"column_end":64},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":4421},"to":{"krate":0,"index":1900}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":462395,"byte_end":462397,"line_start":148,"line_end":148,"column_start":34,"column_end":36},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":4425},"to":{"krate":0,"index":1894}},{"span":{"file_name":"/home/strelda/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/norm/mod.rs","byte_start":463555,"byte_end":463557,"line_start":183,"line_end":183,"column_start":55,"column_end":57},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":4425},"to":{"krate":0,"index":1900}}]}